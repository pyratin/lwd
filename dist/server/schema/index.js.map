{"version":3,"sources":["../../../js/server/schema/index.js"],"names":["movieType","GraphQLObjectType","name","fields","id","type","GraphQLID","resolve","movieId","_id","toString","title","GraphQLString","gif","path","viewerType","viewerId","text","queryType","viewer","movieSearchResultType","snippet","MovieSearchMutation","inputFields","GraphQLNonNull","outputFields","results","GraphQLList","mutateAndGetPayload","MovieCreateMutation","genre","movie","db","req","mutationType","movieSearch","movieCreate","GraphQLSchema","query","mutation"],"mappings":"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","sourcesContent":["'use strict';\n\nimport {\n  GraphQLSchema,\n  GraphQLObjectType,\n  GraphQLID,\n  GraphQLString,\n  GraphQLNonNull,\n  GraphQLList\n} from 'graphql';\nimport {\n  mutationWithClientMutationId\n} from 'graphql-relay';\n\nimport viewerGet from './fns/viewer';\nimport movieSearch from './mutations/movieSearch';\nimport movieCreate from './mutations/movieCreate';\n\nconst movieType = new GraphQLObjectType(\n  {\n    name: 'Movie',\n    fields() {\n\n      return {\n        id: {\n          type: GraphQLID,\n          resolve(\n            {\n              _id: movieId\n            }\n          ) {\n\n            return (\n              movieId\n            ) &&\n              movieId.toString();\n          }\n        },\n        title: {\n          type: GraphQLString\n        },\n        gif: {\n          type: GraphQLString\n        },\n        path: {\n          type: GraphQLString\n        }\n      };\n    }\n  }\n);\n\nconst viewerType = new GraphQLObjectType(\n  {\n    name: 'Viewer',\n    fields() {\n\n      return {\n        id: {\n          type: GraphQLID,\n          resolve(\n            {\n              _id: viewerId\n            }\n          ) {\n\n            return (\n              viewerId\n            );\n          }\n        },\n        text: {\n          type: GraphQLString\n        }\n      };\n    }\n  }\n);\n\nconst queryType = new GraphQLObjectType(\n  {\n    name: 'QUery',\n    fields() {\n\n      return {\n        viewer: {\n          type: viewerType,\n          resolve() {\n\n            return viewerGet();\n          }\n        }\n      };\n    }\n  }\n);\n\nconst movieSearchResultType = new GraphQLObjectType(\n  {\n    name: 'MovieSearchResult',\n    fields() {\n\n      return {\n        title: {\n          type: GraphQLString\n        },\n        snippet: {\n          type: GraphQLString\n        }\n      };\n    }\n  }\n);\n\nconst MovieSearchMutation = mutationWithClientMutationId(\n  {\n    name: 'MovieSearch',\n    inputFields: {\n      text: {\n        type: new GraphQLNonNull(\n          GraphQLString\n        )\n      }\n    },\n    outputFields: {\n      viewer: {\n        type: viewerType,\n        resolve() {\n\n          return viewerGet();\n        }\n      },\n      results: {\n        type: new GraphQLList(\n          movieSearchResultType\n        ),\n        resolve(\n          results\n        ) {\n\n          return (\n            results\n          );\n        }\n      }\n    },\n    mutateAndGetPayload(\n      {\n        text\n      }\n    ) {\n\n      return movieSearch(\n        text\n      );\n    }\n  }\n);\n\nconst MovieCreateMutation = mutationWithClientMutationId(\n  {\n    name: 'MovieCreate',\n    inputFields: {\n      text: {\n        type: new GraphQLNonNull(\n          GraphQLString\n        )\n      },\n      genre: {\n        type: GraphQLString\n      }\n    },\n    outputFields: {\n      viewer: {\n        type: viewerType,\n        resolve() {\n\n          return viewerGet();\n        }\n      },\n      movie: {\n        type: movieType,\n        resolve(\n          movie\n        ) {\n\n          return (\n            movie\n          );\n        }\n      },\n    },\n    mutateAndGetPayload(\n      {\n        text,\n        genre\n      },\n      {\n        db,\n        req\n      }\n    ) {\n\n      return movieCreate(\n        text,\n        genre,\n        db,\n        req\n      );\n    }\n  }\n);\n\nconst mutationType = new GraphQLObjectType(\n  {\n    name: 'Mutation',\n    fields() {\n\n      return {\n        movieSearch: MovieSearchMutation,\n        movieCreate: MovieCreateMutation\n      };\n    }\n  }\n);\n\nexport default new GraphQLSchema(\n  {\n    query: queryType,\n    mutation: mutationType\n  }\n);\n"],"file":"index.js"}