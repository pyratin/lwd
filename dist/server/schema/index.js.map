{"version":3,"sources":["../../../js/server/schema/index.js"],"names":["characterType","GraphQLObjectType","name","fields","text","type","GraphQLString","_text","renderText","actorImageId","GraphQLID","splashType","title","poster","characters","GraphQLList","resolve","filter","character","render","spoofable","GraphQLBoolean","cardType","gifyUrl","deckType","splash","cards","movieType","id","movieId","_id","toString","base64","path","outputType","GraphQLUnionType","types","resolveType","viewerType","viewerId","queryType","viewer","movieSearchResultType","snippet","MovieSearchMutation","inputFields","GraphQLNonNull","outputFields","results","mutateAndGetPayload","MovieCreateMutation","genre","createFlag","movie","input","db","req","undefined","mutationType","movieSearch","movieCreate","GraphQLSchema","query","mutation"],"mappings":"AAAA;;;;;;;;;;;AAEA;;AAUA;;AAIA;;AACA;;AACA;;AAEA,IAAMA,aAAa,GAAG,IAAIC,0BAAJ,CACpB;AACEC,EAAAA,IAAI,EAAE,WADR;AAEEC,EAAAA,MAFF,oBAEW;AAEP,WAAO;AACLC,MAAAA,IAAI,EAAE;AACJC,QAAAA,IAAI,EAAEC;AADF,OADD;AAILC,MAAAA,KAAK,EAAE;AACLF,QAAAA,IAAI,EAAEC;AADD,OAJF;AAOLE,MAAAA,UAAU,EAAE;AACVH,QAAAA,IAAI,EAAEC;AADI,OAPP;AAULG,MAAAA,YAAY,EAAE;AACZJ,QAAAA,IAAI,EAAEK;AADM;AAVT,KAAP;AAcD;AAlBH,CADoB,CAAtB;AAuBA,IAAMC,UAAU,GAAG,IAAIV,0BAAJ,CACjB;AACEC,EAAAA,IAAI,EAAE,QADR;AAEEC,EAAAA,MAFF,oBAEW;AAEP,WAAO;AACLS,MAAAA,KAAK,EAAE;AACLP,QAAAA,IAAI,EAAEC;AADD,OADF;AAILO,MAAAA,MAAM,EAAE;AACNR,QAAAA,IAAI,EAAEC;AADA,OAJH;AAOLQ,MAAAA,UAAU,EAAE;AACVT,QAAAA,IAAI,EAAE,IAAIU,oBAAJ,CACJf,aADI,CADI;AAIVgB,QAAAA,OAJU,yBAQR;AAAA,cAFEF,UAEF,QAFEA,UAEF;AAEA,iBAAOA,UAAU,CAACG,MAAX,CACL,UACEC,SADF,EAEK;AAEH,mBACEA,SAAS,CAACC,MADZ;AAGD,WARI,CAAP;AAUD;AApBS,OAPP;AA6BLC,MAAAA,SAAS,EAAE;AACTf,QAAAA,IAAI,EAAEgB;AADG;AA7BN,KAAP;AAiCD;AArCH,CADiB,CAAnB;AA0CA,IAAMC,QAAQ,GAAG,IAAIrB,0BAAJ,CACf;AACEC,EAAAA,IAAI,EAAE,MADR;AAEEC,EAAAA,MAFF,oBAEW;AAEP,WAAO;AACLK,MAAAA,UAAU,EAAE;AACVH,QAAAA,IAAI,EAAEC;AADI,OADP;AAILG,MAAAA,YAAY,EAAE;AACZJ,QAAAA,IAAI,EAAEK;AADM,OAJT;AAOLa,MAAAA,OAAO,EAAE;AACPlB,QAAAA,IAAI,EAAEC;AADC;AAPJ,KAAP;AAWD;AAfH,CADe,CAAjB;AAoBA,IAAMkB,QAAQ,GAAG,IAAIvB,0BAAJ,CACf;AACEC,EAAAA,IAAI,EAAE,MADR;AAEEC,EAAAA,MAFF,oBAEW;AAEP,WAAO;AACLsB,MAAAA,MAAM,EAAE;AACNpB,QAAAA,IAAI,EAAEM;AADA,OADH;AAILe,MAAAA,KAAK,EAAE;AACLrB,QAAAA,IAAI,EAAE,IAAIU,oBAAJ,CACJO,QADI;AADD;AAJF,KAAP;AAUD;AAdH,CADe,CAAjB;AAmBA,IAAMK,SAAS,GAAG,IAAI1B,0BAAJ,CAChB;AACEC,EAAAA,IAAI,EAAE,OADR;AAEEC,EAAAA,MAFF,oBAEW;AAEP,WAAO;AACLyB,MAAAA,EAAE,EAAE;AACFvB,QAAAA,IAAI,EAAEK,kBADJ;AAEFM,QAAAA,OAFE,0BAMA;AAAA,cAFOa,OAEP,SAFEC,GAEF;AAEA,iBACED,OADK,IAGLA,OAAO,CAACE,QAAR,EAHF;AAID;AAZC,OADC;AAeLnB,MAAAA,KAAK,EAAE;AACLP,QAAAA,IAAI,EAAEC;AADD,OAfF;AAkBL0B,MAAAA,MAAM,EAAE;AACN3B,QAAAA,IAAI,EAAEC;AADA,OAlBH;AAqBL2B,MAAAA,IAAI,EAAE;AACJ5B,QAAAA,IAAI,EAAEC;AADF;AArBD,KAAP;AAyBD;AA7BH,CADgB,CAAlB;AAkCA,IAAM4B,UAAU,GAAG,IAAIC,yBAAJ,CACjB;AACEjC,EAAAA,IAAI,EAAE,QADR;AAEEkC,EAAAA,KAAK,EAAE,CACLZ,QADK,EAELG,SAFK,CAFT;AAMEU,EAAAA,WANF,8BAUI;AAAA,QAFEZ,MAEF,SAFEA,MAEF;AAEA,WACEA,MADK,GAGLD,QAHK,GAILG,SAJF;AAKD;AAjBH,CADiB,CAAnB;AAsBA,IAAMW,UAAU,GAAG,IAAIrC,0BAAJ,CACjB;AACEC,EAAAA,IAAI,EAAE,QADR;AAEEC,EAAAA,MAFF,oBAEW;AAEP,WAAO;AACLyB,MAAAA,EAAE,EAAE;AACFvB,QAAAA,IAAI,EAAEK,kBADJ;AAEFM,QAAAA,OAFE,0BAMA;AAAA,cAFOuB,QAEP,SAFET,GAEF;AAEA,iBACES,QADF;AAGD;AAXC,OADC;AAcLnC,MAAAA,IAAI,EAAE;AACJC,QAAAA,IAAI,EAAEC;AADF;AAdD,KAAP;AAkBD;AAtBH,CADiB,CAAnB;AA2BA,IAAMkC,SAAS,GAAG,IAAIvC,0BAAJ,CAChB;AACEC,EAAAA,IAAI,EAAE,OADR;AAEEC,EAAAA,MAFF,oBAEW;AAEP,WAAO;AACLsC,MAAAA,MAAM,EAAE;AACNpC,QAAAA,IAAI,EAAEiC,UADA;AAENtB,QAAAA,OAFM,qBAEI;AAER,iBAAO,yBAAP;AACD;AALK;AADH,KAAP;AASD;AAbH,CADgB,CAAlB;AAkBA,IAAM0B,qBAAqB,GAAG,IAAIzC,0BAAJ,CAC5B;AACEC,EAAAA,IAAI,EAAE,mBADR;AAEEC,EAAAA,MAFF,oBAEW;AAEP,WAAO;AACLS,MAAAA,KAAK,EAAE;AACLP,QAAAA,IAAI,EAAEC;AADD,OADF;AAILqC,MAAAA,OAAO,EAAE;AACPtC,QAAAA,IAAI,EAAEC;AADC;AAJJ,KAAP;AAQD;AAZH,CAD4B,CAA9B;AAiBA,IAAMsC,mBAAmB,GAAG,gDAC1B;AACE1C,EAAAA,IAAI,EAAE,aADR;AAEE2C,EAAAA,WAAW,EAAE;AACXzC,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAE,IAAIyC,uBAAJ,CACJxC,sBADI;AADF;AADK,GAFf;AASEyC,EAAAA,YAAY,EAAE;AACZN,IAAAA,MAAM,EAAE;AACNpC,MAAAA,IAAI,EAAEiC,UADA;AAENtB,MAAAA,OAFM,qBAEI;AAER,eAAO,yBAAP;AACD;AALK,KADI;AAQZgC,IAAAA,OAAO,EAAE;AACP3C,MAAAA,IAAI,EAAE,IAAIU,oBAAJ,CACJ2B,qBADI,CADC;AAIP1B,MAAAA,OAJO,mBAKLgC,OALK,EAML;AAEA,eACEA,OADF;AAGD;AAXM;AARG,GAThB;AA+BEC,EAAAA,mBA/BF,sCAmCI;AAAA,QAFE7C,IAEF,SAFEA,IAEF;AAEA,WAAO,6BACLA,IADK,CAAP;AAGD;AAxCH,CAD0B,CAA5B;AA6CA,IAAM8C,mBAAmB,GAAG,gDAC1B;AACEhD,EAAAA,IAAI,EAAE,aADR;AAEE2C,EAAAA,WAAW,EAAE;AACXzC,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAE,IAAIyC,uBAAJ,CACJxC,sBADI;AADF,KADK;AAMX6C,IAAAA,KAAK,EAAE;AACL9C,MAAAA,IAAI,EAAEC;AADD,KANI;AASX4B,IAAAA,UAAU,EAAE;AACV7B,MAAAA,IAAI,EAAEC;AADI,KATD;AAYX8C,IAAAA,UAAU,EAAE;AACV/C,MAAAA,IAAI,EAAEgB;AADI;AAZD,GAFf;AAkBE0B,EAAAA,YAAY,EAAE;AACZN,IAAAA,MAAM,EAAE;AACNpC,MAAAA,IAAI,EAAEiC,UADA;AAENtB,MAAAA,OAFM,qBAEI;AAER,eAAO,yBAAP;AACD;AALK,KADI;AAQZqC,IAAAA,KAAK,EAAE;AACLhD,MAAAA,IAAI,EAAE6B,UADD;AAELlB,MAAAA,OAFK,mBAGHqC,KAHG,EAIH;AAEA,eACEA,KADF;AAGD;AATI;AARK,GAlBhB;AAsCEJ,EAAAA,mBAtCF,6CA+CI;AAAA,QAPE7C,IAOF,SAPEA,IAOF;AAAA,QANKkD,KAML;AAAA,QAHEC,EAGF,SAHEA,EAGF;AAAA,QAFEC,GAEF,SAFEA,GAEF;AAEA,WAAO,6BACLpD,IADK,EAELkD,KAFK,EAGLG,SAHK,EAILF,EAJK,EAKLC,GALK,CAAP;AAOD;AAxDH,CAD0B,CAA5B;AA6DA,IAAME,YAAY,GAAG,IAAIzD,0BAAJ,CACnB;AACEC,EAAAA,IAAI,EAAE,UADR;AAEEC,EAAAA,MAFF,oBAEW;AAEP,WAAO;AACLwD,MAAAA,WAAW,EAAEf,mBADR;AAELgB,MAAAA,WAAW,EAAEV;AAFR,KAAP;AAID;AARH,CADmB,CAArB;;eAae,IAAIW,sBAAJ,CACb;AACEC,EAAAA,KAAK,EAAEtB,SADT;AAEEuB,EAAAA,QAAQ,EAAEL;AAFZ,CADa,C","sourcesContent":["'use strict';\n\nimport {\n  GraphQLSchema,\n  GraphQLObjectType,\n  GraphQLID,\n  GraphQLString,\n  GraphQLNonNull,\n  GraphQLList,\n  GraphQLBoolean,\n  GraphQLUnionType\n} from 'graphql';\nimport {\n  mutationWithClientMutationId\n} from 'graphql-relay';\n\nimport viewerGet from './fns/viewer';\nimport movieSearch from './mutations/movieSearch';\nimport movieCreate from './mutations/movieCreate';\n\nconst characterType = new GraphQLObjectType(\n  {\n    name: 'Character',\n    fields() {\n\n      return {\n        text: {\n          type: GraphQLString\n        },\n        _text: {\n          type: GraphQLString\n        },\n        renderText: {\n          type: GraphQLString\n        },\n        actorImageId: {\n          type: GraphQLID\n        }\n      };\n    }\n  }\n);\n\nconst splashType = new GraphQLObjectType(\n  {\n    name: 'Splash',\n    fields() {\n\n      return {\n        title: {\n          type: GraphQLString,\n        },\n        poster: {\n          type: GraphQLString\n        },\n        characters: {\n          type: new GraphQLList(\n            characterType\n          ),\n          resolve(\n            {\n              characters\n            }\n          ) {\n\n            return characters.filter(\n              (\n                character\n              ) => {\n\n                return (\n                  character.render\n                );\n              }\n            );\n          }\n        },\n        spoofable: {\n          type: GraphQLBoolean\n        }\n      };\n    }\n  }\n);\n\nconst cardType = new GraphQLObjectType(\n  {\n    name: 'Card',\n    fields() {\n\n      return {\n        renderText: {\n          type: GraphQLString\n        },\n        actorImageId: {\n          type: GraphQLID\n        },\n        gifyUrl: {\n          type: GraphQLString\n        }\n      };\n    }\n  }\n);\n\nconst deckType = new GraphQLObjectType(\n  {\n    name: 'Deck',\n    fields() {\n\n      return {\n        splash: {\n          type: splashType\n        },\n        cards: {\n          type: new GraphQLList(\n            cardType\n          )\n        }\n      };\n    }\n  }\n);\n\nconst movieType = new GraphQLObjectType(\n  {\n    name: 'Movie',\n    fields() {\n\n      return {\n        id: {\n          type: GraphQLID,\n          resolve(\n            {\n              _id: movieId\n            }\n          ) {\n\n            return (\n              movieId\n            ) &&\n              movieId.toString();\n          }\n        },\n        title: {\n          type: GraphQLString\n        },\n        base64: {\n          type: GraphQLString\n        },\n        path: {\n          type: GraphQLString\n        }\n      };\n    }\n  }\n);\n\nconst outputType = new GraphQLUnionType(\n  {\n    name: 'Output',\n    types: [\n      deckType,\n      movieType\n    ],\n    resolveType(\n      {\n        splash\n      }\n    ) {\n\n      return (\n        splash\n      ) ?\n        deckType :\n        movieType;\n    }\n  }\n);\n\nconst viewerType = new GraphQLObjectType(\n  {\n    name: 'Viewer',\n    fields() {\n\n      return {\n        id: {\n          type: GraphQLID,\n          resolve(\n            {\n              _id: viewerId\n            }\n          ) {\n\n            return (\n              viewerId\n            );\n          }\n        },\n        text: {\n          type: GraphQLString\n        }\n      };\n    }\n  }\n);\n\nconst queryType = new GraphQLObjectType(\n  {\n    name: 'QUery',\n    fields() {\n\n      return {\n        viewer: {\n          type: viewerType,\n          resolve() {\n\n            return viewerGet();\n          }\n        }\n      };\n    }\n  }\n);\n\nconst movieSearchResultType = new GraphQLObjectType(\n  {\n    name: 'MovieSearchResult',\n    fields() {\n\n      return {\n        title: {\n          type: GraphQLString\n        },\n        snippet: {\n          type: GraphQLString\n        }\n      };\n    }\n  }\n);\n\nconst MovieSearchMutation = mutationWithClientMutationId(\n  {\n    name: 'MovieSearch',\n    inputFields: {\n      text: {\n        type: new GraphQLNonNull(\n          GraphQLString\n        )\n      }\n    },\n    outputFields: {\n      viewer: {\n        type: viewerType,\n        resolve() {\n\n          return viewerGet();\n        }\n      },\n      results: {\n        type: new GraphQLList(\n          movieSearchResultType\n        ),\n        resolve(\n          results\n        ) {\n\n          return (\n            results\n          );\n        }\n      }\n    },\n    mutateAndGetPayload(\n      {\n        text\n      }\n    ) {\n\n      return movieSearch(\n        text\n      );\n    }\n  }\n);\n\nconst MovieCreateMutation = mutationWithClientMutationId(\n  {\n    name: 'MovieCreate',\n    inputFields: {\n      text: {\n        type: new GraphQLNonNull(\n          GraphQLString\n        )\n      },\n      genre: {\n        type: GraphQLString\n      },\n      outputType: {\n        type: GraphQLString\n      },\n      createFlag: {\n        type: GraphQLBoolean\n      }\n    },\n    outputFields: {\n      viewer: {\n        type: viewerType,\n        resolve() {\n\n          return viewerGet();\n        }\n      },\n      movie: {\n        type: outputType,\n        resolve(\n          movie\n        ) {\n\n          return (\n            movie\n          );\n        }\n      },\n    },\n    mutateAndGetPayload(\n      {\n        text,\n        ...input\n      },\n      {\n        db,\n        req\n      }\n    ) {\n\n      return movieCreate(\n        text,\n        input,\n        undefined,\n        db,\n        req\n      );\n    }\n  }\n);\n\nconst mutationType = new GraphQLObjectType(\n  {\n    name: 'Mutation',\n    fields() {\n\n      return {\n        movieSearch: MovieSearchMutation,\n        movieCreate: MovieCreateMutation\n      };\n    }\n  }\n);\n\nexport default new GraphQLSchema(\n  {\n    query: queryType,\n    mutation: mutationType\n  }\n);\n"],"file":"index.js"}