{"version":3,"sources":["../../../../../js/server/schema/mutations/movieCreate/index.js"],"names":["titleGet","text","match","split","Promise","resolve","title","movieCreate","gif","db","req","movieId","ObjectID","path","toString","trim","_id","$set","undefined","process","genre","movieDataBasic","plot","cast","plotText","characters","segments","cards","poster","movie"],"mappings":"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","sourcesContent":["'use strict';\n\nimport {\n  ObjectID\n} from 'mongodb';\n\nimport movieDataBasicGet from '../fns/movieDataBasicGet';\nimport charactersGet from '../fns/charactersGet';\nimport segmentsGet from '../fns/segmentsGet';\nimport cardsGet from '../fns/cardsGet';\nimport gifGet from '../fns/gifGet';\nimport {\n  movieCreate as movieCreateFn\n} from '~/js/server/data/movie';\nimport movieWrite from '../fns/movieWrite';\nimport movieTitleRandomGet from \n  '../fns/movieTitleRandomGet';\nimport {\n  hostUrlGet\n} from '~/js/server/fns/variable';\n\nconst titleGet = async (\n  text\n) => {\n\n  const match = text.match(\n    /^random:(english|hindi|tamil)$/\n  );\n\n  const title = (\n    match\n  ) ?\n    await movieTitleRandomGet(\n      text.split(\n        /:/\n      )[\n        1\n      ]\n    ) :\n    Promise.resolve(\n      text\n    );\n\n  return (\n    title\n  );\n};\n\nconst movieCreate = async (\n  title,\n  gif,\n  db,\n  req\n) => {\n\n  const movieId = new ObjectID();\n\n  const path = `\n    ${\n      hostUrlGet(\n        req\n      )\n    }/output/${\n      movieId.toString()\n    }.gif\n  `\n    .trim();\n\n  return movieCreateFn(\n    {\n      _id: movieId\n    },\n    {\n      $set: {\n        title,\n        gif,\n        path\n      }\n    },\n    undefined,\n    db\n  );\n};\n\nconst process = async (\n  text,\n  genre,\n  db,\n  req\n) => {\n\n  let movieDataBasic = await movieDataBasicGet(\n    text\n  );\n\n  if (\n    !movieDataBasic.plot ||\n    !movieDataBasic.cast\n  ) {\n\n    return (\n      {}\n    );\n  }\n\n  let characters = await charactersGet(\n    movieDataBasic.cast,\n    movieDataBasic.plot,\n    movieDataBasic.plotText\n  );\n\n  const segments = segmentsGet(\n    movieDataBasic.plot,\n    characters\n  );\n\n  const cards = await cardsGet(\n    segments,\n    genre,\n    db\n  );\n\n  const gif = await gifGet(\n    movieDataBasic.title,\n    movieDataBasic.poster,\n    characters,\n    cards\n  );\n\n  const movie = await movieCreate(\n    movieDataBasic.title,\n    gif,\n    db,\n    req\n  );\n\n  await movieWrite(\n    movie\n  );\n\n  return (\n    movie\n  );\n};\n\nexport default async (\n  text,\n  genre,\n  db,\n  req\n) => {\n\n  let title = await titleGet(\n    text\n  );\n\n  return process(\n    title,\n    genre,\n    db,\n    req\n  );\n};\n"],"file":"index.js"}