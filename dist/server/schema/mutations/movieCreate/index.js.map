{"version":3,"sources":["../../../../../js/server/schema/mutations/movieCreate/index.js"],"names":["deckLocalPreRenderHandledGet","_deck","genre","db","deck","then","tmd5000moviesTitleByIndexGet","index","dataFilename","datasetsFolderPathString","jsonFilePath","path","join","process","cwd","Promise","resolve","reject","fs","readFile","error","res","JSON","parse","data","title","titleMatchGet","_title","match","deckLocalPreviewGet","text","undefined","deckLocalRandomGet","count","skip","Math","floor","random","limit","splash","spoofable","movieCreate","movie","req","movieId","ObjectID","toString","trim","_id","$set","deckGet","plotLimit","parseInt","split","outputGet","outputType","base64","outputCreatedGet","output","createFlag","input"],"mappings":"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","sourcesContent":["'use strict';\n\nimport path from 'path';\nimport fs from 'fs';\nimport {\n  ObjectID\n} from 'mongodb';\n\nimport deckGetFn from '../fns/deckGet';\nimport gifRenderedGet from '../fns/gifRenderedGet';\nimport {\n  hostUrlGet\n} from '~/js/server/fns/variable';\nimport {\n  deckFind,\n  deckFindOne,\n  deckCountDocuments,\n  deckCreate as deckCreateFn\n} from '~/js/server/data/deck';\nimport deckSpoofedGet from '../fns/deckSpoofedGet';\nimport deckActorImageIdsAssignedGet \n  from '../fns/deckActorImageIdsAssignedGet';\nimport deckRenderDetailsAssignedGet \n  from '../fns/deckRenderDetailsAssignedGet';\nimport deckGifyUrlsAssignedGet \n  from '../fns/deckGifyUrlsAssignedGet';\nimport movieSearch from \n  '../movieSearch';\nimport {\n  movieCreate as movieCreateFn\n} from '~/js/server/data/movie';\nimport movieWrite from '../fns/movieWrite';\n\nconst deckLocalPreRenderHandledGet = (\n  _deck,\n  genre,\n  db\n) => {\n\n  const deck = deckSpoofedGet(\n    _deck,\n    genre\n  );\n\n  return deckActorImageIdsAssignedGet(\n    deck,\n    genre,\n    db\n  )\n    .then(\n      (\n        deck\n      ) => {\n\n        return deckRenderDetailsAssignedGet(\n          deck\n        );\n      }\n    )\n    .then(\n      (\n        deck\n      ) => {\n\n        return deckGifyUrlsAssignedGet(\n          deck\n        );\n      }\n    );\n};\n\nconst tmd5000moviesTitleByIndexGet = async (\n  index\n) => {\n\n  const dataFilename = 'tmdb_5000_movies.json';\n\n  const datasetsFolderPathString = 'temp/datasets';\n\n  const jsonFilePath = path.join(\n    process.cwd(),\n    datasetsFolderPathString,\n    'json',\n    dataFilename\n  );\n\n  let data = await(\n    new Promise(\n      (\n        resolve,\n        reject\n      ) => {\n\n        return fs.readFile(\n          jsonFilePath,\n          'utf8',\n          (\n            error,\n            res\n          ) => {\n\n            if (\n              error\n            ) {\n\n              return reject(\n                error\n              );\n            }\n\n            return resolve(\n              JSON.parse(\n                res\n              )\n            );\n          }\n        );\n      }\n    )\n  );\n\n  const title = data[\n    index\n  ]?.title;\n\n  return (\n    title\n  );\n};\n\nconst titleMatchGet = (\n  _title\n) => {\n\n  return movieSearch(\n    _title,\n    1,\n    false\n  )\n    .then(\n      (\n        res\n      ) => {\n\n        const title = res[\n          0\n        ]?.title;\n\n        const match = title?.match(\n          _title\n        );\n\n        return (\n          match\n        ) ?\n          title :\n          null;\n      }\n    );\n};\n\nconst deckLocalPreviewGet = async (\n  index,\n  genre,\n  db\n) => {\n\n  let text = await tmd5000moviesTitleByIndexGet(\n    index\n  );\n\n  text = await titleMatchGet(\n    text\n  );\n\n  let deck = await deckFindOne(\n    {\n      'splash.title': text\n    },\n    undefined,\n    db\n  );\n\n  deck = await deckLocalPreRenderHandledGet(\n    deck,\n    genre,\n    db\n  );\n\n  return (\n    deck\n  );\n};\n\nconst deckLocalRandomGet = async (\n  genre,\n  db\n) => {\n\n  const count = await deckCountDocuments(\n    {},\n    undefined,\n    db\n  );\n\n  const skip = Math.floor(\n    Math.random() *\n    count\n  );\n\n  let deck = (\n    await deckFind(\n      {},\n      {\n        skip,\n        limit: 1\n      },\n      db\n    )\n  )[\n    0\n  ];\n\n  if (\n    !deck.splash.spoofable\n  ) {\n\n    return deckLocalRandomGet(\n      genre,\n      db\n    );\n  }\n\n  deck = await deckLocalPreRenderHandledGet(\n    deck,\n    genre,\n    db\n  );\n\n  return (\n    deck\n  );\n};\n\nconst movieCreate = async (\n  movie,\n  db,\n  req\n) => {\n\n  const movieId = new ObjectID();\n\n  const path = `\n    ${\n      hostUrlGet(\n        req\n      )\n    }/output/${\n      movieId.toString()\n    }.gif\n  `\n    .trim();\n\n  return movieCreateFn(\n    {\n      _id: movieId\n    },\n    {\n      $set: {\n        ...movie,\n        path\n      }\n    },\n    undefined,\n    db\n  );\n};\n\nconst deckGet = async (\n  text,\n  genre,\n  plotLimit,\n  db\n) => {\n\n  let deck;\n\n  switch (\n    true\n  ) {\n\n    case (\n      !!text.match(\n        /^preview:\\d+$/\n      )\n    ) :\n\n      return deckLocalPreviewGet(\n        parseInt(\n          text.split(\n            ':'\n          )[\n            1\n          ]\n        ),\n        genre,\n        db\n      );\n\n    case (\n      !!text.match(\n        /^random:local$/\n      )\n    ) :\n\n      return deckLocalRandomGet(\n        genre,\n        db\n      );\n\n    case (\n      (\n        deck = await deckFindOne(\n          {\n            'splash.title': text\n          },\n          undefined,\n          db\n        )\n      ) &&\n      !!deck\n    ) :\n\n      return deckLocalPreRenderHandledGet(\n        deck,\n        genre,\n        db\n      );\n\n    default :\n\n      return deckGetFn(\n        text,\n        genre,\n        plotLimit,\n        db\n      );\n  }\n};\n\nconst outputGet = async (\n  text,\n  genre,\n  plotLimit,\n  outputType,\n  db\n) => {\n\n  const deck = await deckGet(\n    text,\n    genre,\n    plotLimit,\n    db\n  );\n\n  switch (\n    true\n  ) {\n\n    case (\n      outputType === \n      'deck'\n    ) :\n\n      return Promise.resolve(\n        deck\n      );\n\n    default :\n\n      return gifRenderedGet(\n        deck,\n        db\n      )\n        .then(\n          (\n            base64\n          ) => {\n\n            return {\n              title: deck.splash.title,\n              base64\n            };\n          }\n        );\n  }\n};\n\nconst outputCreatedGet = (\n  output,\n  createFlag,\n  db,\n  req\n) => {\n\n  switch (\n    true\n  ) {\n\n    case (\n      !createFlag\n    ) :\n\n      return Promise.resolve(\n        output\n      );\n\n    case (\n      !!output.base64\n    ) :\n\n      return movieCreate(\n        output,\n        db,\n        req\n      )\n        .then(\n          (\n            movie\n          ) => {\n\n            return movieWrite(\n              movie\n            );\n          }\n        );\n\n    default :\n\n      return deckCreateFn(\n        {\n          _id: new ObjectID()\n        },\n        {\n          $set: output\n        },\n        undefined,\n        db\n      );\n  }\n};\n\nexport default async (\n  text,\n  input,\n  plotLimit = 5,\n  db,\n  req\n) => {\n\n  const {\n    genre = 'general',\n    outputType = 'movie',\n    createFlag = true\n  } = input;\n\n  let output = await outputGet(\n    text,\n    genre,\n    plotLimit,\n    outputType,\n    db\n  );\n\n  output = await outputCreatedGet(\n    output,\n    createFlag,\n    db,\n    req\n  );\n\n  return (\n    output\n  );\n};\n"],"file":"index.js"}