{"version":3,"sources":["../../../../../js/server/schema/mutations/movieCreate/index.js"],"names":["titleGet","text","match","split","Promise","resolve","title","charactersPostSegmentsGet","characters","reduce","memo","character","levenMatchText","movieCreate","base64","db","req","movieId","ObjectID","path","toString","trim","_id","$set","undefined","successHandle","movie","processFn","genre","movieDataBasic","plot","cast","plotText","segments","cards","poster","process"],"mappings":"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","sourcesContent":["'use strict';\n\nimport {\n  ObjectID\n} from 'mongodb';\n\nimport movieDataBasicGet from '../fns/movieDataBasicGet';\nimport charactersGet from '../fns/charactersGet';\nimport segmentsGet from '../fns/segmentsGet';\nimport cardsGet from '../fns/cardsGet';\nimport gifGet from '../fns/gifGet';\nimport {\n  movieCreate as movieCreateFn\n} from '~/js/server/data/movie';\nimport movieWrite from '../fns/movieWrite';\nimport movieTitleRandomGet from \n  '../fns/movieTitleRandomGet';\nimport {\n  hostUrlGet\n} from '~/js/server/fns/variable';\n\nconst titleGet = async (\n  text\n) => {\n\n  const match = text.match(\n    /^random:(english|hindi|tamil)$/\n  );\n\n  const title = (\n    match\n  ) ?\n    await movieTitleRandomGet(\n      text.split(\n        /:/\n      )[\n        1\n      ]\n    ) :\n    Promise.resolve(\n      text\n    );\n\n  return (\n    title\n  );\n};\n\nconst charactersPostSegmentsGet = (\n  characters\n) => {\n\n  return characters.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      const text = character.levenMatchText ||\n        character.text;\n\n      return [\n        ...memo,\n        {\n          ...character,\n          text\n        }\n      ];\n    },\n    []\n  );\n};\n\nconst movieCreate = async (\n  title,\n  base64,\n  db,\n  req\n) => {\n\n  const movieId = new ObjectID();\n\n  const path = `\n    ${\n      hostUrlGet(\n        req\n      )\n    }/output/${\n      movieId.toString()\n    }.gif\n  `\n    .trim();\n\n  return movieCreateFn(\n    {\n      _id: movieId\n    },\n    {\n      $set: {\n        title,\n        base64,\n        path\n      }\n    },\n    undefined,\n    db\n  );\n};\n\nconst successHandle = async (\n  title,\n  base64,\n  db,\n  req\n) => {\n\n  const movie = await movieCreate(\n    title,\n    base64,\n    db,\n    req\n  );\n\n  await movieWrite(\n    movie\n  );\n\n  return (\n    movie\n  );\n};\n\nconst processFn = async (\n  text,\n  genre,\n  db,\n  req\n) => {\n\n  let movieDataBasic = await movieDataBasicGet(\n    text\n  );\n\n  if (\n    !movieDataBasic?.plot ||\n    !movieDataBasic?.cast\n  ) {\n\n    return (\n      {}\n    );\n  }\n\n  let characters = await charactersGet(\n    movieDataBasic.cast,\n    movieDataBasic.plot,\n    movieDataBasic.plotText\n  );\n\n  const segments = segmentsGet(\n    movieDataBasic.plot,\n    characters\n  );\n\n  characters = charactersPostSegmentsGet(\n    characters\n  );\n\n  const cards = await cardsGet(\n    segments,\n    genre,\n    db\n  );\n\n  const base64 = await gifGet(\n    movieDataBasic.title,\n    movieDataBasic.poster,\n    cards\n  );\n\n  if (\n    movieDataBasic.title &&\n    base64\n  ) {\n\n    return successHandle(\n      movieDataBasic.title,\n      base64,\n      db,\n      req\n    );\n  }\n\n  return {\n    title: movieDataBasic.base64\n  };\n};\n\nconst process = async (\n  text,\n  genre,\n  db,\n  req\n) => {\n\n  let title = await titleGet(\n    text\n  );\n\n  const movie = await processFn(\n    title,\n    genre,\n    db,\n    req\n  );\n\n  if (\n    text.match(/^random:/) &&\n    !movie.base64\n  ) {\n\n    return process(\n      text,\n      genre,\n      db,\n      req\n    );\n  }\n\n  return (\n    movie\n  );\n};\n\nexport default process;\n"],"file":"index.js"}