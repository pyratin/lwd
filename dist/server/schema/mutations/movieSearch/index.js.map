{"version":3,"sources":["../../../../../js/server/schema/mutations/movieSearch/index.js"],"names":["movieSearchQueryGetFn","text","trim","replace","movieSearchQueryGet","movieSearchResultsGet","query","json","results","search","map","title","snippet","movieSearchResultCheck","result","cast","plot","movieSearchResultsFilteredGet","reduce","memo","_result","then","res","Promise","resolve"],"mappings":"AAAA;;;;;;;;;;;;;;;AAEA;;AACA;;AAEA,IAAMA,qBAAqB,GAAG,SAAxBA,qBAAwB,CAC5BC,IAD4B,EAEzB;AAEH,SAAOA,IAAI,CACRC,IADI,GAEJC,OAFI,CAGH,MAHG,EAIH,MAJG,CAAP;AAMD,CAVD;;AAYA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAC1BH,IAD0B,EAEvB;AAEH,SAAO,6FAEHD,qBAAqB,CACnBC,IADmB,CAFlB,4GAOJC,IAPI,EAAP;AAQD,CAZD;;AAcA,IAAMG,qBAAqB;AAAA,2FAAG,iBAC5BJ,IAD4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAItBK,YAAAA,KAJsB,GAIdF,mBAAmB,CAC/BH,IAD+B,CAJL;AAAA;AAAA,mBAQT,gCACjBK,KADiB,CARS;;AAAA;AAQtBC,YAAAA,IARsB;AAYxBC,YAAAA,OAZwB,GAYdD,IAAI,CAACD,KAAL,CAAWG,MAAX,CACXC,GADW,CAEV,iBAKK;AAAA,kBAHDC,KAGC,SAHDA,KAGC;AAAA,kBAFDC,OAEC,SAFDA,OAEC;AAEH,qBAAO;AACLD,gBAAAA,KAAK,EAALA,KADK;AAELC,gBAAAA,OAAO,EAAPA;AAFK,eAAP;AAID,aAbS,CAZc;AAAA,6CA6B1BJ,OA7B0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAArBH,qBAAqB;AAAA;AAAA;AAAA,GAA3B;;AAiCA,IAAMQ,sBAAsB;AAAA,4FAAG,kBAC7BC,MAD6B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAOnB,mCACRA,MAAM,CAACH,KADC,CAPmB;;AAAA;AAAA;AAK3BI,YAAAA,IAL2B,yBAK3BA,IAL2B;AAM3BC,YAAAA,IAN2B,yBAM3BA,IAN2B;AAAA,8CAY3B,CAAC,CAACD,IAAF,IACA,CAAC,CAACC,IAbyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAtBH,sBAAsB;AAAA;AAAA;AAAA,GAA5B;;AAiBA,IAAMI,6BAA6B,GAAG,SAAhCA,6BAAgC,CACpCT,OADoC,EAEjC;AAEH,SAAOA,OAAO,CAACU,MAAR,CACL,UACEC,IADF,EAEEC,OAFF,EAGK;AAEH,WAAOD,IAAI,CAACE,IAAL,CACL,UACEC,GADF,EAEK;AAEH,aAAOT,sBAAsB,CAC3BO,OAD2B,CAAtB,CAGJC,IAHI,CAIH,UACEP,MADF,EAEK;AAEH,YACEA,MADF,EAEE;AAEA,+DACKQ,GADL,IAEEF,OAFF;AAID;;AAED,eACEE,GADF;AAGD,OArBE,CAAP;AAuBD,KA5BI,CAAP;AA8BD,GApCI,EAqCLC,OAAO,CAACC,OAAR,CACE,EADF,CArCK,CAAP;AAyCD,CA7CD;;;4FA+Ce,kBACbvB,IADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIOI,qBAAqB,CACvCJ,IADuC,CAJ5B;;AAAA;AAITO,YAAAA,OAJS;AAAA;AAAA,mBAQGS,6BAA6B,CAC3CT,OAD2C,CARhC;;AAAA;AAQbA,YAAAA,OARa;AAAA,8CAaXA,OAbW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["'use strict';\n\nimport mediawikiFetch from '../fns/mediawikiFetch';\nimport movieDataBasicGet from '../fns/movieDataBasicGet';\n\nconst movieSearchQueryGetFn = (\n  text\n) => {\n\n  return text\n    .trim()\n    .replace(\n      /\\s+/g,\n      '~%20'\n    );\n};\n\nconst movieSearchQueryGet = (\n  text\n) => {\n\n  return `\n    https://en.wikipedia.org/w/api.php?action=query&list=search&srsearch=intitle:${\n      movieSearchQueryGetFn(\n        text\n      )\n    }+incategory:tamil-language_films|hindi-language_films|English-language_films&srlimit=5&format=json\n  `\n    .trim();\n};\n\nconst movieSearchResultsGet = async (\n  text\n) => {\n\n  const query = movieSearchQueryGet(\n    text\n  );\n\n  const json = await mediawikiFetch(\n    query\n  );\n\n  let results = json.query.search\n    .map(\n      (\n        {\n          title,\n          snippet\n        }\n      ) => {\n\n        return {\n          title,\n          snippet\n        };\n      }\n    );\n\n  return (\n    results\n  );\n};\n\nconst movieSearchResultCheck = async (\n  result\n) => {\n\n  const {\n    cast,\n    plot\n  } = await movieDataBasicGet(\n    result.title\n  );\n\n  return (\n    !!cast &&\n    !!plot\n  );\n};\n\nconst movieSearchResultsFilteredGet = (\n  results\n) => {\n\n  return results.reduce(\n    (\n      memo,\n      _result\n    ) => {\n\n      return memo.then(\n        (\n          res\n        ) => {\n\n          return movieSearchResultCheck(\n            _result\n          )\n            .then(\n              (\n                result\n              ) => {\n\n                if (\n                  result\n                ) {\n\n                  return [\n                    ...res,\n                    _result\n                  ];\n                }\n\n                return (\n                  res\n                );\n              }\n            );\n        }\n      );\n    },\n    Promise.resolve(\n      []\n    )\n  );\n};\n\nexport default async (\n  text\n) => {\n\n  let results = await movieSearchResultsGet(\n    text\n  );\n\n  results = await movieSearchResultsFilteredGet(\n    results\n  );\n\n  return (\n    results\n  );\n};\n"],"file":"index.js"}