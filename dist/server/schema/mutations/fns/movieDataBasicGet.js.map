{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/movieDataBasicGet.js"],"names":["sentenceMaxLength","sentenceNormalizeRegExp","titleEncodedGet","title","encodeURIComponent","pageMobileSectionQueryGet","trim","moviePageSectionTextGet","json","anchorName","section","remaining","sections","find","anchor","text","moviePageSectionTextsGet","anchorNames","reduce","memo","sectionText","pageTitleFromUrlGet","url","split","slice","castGetFn","_castHtml","linebreakString","castHtml","replace","$","cheerio","load","castEl","remove","end","castText","textRegExp","RegExp","textMatch","match","actorUd","actorText","role","sbd","sentences","htmlRegExp","htmlMatch","actorLinkEl","length","attr","castGet","cast","toArray","html","actor","ud","plotTextActorTextsRemove","plotText","_cast","regExp","plotTextActorLinksRemove","udEscaped","sentenceNormalizedGetFn","joinString","_text","sentenceNormalizedGet","texts","sentenceNormalized","index","plotGetFn","paragraph","paragraphIndex","map","sentenceIndex","plotGet","plotEl","p","_sentences","sentence","query","date","Date","lead","lastmodified","poster","image","Object","values","urls","plot"],"mappings":"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","sourcesContent":["'use strict';\n\nimport cheerio from 'cheerio';\nimport sbd from 'sbd';\nimport escapeStringRegexp from 'escape-string-regexp';\n\nimport mediawikiFetch from './mediawikiFetch';\n\nconst sentenceMaxLength = 100;\n\nconst sentenceNormalizeRegExp = /\\W\\s/;\n\nconst titleEncodedGet = (\n  title\n) => {\n\n  return encodeURIComponent(\n    title\n  );\n};\n\nconst pageMobileSectionQueryGet = (\n  title\n) => {\n\n  return `\n    https://en.wikipedia.org/api/rest_v1/page/mobile-sections/${\n      titleEncodedGet(\n        title\n      )\n    }\n  `\n    .trim();\n};\n\nconst moviePageSectionTextGet = (\n  json,\n  anchorName\n) => {\n\n  const section = json.remaining.sections\n    .find(\n      (\n        {\n          anchor\n        }\n      ) => {\n\n        return (\n          anchor ===\n          anchorName\n        );\n      }\n    );\n\n  return (\n    section\n  ) &&\n    section.text;\n};\n\nconst moviePageSectionTextsGet = (\n  json,\n  anchorNames\n) => {\n\n  return anchorNames.reduce(\n    (\n      memo,\n      anchorName\n    ) => {\n\n      const sectionText = moviePageSectionTextGet(\n        json,\n        anchorName\n      );\n\n      return [\n        ...memo,\n        sectionText\n      ];\n    },\n    []\n  );\n};\n\nconst pageTitleFromUrlGet = (\n  url\n) => {\n\n  return url.split(\n    /\\//\n  )\n    .slice(\n      -1\n    )[\n      0\n    ];\n};\n\nconst castGetFn = (\n  _castHtml\n) => {\n\n  const linebreakString = '__linebreak__';\n\n  const castHtml = _castHtml.replace(\n    /<br>/g,\n    linebreakString \n  );\n\n  const $ = cheerio.load(\n    castHtml\n  );\n\n  const castEl = $(\n    'span, sup'\n  )\n    .remove()\n    .end();\n\n  const castText = castEl.text();\n\n  const textRegExp = new RegExp(\n    `\n      ^(.*?)\\\\s+(as\\\\s+.*)$\n    `\n      .trim()\n  );\n\n  const textMatch = castText.match(\n    textRegExp\n  );\n\n  let actorUd;\n\n  let actorText;\n\n  let role;\n\n  if (\n    textMatch\n  ) {\n\n    [\n      ,\n      actorText,\n      role\n    ] = textMatch;\n\n    role = sbd.sentences(\n      role\n    )[\n      0\n    ];\n\n    role = role.replace(\n      new RegExp(\n        `\n          ${\n            linebreakString\n          }.*\n        `\n          .trim(),\n      ),\n      ''\n    );\n  }\n\n  const htmlRegExp = /^<a/;\n\n  const htmlMatch = castHtml.match(\n    htmlRegExp\n  );\n\n  if (\n    actorText &&\n    role &&\n    htmlMatch\n  ) {\n\n    const actorLinkEl = $(\n      castEl\n    )\n      .find(\n        'a:first-child'\n      );\n\n    actorUd = (\n      actorLinkEl.length\n    ) ?\n      pageTitleFromUrlGet(\n        actorLinkEl.attr(\n          'href'\n        )\n      ) :\n      null;\n  }\n\n  return [\n    actorUd,\n    actorText,\n    role\n  ];\n};\n\nconst castGet = (\n  castText\n) => {\n\n  if (\n    !castText\n  ) {\n\n    return (\n      null\n    );\n  }\n\n  const $ = cheerio.load(\n    castText\n  );\n\n  const cast = $(\n    'li'\n  )\n    .toArray()\n    .reduce(\n      (\n        memo,\n        castEl\n      ) => {\n\n        const [\n          actorUd,\n          actorText,\n          role\n        ] = castGetFn(\n          $(castEl)\n            .html()\n        );\n\n        if (\n          actorText &&\n          role\n        ) {\n\n          return [\n            ...memo ||\n            [],\n            {\n              actor: {\n                ud: actorUd,\n                text: actorText\n              },\n              role\n            }\n          ];\n        }\n\n        return (\n          memo\n        );\n      },\n      null\n    );\n\n  return (\n    cast\n  );\n};\n\nconst plotTextActorTextsRemove = (\n  plotText,\n  cast\n) => {\n\n  if (\t\n    !plotText\t||\n    !cast\n  ) {\t\n\n    return (\t\n      plotText\t\n    );\t\n  }\t\n\n  return cast.reduce(\n    (\n      memo,\n      _cast\n    ) => {\n\n      const regExp = new RegExp(\n        `\n          \\\\s(\\\\(${\n            _cast.actor.text\n          }\\\\))\n        `\n          .trim(),\n        'g'\n      );\n\n      return memo.replace(\n        regExp,\n        ''\n      );\n    },\n    plotText\n  );\n};\n\nconst plotTextActorLinksRemove = (\t\n  plotText,\t\n  cast\n) => {\t\n\n  if (\t\n    !plotText\t||\n    !cast\n  ) {\t\n\n    return (\t\n      plotText\t\n    );\t\n  }\t\n\n  return cast.reduce(\t\n    (\t\n      memo,\t\n      _cast\n    ) => {\t\n\n      if (\t\n        _cast.actor.ud\n      ) {\t\n\n        const udEscaped = escapeStringRegexp(\t\n          _cast.actor.ud\n        );\t\n\n        const regExp = new RegExp(\t\n          `\t\n            \\\\s\\\\(<a href=\"/wiki/${\t\n              udEscaped\t\n            }\".*?</a>\\\\)\t\n          `\t\n            .trim(),\t\n          'g'\t\n        );\t\n\n        return memo.replace(\t\n          regExp,\t\n          ''\t\n        );\t\n      }\t\n\n      return (\t\n        memo\t\n      );\t\n    },\t\n    plotText\t\n  );\t\n};\n\nconst sentenceNormalizedGetFn = (\n  text\n) => {\n\n  const joinString = ', ';\n\n  return text\n    .split(\n      sentenceNormalizeRegExp\n    )\n    .reduce(\n      (\n        memo,\n        _text\n      ) => {\n\n        switch (\n          true\n        ) {\n\n          case (\n            !memo.length\n          ) :\n\n            return [\n              _text\n            ];\n\n          case (\n            (\n              memo.length < \n              2\n            ) &&\n            (\n              memo[\n                0\n              ]\n                .length +\n              _text.length +\n              +joinString.length\n            ) < \n            sentenceMaxLength\n          ) :\n\n            return [\n              `\n                ${\n                  memo[\n                    0\n                  ]\n                    .trim()\n                }${\n                  joinString\n                }${\n                  _text.trim()\n                }\n              `\n                .trim()\n            ];\n\n          case (\n            memo.length < 2\n          ) :\n\n            return [\n              memo[\n                0\n              ],\n              _text.trim()\n            ];\n\n          default:\n\n            return [\n              memo[\n                0\n              ],\n              `\n                ${\n                  memo[\n                    1\n                  ]\n                    .trim()\n                }${\n                  joinString\n                }${\n                  _text.trim()\n                }\n              `\n                .trim()\n            ];\n        }\n      },\n      []\n    );\n};\n\nconst sentenceNormalizedGet = (\n  text\n) => {\n\n  let texts = [\n    text\n  ];\n\n  while (\n    (\n      (\n        texts[\n          texts.length - 1\n        ]\n          .length\n      ) >\n      sentenceMaxLength\n    ) &&\n    (\n      !!texts[\n        texts.length -1\n      ]\n        .match(\n          sentenceNormalizeRegExp \n        )\n    )\n  ) {\n\n    const sentenceNormalized = sentenceNormalizedGetFn(\n      texts[\n        texts.length - 1\n      ]\n    );\n\n    texts = [\n      ...texts.slice(\n        0, -1\n      ),\n      ...sentenceNormalized\n    ];\n  }\n\n  texts = texts.reduce(\n    (\n      memo,\n      text,\n      index\n    ) => {\n\n      if (\n        index <\n        (\n          texts.length - 1\n        )\n      ) {\n\n        return [\n          ...memo,\n          `\n            ${\n            text\n            } ...,\n          `\n            .trim()\n        ];\n      }\n\n      return [\n        ...memo,\n        text\n      ];\n    },\n    []\n  );\n\n  return (\n    texts\n  );\n};\n\nconst plotGetFn = (\n  paragraph,\n  paragraphIndex\n) => {\n\n  return sbd.sentences(\n    paragraph\n  )\n    .reduce(\n      (\n        memo,\n        text\n      ) => {\n\n        return [\n          ...memo,\n          text\n        ];\n      },\n      []\n    )\n    .reduce(\n      (\n        memo,\n        text\n      ) => {\n\n        return [\n          ...memo,\n          ...sentenceNormalizedGet(\n            text\n          )\n        ];\n      },\n      []\n    )\n    .map(\n      (\n        text,\n        sentenceIndex\n      ) => {\n\n        return {\n          text,\n          paragraphIndex,\n          sentenceIndex\n        };\n      }\n    );\n};\n\nconst plotGet = (\n  plotText\n) => {\n\n  if (\n    !plotText\n  ) {\n\n    return (\n      null\n    );\n  }\n\n  const $ = cheerio.load(\n    plotText\n  );\n\n  const plotEl = $(\n    'span, sup'\n  )\n    .remove()\n    .end();\n\n  let sentences = plotEl\n    .find(\n      'p'\n    )\n    .toArray()\n    .reduce(\n      (\n        memo,\n        p,\n        paragraphIndex\n      ) => {\n\n\n        let paragraph = $(\n          p\n        )\n          .text();\n\n        const _sentences = plotGetFn(\n          paragraph,\n          paragraphIndex\n        );\n\n        return [\n          ...memo ||\n          [],\n          ..._sentences\n        ];\n      },\n      null\n    );\n\n  sentences = (\n    sentences\n  ) &&\n    sentences.reduce(\n      (\n        memo,\n        sentence\n      ) => {\n\n        if (\n          (\n            memo.length >= \n            5\n          ) &&\n          !memo[\n            memo.length - 1\n          ]\n            .text\n            .match(/\\s...,$/)\n        ) {\n\n          return (\n            memo\n          );\n        }\n\n        return [\n          ...memo,\n          sentence\n        ];\n      },\n      []\n    );\n\n  return (\n    sentences\n  );\n};\n\nexport default async (\n  title\n) => {\n\n  const query = pageMobileSectionQueryGet(\n    title\n  );\n\n  const json = await mediawikiFetch(\n    query\n  );\n\n  const date = new Date(\n    json.lead?.lastmodified\n  );\n\n  const poster = (\n    json.lead?.image\n  ) ?\n    Object.values(\n      json.lead.image.urls\n    )[\n      0\n    ]:\n    null;\n\n  const anchorNames = [\n    'Cast',\n    'Plot'\n  ];\n\n  let [\n    castText,\n    plotText\n  ] = moviePageSectionTextsGet(\n    json,\n    anchorNames\n  );\n\n  const cast = castGet(\n    castText\n  );\n\n  plotText = plotTextActorTextsRemove(\n    plotText,\n    cast\n  );\n\n  plotText = plotTextActorLinksRemove(\n    plotText,\n    cast\n  );\n\n  const plot = plotGet(\n    plotText\n  );\n\n  return {\n    title,\n    date,\n    poster,\n    cast,\n    plot,\n    castText,\n    plotText\n  };\n};\n"],"file":"movieDataBasicGet.js"}