{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/movieDataBasicGet.js"],"names":["titleEncodedGet","title","encodeURIComponent","pageMobileSectionQueryGet","trim","moviePageSectionTextGet","json","anchorName","section","remaining","sections","find","anchor","text","moviePageSectionTextsGet","anchorNames","reduce","memo","sectionText","pageTitleFromUrlGet","url","split","slice","castGetFn","_castHtml","linebreakString","castHtml","replace","$","cheerio","load","castEl","remove","end","castText","textRegExp","RegExp","textMatch","match","actorUd","actorText","role","sbd","sentences","htmlRegExp","htmlMatch","actorLinkEl","length","attr","castGet","cast","toArray","html","actor","ud","plotTextActorTextsRemove","plotText","_cast","regExp","plotTextActorLinksRemove","udEscaped","plotGet","plotEl","paragraphs","p","paragraph","query","poster","lead","image","Object","values","urls","plot"],"mappings":"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","sourcesContent":["'use strict';\n\nimport cheerio from 'cheerio';\nimport sbd from 'sbd';\nimport escapeStringRegexp from 'escape-string-regexp';\n\nimport mediawikiFetch from './mediawikiFetch';\nimport sentencesGet from './sentencesGet';\n\nconst titleEncodedGet = (\n  title\n) => {\n\n  return encodeURIComponent(\n    title\n  );\n};\n\nconst pageMobileSectionQueryGet = (\n  title\n) => {\n\n  return `\n    https://en.wikipedia.org/api/rest_v1/page/mobile-sections/${\n      titleEncodedGet(\n        title\n      )\n    }\n  `\n    .trim();\n};\n\nconst moviePageSectionTextGet = (\n  json,\n  anchorName\n) => {\n\n  const section = json.remaining.sections\n    .find(\n      (\n        {\n          anchor\n        }\n      ) => {\n\n        return (\n          anchor ===\n          anchorName\n        );\n      }\n    );\n\n  return (\n    section\n  ) &&\n    section.text;\n};\n\nconst moviePageSectionTextsGet = (\n  json,\n  anchorNames\n) => {\n\n  return anchorNames.reduce(\n    (\n      memo,\n      anchorName\n    ) => {\n\n      const sectionText = moviePageSectionTextGet(\n        json,\n        anchorName\n      );\n\n      return [\n        ...memo,\n        sectionText\n      ];\n    },\n    []\n  );\n};\n\nconst pageTitleFromUrlGet = (\n  url\n) => {\n\n  return url.split(\n    /\\//\n  )\n    .slice(\n      -1\n    )[\n      0\n    ];\n};\n\nconst castGetFn = (\n  _castHtml\n) => {\n\n  const linebreakString = '__linebreak__';\n\n  const castHtml = _castHtml.replace(\n    /<br>/g,\n    linebreakString \n  );\n\n  const $ = cheerio.load(\n    castHtml\n  );\n\n  const castEl = $(\n    'span, sup'\n  )\n    .remove()\n    .end();\n\n  const castText = castEl.text();\n\n  const textRegExp = new RegExp(\n    `\n      ^(.*?)\\\\s+((?:as|â€”)\\\\s+.*)$\n    `\n      .trim()\n  );\n\n  const textMatch = castText.match(\n    textRegExp\n  );\n\n  let actorUd;\n\n  let actorText;\n\n  let role;\n\n  if (\n    textMatch\n  ) {\n\n    [\n      ,\n      actorText,\n      role\n    ] = textMatch;\n\n    role = sbd.sentences(\n      role\n    )[\n      0\n    ];\n\n    role = role.split(\n      ','\n    )[\n      0\n    ];\n\n    role = role.replace(\n      new RegExp(\n        `\n          ${\n            linebreakString\n          }.*\n        `\n          .trim(),\n      ),\n      ''\n    );\n  }\n\n  const htmlRegExp = /^<a/;\n\n  const htmlMatch = castHtml.match(\n    htmlRegExp\n  );\n\n  if (\n    actorText &&\n    role &&\n    htmlMatch\n  ) {\n\n    const actorLinkEl = $(\n      castEl\n    )\n      .find(\n        'a:first-child'\n      );\n\n    actorUd = (\n      actorLinkEl.length\n    ) ?\n      pageTitleFromUrlGet(\n        actorLinkEl.attr(\n          'href'\n        )\n      ) :\n      null;\n  }\n\n  return [\n    actorUd,\n    actorText,\n    role\n  ];\n};\n\nconst castGet = (\n  castText\n) => {\n\n  if (\n    !castText\n  ) {\n\n    return (\n      null\n    );\n  }\n\n  const $ = cheerio.load(\n    castText\n  );\n\n  const cast = $(\n    'li'\n  )\n    .toArray()\n    .reduce(\n      (\n        memo,\n        castEl\n      ) => {\n\n        const [\n          actorUd,\n          actorText,\n          role\n        ] = castGetFn(\n          $(castEl)\n            .html()\n        );\n\n        if (\n          actorText &&\n          role\n        ) {\n\n          return [\n            ...memo ||\n            [],\n            {\n              actor: {\n                ud: actorUd,\n                text: actorText\n              },\n              role\n            }\n          ];\n        }\n\n        return (\n          memo\n        );\n      },\n      null\n    );\n\n  return (\n    cast\n  );\n};\n\nconst plotTextActorTextsRemove = (\n  plotText,\n  cast\n) => {\n\n  if (\t\n    !plotText\t||\n    !cast\n  ) {\t\n\n    return (\t\n      plotText\t\n    );\t\n  }\t\n\n  return cast.reduce(\n    (\n      memo,\n      _cast\n    ) => {\n\n      const regExp = new RegExp(\n        `\n          \\\\s(\\\\(${\n            _cast.actor.text\n          }\\\\))\n        `\n          .trim(),\n        'g'\n      );\n\n      return memo.replace(\n        regExp,\n        ''\n      );\n    },\n    plotText\n  );\n};\n\nconst plotTextActorLinksRemove = (\t\n  plotText,\t\n  cast\n) => {\t\n\n  if (\t\n    !plotText\t||\n    !cast\n  ) {\t\n\n    return (\t\n      plotText\t\n    );\t\n  }\t\n\n  return cast.reduce(\t\n    (\t\n      memo,\t\n      _cast\n    ) => {\t\n\n      if (\t\n        _cast.actor.ud\n      ) {\t\n\n        const udEscaped = escapeStringRegexp(\t\n          _cast.actor.ud\n        );\t\n\n        const regExp = new RegExp(\t\n          `\t\n            \\\\s\\\\(<a href=\"/wiki/${\t\n              udEscaped\t\n            }\".*?</a>\\\\)\t\n          `\t\n            .trim(),\t\n          'g'\t\n        );\t\n\n        return memo.replace(\t\n          regExp,\t\n          ''\t\n        );\t\n      }\t\n\n      return (\t\n        memo\t\n      );\t\n    },\t\n    plotText\t\n  );\t\n};\n\nconst plotGet = (\n  plotText\n) => {\n\n  if (\n    !plotText\n  ) {\n\n    return (\n      null\n    );\n  }\n\n  const $ = cheerio.load(\n    plotText\n  );\n\n  const plotEl = $(\n    'span, sup'\n  )\n    .remove()\n    .end();\n\n  let paragraphs = plotEl\n    .find(\n      'p'\n    )\n    .toArray();\n\n  if (\n    !paragraphs.length\n  ) {\n\n    return (\n      null\n    );\n  }\n\n  paragraphs = paragraphs.reduce(\n    (\n      memo,\n      p\n    ) => {\n\n      let paragraph = $(\n        p\n      )\n        .text();\n\n      return [\n        ...memo ||\n        [],\n        paragraph\n      ];\n    },\n    null\n  );\n\n  const sentences = sentencesGet(\n    paragraphs\n  );\n\n  return (\n    sentences\n  );\n};\n\nexport default async (\n  title\n) => {\n\n  const query = pageMobileSectionQueryGet(\n    title\n  );\n\n  const json = await mediawikiFetch(\n    query\n  );\n\n  const poster = (\n    json.lead?.image\n  ) ?\n    Object.values(\n      json.lead.image.urls\n    )[\n      0\n    ]:\n    null;\n\n  const anchorNames = [\n    'Cast',\n    'Plot'\n  ];\n\n  let [\n    castText,\n    plotText\n  ] = moviePageSectionTextsGet(\n    json,\n    anchorNames\n  );\n\n  const cast = castGet(\n    castText\n  );\n\n  plotText = plotTextActorTextsRemove(\n    plotText,\n    cast\n  );\n\n  plotText = plotTextActorLinksRemove(\n    plotText,\n    cast\n  );\n\n  const plot = plotGet(\n    plotText\n  );\n\n  return {\n    title,\n    poster,\n    cast,\n    plot,\n    castText,\n    plotText\n  };\n};\n"],"file":"movieDataBasicGet.js"}