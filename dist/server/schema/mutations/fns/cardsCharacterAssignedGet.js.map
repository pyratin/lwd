{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/cardsCharacterAssignedGet.js"],"names":["charactersAssignedGetFn","fragments","reduce","memo","type","text","actor","castIndex","find","_memo","ud","gender","charactersAssignedGet","segments","segment","characters","charactersPreviousGet","cards","character","charactersWeightedGetFn","charactersPrevious","_charactersPrevious","index","count","distance","length","charactersWeightedGet","_characterAssignedGetFn","charactersWeighted","sort","a","b","characterAssignedGetFn","card","characterAssignedGet","_card"],"mappings":"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","sourcesContent":["'use strict';\n\nconst charactersAssignedGetFn = (\n  fragments\n) => {\n\n  return fragments.reduce(\n    (\n      memo,\n      {\n        type,\n        text,\n        actor,\n        castIndex\n      }\n    ) => {\n\n      switch (\n        true\n      ) {\n\n        case (\n          type !==\n          'actor'\n        ) :\n        case (\n          !!memo.find(\n            (\n              _memo\n            ) => {\n\n              return (\n                _memo.text ===\n                text\n              );\n            }\n          )\n        ) :\n\n          return (\n            memo\n          );\n\n        default :\n\n          return [\n            ...memo,\n            {\n              text,\n              actor: {\n                ud: actor.ud,\n                text: actor.text,\n                gender: actor.gender,\n              },\n              castIndex\n            }\n          ];\n      }\n    },\n    []\n  );\n};\n\nconst charactersAssignedGet = (\n  segments\n) => {\n\n  return segments.reduce(\n    (\n      memo,\n      segment\n    ) => {\n\n      return [\n        ...memo,\n        {\n          text: segment,\n          characters: charactersAssignedGetFn(\n            segment\n          )\n        }\n      ];\n    },\n    []\n  );\n};\n\nconst charactersPreviousGet = (\n  cards\n) => {\n\n  return cards.reduce(\n    (\n      memo,\n      {\n        character\n      }\n    ) => {\n\n      if (\n        character\n      ) {\n\n        return [\n          ...memo,\n          character\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n};\n\nconst charactersWeightedGetFn = (\n  character,\n  charactersPrevious\n) => {\n\n  return charactersPrevious.reduce(\n    (\n      memo,\n      _charactersPrevious,\n      index\n    ) => {\n\n      if (\n        _charactersPrevious.actor.text ===\n        character.actor.text\n      ) {\n\n        return {\n          ...memo,\n          count: memo.count + 1,\n          distance: charactersPrevious.length - (\n            index + 1\n          )\n        };\n      }\n\n      return (\n        memo\n      );\n    },\n    {\n      ...character,\n      count: 0,\n      distance: charactersPrevious.length\n    }\n  );\n};\n\nconst charactersWeightedGet = (\n  characters,\n  charactersPrevious\n) => {\n\n  return characters.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      return [\n        ...memo,\n        charactersWeightedGetFn(\n          character,\n          charactersPrevious\n        )\n      ];\n    },\n    []\n  );\n};\n\nconst _characterAssignedGetFn = (\n  charactersWeighted\n) => {\n\n  return charactersWeighted.sort(\n    (\n      a, b\n    ) => {\n\n      switch (\n        true\n      ) {\n\n        case (\n          a.distance >\n          b.distance\n        ) :\n\n          return -1;\n\n        case (\n          b.distance >\n          a.distance\n        ) :\n\n          return 1;\n\n        case (\n          a.count >\n          b.count\n        ) :\n\n          return 1;\n\n        case (\n          b.count >\n          a.count\n        ) :\n\n          return -1;\n\n        case (\n          a.castIndex >\n          b.castIndex\n        ) :\n\n          return 1;\n\n        case (\n          b.castIndex >\n          a.castIndex\n        ) :\n\n          return -1;\n      }\n    }\n  )[\n    0\n  ];\n};\n\nconst characterAssignedGetFn = (\n  card,\n  charactersPrevious\n) => {\n\n  const charactersWeighted = charactersWeightedGet(\n    card.characters,\n    charactersPrevious\n  );\n\n  let character = _characterAssignedGetFn(\n    charactersWeighted\n  );\n\n  character = (\n    character\n  ) ?\n    {\n      text: character.text,\n      actor: character.actor\n    } :\n    null;\n\n  return {\n    text: card.text,\n    character\n  };\n};\n\nconst characterAssignedGet = (\n  cards\n) => {\n\n  return cards.reduce(\n    (\n      memo,\n      _card\n    ) => {\n\n      const charactersPrevious = charactersPreviousGet(\n        memo\n      );\n\n      const card = characterAssignedGetFn(\n        _card,\n        charactersPrevious\n      );\n\n      return [\n        ...memo,\n        card\n      ];\n    },\n    []\n  );\n};\n\nexport default (\n  segments\n) => {\n\n  let cards = charactersAssignedGet(\n    segments\n  );\n\n  cards = characterAssignedGet(\n    cards\n  );\n\n  return (\n    cards\n  );\n};\n"],"file":"cardsCharacterAssignedGet.js"}