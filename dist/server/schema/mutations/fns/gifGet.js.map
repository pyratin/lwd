{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/gifGet.js"],"names":["charactersFromCardsGet","cards","reduce","memo","card","exists","find","_memo","characterText","character","text","match","charactersDualRoleIndexAssignedGet","_characters","characters","_character","dualRoleIndex","findIndex","actor","cardsDualRoleIndexAssignedGet","_cards","_card","gifGetFn","miffStreamsConcated","Promise","resolve","reject","proc","encoding","error","stdout","pipe","stdin","gifOptimizedGet","gif","buffer","Buffer","from","trim","write","end","gifGet","splash","base64s","input","movieTitle","moviePoster","cardBase64s"],"mappings":"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","sourcesContent":["'use strict';\n\nimport {\n  exec\n} from 'child_process';\n\nimport cardsRenderedGet from './cardsRenderedGet';\nimport splashGet from './splashGet';\nimport base64MiffStreamsConcatedGet from \n  './base64MiffStreamsConcatedGet';\n\nconst charactersFromCardsGet = (\n  cards\n) => {\n\n  return cards.reduce(\n    (\n      memo,\n      card\n    ) => {\n\n      const exists = memo.find(\n        (\n          _memo\n        ) => {\n\n          const characterText = card?.character?.text;\n\n          return (\n            (\n              characterText\n            ) &&\n            (\n              (\n                characterText\n                  .match(\n                    _memo.text\n                  )\n              ) ||\n              (\n                _memo.text\n                  .match(\n                    characterText\n                  )\n              )\n            )\n          );\n        }\n      );\n\n      if (\n        card?.character?.text &&\n        !exists\n      ) {\n\n        return [\n          ...memo,\n          card.character\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n};\n\nconst charactersDualRoleIndexAssignedGet = (\n  _characters\n) => {\n\n  const characters = _characters.reduce(\n    (\n      memo,\n      _character\n    ) => {\n\n      const dualRoleIndex = memo.findIndex(\n        (\n          _memo\n        ) => {\n\n          return (\n            (\n              _memo.dualRoleIndex === \n              -1\n            ) &&\n            (\n              _memo.actor.text ===\n              _character.actor.text\n            )\n          );\n        }\n      );\n\n      if (\n        dualRoleIndex >=\n        0\n      ) {\n\n        return [\n          ...memo,\n          {\n            ..._character,\n            dualRoleIndex\n          }\n        ];\n      }\n\n      return [\n        ...memo,\n        {\n          ..._character,\n          dualRoleIndex: -1\n        }\n      ];\n    },\n    []\n  );\n\n  return (\n    characters\n  );\n};\n\nconst cardsDualRoleIndexAssignedGet = (\n  _cards,\n  characters\n) => {\n\n  const cards = _cards.reduce(\n    (\n      memo,\n      _card\n    ) => {\n\n      const character = characters.find(\n        (\n          character\n        ) => {\n\n          return (\n            character.text ===\n            _card?.character?.text\n          );\n        }\n      );\n\n      if (\n        character\n      ) {\n\n        return [\n          ...memo,\n          {\n            ..._card,\n            dualRoleIndex: character.dualRoleIndex\n          }\n        ];\n      }\n\n      return [\n        ...memo,\n        _card\n      ];\n    },\n    []\n  );\n\n  return (\n    cards\n  );\n};\n\nconst gifGetFn = (\n  miffStreamsConcated\n) => {\n\n  return new Promise(\n    (\n      resolve,\n      reject\n    ) => {\n\n      const proc = exec(\n        'convert -loop 0 -delay 1000 miff:- gif:-',\n        {\n          encoding: 'base64'\n        },\n        (\n          error,\n          stdout\n        ) => {\n\n          if (\n            error\n          ) {\n\n            return reject(\n              error\n            );\n          }\n\n          return resolve(\n            stdout\n          );\n        }\n      );\n\n      miffStreamsConcated.pipe(\n        proc.stdin\n      );\n    }\n  );\n};\n\nconst gifOptimizedGet = (\n  gif\n) => {\n\n  return new Promise(\n    (\n      resolve,\n      reject\n    ) => {\n\n      const buffer = new Buffer.from(\n        gif,\n        'base64'\n      );\n\n      const proc = exec(\n        'convert gif:- -coalesce -fuzz 5% -layers optimize gif:-',\n        {\n          encoding: 'base64'\n        },\n        (\n          error,\n          stdout\n        ) => {\n\n          if (\n            error\n          ) {\n\n            return reject(\n              error\n            );\n          }\n\n          return resolve(\n            `\n              data:image/gif;base64,${\n                stdout\n              }\n            `\n              .trim()\n          );\n        }\n      );\n\n      proc.stdin.write(\n        buffer\n      );\n\n      proc.stdin.end();\n    }\n  );\n};\n\nconst gifGet = async (\n  splash,\n  base64s\n) => {\n\n  const input = (\n    splash\n  ) ?\n    [\n      splash,\n      ...base64s\n    ] :\n    base64s;\n\n  let miffStreamsConcated = await base64MiffStreamsConcatedGet(\n    input\n  );\n\n  let gif = await gifGetFn(\n    miffStreamsConcated\n  );\n\n  gif = await gifOptimizedGet(\n    gif\n  );\n\n  return (\n    gif\n  );\n};\n\nexport default async (\n  movieTitle,\n  moviePoster,\n  _cards\n) => {\n\n  let characters = charactersFromCardsGet(\n    _cards\n  );\n\n  characters = charactersDualRoleIndexAssignedGet(\n    characters\n  );\n\n  const cards = cardsDualRoleIndexAssignedGet(\n    _cards,\n    characters\n  );\n\n  const cardBase64s = await cardsRenderedGet(\n    cards\n  );\n\n  const splash = await splashGet(\n    movieTitle,\n    moviePoster,\n    characters,\n    cards\n  );\n\n  const gif = await gifGet(\n    splash,\n    cardBase64s\n  );\n\n  return (\n    gif\n  );\n};\n"],"file":"gifGet.js"}