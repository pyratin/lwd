{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/gifGet.js"],"names":["cardsRenderedGet","cards","reduce","memo","card","then","res","character","text","replace","RegExp","trim","base64","result","Promise","resolve","gifGetFn","miffStreamsConcated","reject","proc","encoding","error","stdout","pipe","stdin","gifOptimizedGet","gif","buffer","Buffer","from","write","end","gifGet","splash","base64s","input","movieTitle","moviePoster","_cards"],"mappings":"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","sourcesContent":["'use strict';\n\nimport {\n  exec\n} from 'child_process';\nimport splashGet from './splashGet';\nimport base64TextCompositedGet from './base64TextCompositedGet';\nimport base64MiffStreamsConcatedGet from \n  './base64MiffStreamsConcatedGet';\n\nimport {\n  outputResGet\n} from '~/js/server/fns/variable';\n\nconst cardsRenderedGet = (\n  cards\n) => {\n\n  return cards.reduce(\n    (\n      memo,\n      card\n    ) => {\n\n      return memo.then(\n        (\n          res\n        ) => {\n\n          const character = card.character;\n\n          let text = card.text;\n\n          if (\n            character\n          ) {\n\n            text = text.replace(\n              new RegExp(\n                character\n              ),\n              `\n                <b>${\n                  character\n                }</b>\n              `\n                .trim()\n            );\n          }\n\n          return base64TextCompositedGet(\n            card.base64,\n            text,\n            outputResGet(),\n            20,\n            10\n          )\n            .then(\n              (\n                result\n              ) => {\n\n                return [\n                  ...res,\n                  result\n                ];\n              }\n            );\n        }\n      );\n    },\n    Promise.resolve(\n      []\n    )\n  );\n};\n\nconst gifGetFn = (\n  miffStreamsConcated\n) => {\n\n  return new Promise(\n    (\n      resolve,\n      reject\n    ) => {\n\n      const proc = exec(\n        'convert -loop 0 -delay 1000 miff:- gif:-',\n        {\n          encoding: 'base64'\n        },\n        (\n          error,\n          stdout\n        ) => {\n\n          if (\n            error\n          ) {\n\n            return reject(\n              error\n            );\n          }\n\n          return resolve(\n            stdout\n          );\n        }\n      );\n\n      miffStreamsConcated.pipe(\n        proc.stdin\n      );\n    }\n  );\n};\n\nconst gifOptimizedGet = (\n  gif\n) => {\n\n  return new Promise(\n    (\n      resolve,\n      reject\n    ) => {\n\n      const buffer = new Buffer.from(\n        gif,\n        'base64'\n      );\n\n      const proc = exec(\n        'convert gif:- -coalesce -fuzz 5% -layers OptimizeFrame +map gif:-',\n        {\n          encoding: 'base64'\n        },\n        (\n          error,\n          stdout\n        ) => {\n\n          if (\n            error\n          ) {\n\n            return reject(\n              error\n            );\n          }\n\n          return resolve(\n            `\n              data:image/gif;base64,${\n                stdout\n              }\n            `\n              .trim()\n          );\n        }\n      );\n\n      proc.stdin.write(\n        buffer\n      );\n\n      proc.stdin.end();\n    }\n  );\n};\n\nconst gifGet = async (\n  splash,\n  base64s\n) => {\n\n  const input = (\n    splash\n  ) ?\n    [\n      splash,\n      ...base64s\n    ] :\n    base64s;\n\n  let miffStreamsConcated = await base64MiffStreamsConcatedGet(\n    input\n  );\n\n  let gif = await gifGetFn(\n    miffStreamsConcated\n  );\n\n  gif = await gifOptimizedGet(\n    gif\n  );\n\n  return (\n    gif\n  );\n};\n\nexport default async (\n  movieTitle,\n  moviePoster,\n  _cards\n) => {\n\n  const base64s = await cardsRenderedGet(\n    _cards\n  );\n\n  const splash = await splashGet(\n    movieTitle,\n    moviePoster,\n    _cards\n  );\n\n  const gif = await gifGet(\n    splash,\n    base64s\n  );\n\n  return (\n    gif\n  );\n};\n"],"file":"gifGet.js"}