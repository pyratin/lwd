{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/NNPCrossMatchGet.js"],"names":["characterStringMatchedGet","character","_character","characterTokenizedGet","map","text","characterTokensMatchedGet","characterTokenCombinations","reduce","memo","characterTokenCombination","join","characterToken","find","_characterTokensMatchedGet","_characterTokenCombinations","_characterTokenCombination","_characterToken","strict","NNPmatchIndexString","NNPmatchIndex","parseInt"],"mappings":"AAAA;;;;;;;;;;;AAEA;;AAEA;;AAEA,IAAMA,yBAAyB,GAAG,SAA5BA,yBAA4B,CAChCC,SADgC,EAEhCC,UAFgC,EAG7B;AAEH,SACED,SAAS,KACTC,UAFK,GAIL,GAJK,GAKL,IALF;AAMD,CAXD;;AAaA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAC5BF,SAD4B,EAEzB;AAEH,SAAO,mCACLA,SADK,EAGJG,GAHI,CAIH,gBAIK;AAAA,QAFDC,IAEC,QAFDA,IAEC;AAEH,WACEA,IADF;AAGD,GAbE,CAAP;AAeD,CAnBD;;AAqBA,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAChCL,SADgC,EAEhCC,UAFgC,EAG7B;AAEH,MAAMK,0BAA0B,GAAG,8BACjCJ,qBAAqB,CACnBD,UADmB,CADY,EAKhCM,MALgC,CAM/B,UACEC,IADF,EAEEC,yBAFF,EAGK;AAEH,yDACKD,IADL,IAEEC,yBAAyB,CAACC,IAA1B,CACE,GADF,CAFF;AAMD,GAjB8B,EAkB/B,EAlB+B,CAAnC;AAqBA,MAAMC,cAAc,GAAGL,0BAA0B,CAACM,IAA3B,CACrB,UACED,cADF,EAEK;AAEH,WACEA,cAAc,KACdX,SAFF;AAID,GAToB,CAAvB;AAYA,SACEW,cADK,GAGL,GAHK,GAIL,IAJF;AAKD,CA3CD;;AA6CA,IAAME,0BAA0B,GAAG,SAA7BA,0BAA6B,CACjCb,SADiC,EAEjCC,UAFiC,EAG9B;AAEH,MAAMK,0BAA0B,GAAG,8BACjCJ,qBAAqB,CACnBF,SADmB,CADY,EAKhCO,MALgC,CAM/B,UACEC,IADF,EAEEC,yBAFF,EAGK;AAEH,yDACKD,IADL,IAEEC,yBAAyB,CAACC,IAA1B,CACE,GADF,CAFF;AAMD,GAjB8B,EAkB/B,EAlB+B,CAAnC;;AAqBA,MAAMI,2BAA2B,GAAG,8BAClCZ,qBAAqB,CACnBD,UADmB,CADa,EAKjCM,MALiC,CAMhC,UACEC,IADF,EAEEO,0BAFF,EAGK;AAEH,yDACKP,IADL,IAEEO,0BAA0B,CAACL,IAA3B,CACE,GADF,CAFF;AAMD,GAjB+B,EAkBhC,EAlBgC,CAApC;;AAqBA,MAAMC,cAAc,GAAGG,2BAA2B,CAACF,IAA5B,CACrB,UACEI,eADF,EAEK;AAEH,WAAOV,0BAA0B,CAACM,IAA3B,CACL,UACED,cADF,EAEK;AAEH,aACEA,cAAc,KACdK,eAFF;AAID,KATI,CAAP;AAWD,GAhBoB,CAAvB;;AAmBA,SACEL,cADK,GAGL,GAHK,GAIL,IAJF;AAKD,CAvED;;eAyEe,kBACbX,SADa,EAEbC,UAFa,EAIV;AAAA,MADHgB,MACG,uEADM,KACN;;AAEH,MACE,CAACjB,SAAD,IACA,CAACC,UAFH,EAGE;AAEA,WACE,IADF;AAGD;;AAED,MAAIiB,mBAAJ;;AAEA,UACE,IADF;AAIE,SACE,CACEA,mBAAmB,GAAGnB,yBAAyB,CAC7CC,SAD6C,EAE7CC,UAF6C,CADjD,KAMA,CAAC,CAACiB,mBAPJ;AASA,SACE,CAACD,MAAD,KAEEC,mBAAmB,GAAGb,yBAAyB,CAC7CL,SAD6C,EAE7CC,UAF6C,CAFjD,KAOA,CAAC,CAACiB,mBARJ;AAUA,SACE,CAACD,MAAD,KAEEC,mBAAmB,GAAGb,yBAAyB,CAC7CJ,UAD6C,EAE7CD,SAF6C,CAFjD,KAOA,CAAC,CAACkB,mBARJ;AAUA,SACE,CAACD,MAAD,KAEEC,mBAAmB,GAAGL,0BAA0B,CAC9Cb,SAD8C,EAE9CC,UAF8C,CAFlD,KAOA,CAAC,CAACiB,mBARJ;AAWE,aACE;AACEd,QAAAA,IAAI,EAAEJ,SADR;AAEEmB,QAAAA,aAAa,EAAEC,QAAQ,CACrBF,mBADqB;AAFzB,OADF;AA5CJ;AAqDD,C","sourcesContent":["'use strict';\n\nimport combinations from 'combinations';\n\nimport wordsTokenizedGet from './wordsTokenizedGet';\n\nconst characterStringMatchedGet = (\n  character,\n  _character\n) => {\n\n  return (\n    character ===\n    _character\n  ) ?\n    '0' :\n    null;\n};\n\nconst characterTokenizedGet = (\n  character\n) => {\n\n  return wordsTokenizedGet(\n    character\n  )\n    .map(\n      (\n        {\n          text\n        }\n      ) => {\n\n        return (\n          text\n        );\n      }\n    );\n};\n\nconst characterTokensMatchedGet = (\n  character,\n  _character\n) => {\n\n  const characterTokenCombinations = combinations(\n    characterTokenizedGet(\n      _character\n    )\n  )\n    .reduce(\n      (\n        memo,\n        characterTokenCombination\n      ) => {\n\n        return [\n          ...memo,\n          characterTokenCombination.join(\n            ' '\n          )\n        ];\n      },\n      []\n    );\n\n  const characterToken = characterTokenCombinations.find(\n    (\n      characterToken\n    ) => {\n\n      return (\n        characterToken ===\n        character\n      );\n    }\n  );\n\n  return (\n    characterToken\n  ) ?\n    '1' :\n    null;\n};\n\nconst _characterTokensMatchedGet = (\n  character,\n  _character\n) => {\n\n  const characterTokenCombinations = combinations(\n    characterTokenizedGet(\n      character\n    )\n  )\n    .reduce(\n      (\n        memo,\n        characterTokenCombination\n      ) => {\n\n        return [\n          ...memo,\n          characterTokenCombination.join(\n            ' '\n          )\n        ];\n      },\n      []\n    );\n\n  const _characterTokenCombinations = combinations(\n    characterTokenizedGet(\n      _character\n    )\n  )\n    .reduce(\n      (\n        memo,\n        _characterTokenCombination\n      ) => {\n\n        return [\n          ...memo,\n          _characterTokenCombination.join(\n            ' '\n          )\n        ];\n      },\n      []\n    );\n\n  const characterToken = _characterTokenCombinations.find(\n    (\n      _characterToken\n    ) => {\n\n      return characterTokenCombinations.find(\n        (\n          characterToken\n        ) => {\n\n          return (\n            characterToken ===\n            _characterToken\n          );\n        }\n      );\n    }\n  );\n\n  return (\n    characterToken\n  ) ?\n    '2' :\n    null;\n};\n\nexport default (\n  character,\n  _character,\n  strict = false\n) => {\n\n  if (\n    !character ||\n    !_character\n  ) {\n\n    return (\n      null\n    );\n  }\n\n  let NNPmatchIndexString;\n\n  switch (\n    true\n  ) {\n\n    case (\n      (\n        NNPmatchIndexString = characterStringMatchedGet(\n          character,\n          _character\n        )\n      ) &&\n      !!NNPmatchIndexString\n    ) :\n    case (\n      !strict &&\n      (\n        NNPmatchIndexString = characterTokensMatchedGet(\n          character,\n          _character\n        )\n      ) &&\n      !!NNPmatchIndexString\n    ) :\n    case (\n      !strict &&\n      (\n        NNPmatchIndexString = characterTokensMatchedGet(\n          _character,\n          character\n        )\n      ) &&\n      !!NNPmatchIndexString\n    ) :\n    case (\n      !strict &&\n      (\n        NNPmatchIndexString = _characterTokensMatchedGet(\n          character,\n          _character\n        )\n      ) &&\n      !!NNPmatchIndexString\n    ) :\n\n      return (\n        {\n          text: character,\n          NNPmatchIndex: parseInt(\n            NNPmatchIndexString\n          )\n        }\n      );\n  }\n};\n"],"file":"NNPCrossMatchGet.js"}