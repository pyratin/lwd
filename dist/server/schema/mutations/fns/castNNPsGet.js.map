{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/castNNPsGet.js"],"names":["sentenceNNPsGet","sentence","sentenceIndex","castIndex","map","NNP","possessive","match","RegExp","text","trim","_castNNPsGet","_cast","role","reduce","memo","NNPs","_distance","distance","length","filter","cast","uniqueFlag","castNNPs","castNNP","index"],"mappings":"AAAA;;;;;;;;;;;;;AAEA;;AACA;;AACA;;;;;;AAEA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CACtBC,QADsB,EAEtBC,aAFsB,EAGtBC,SAHsB,EAInB;AAEH,SAAO,yBACLF,QADK,EAGJG,GAHI,CAIH,UACEC,GADF,EAEK;AAEH,QAAMC,UAAU,GAAG,CAAC,CAACL,QAAQ,CAC1BM,KADkB,CAEjB,IAAIC,MAAJ,CACE,4BAEIH,GAAG,CAACI,IAFR,wBAKGC,IALH,EADF,CAFiB,CAArB;AAYA,2CACKL,GADL;AAEEC,MAAAA,UAAU,EAAVA,UAFF;AAGEJ,MAAAA,aAAa,EAAbA,aAHF;AAIEC,MAAAA,SAAS,EAATA;AAJF;AAMD,GA1BE,CAAP;AA4BD,CAlCD;;AAoCA,IAAMQ,YAAY,GAAG,SAAfA,YAAe,CACnBC,KADmB,EAEnBT,SAFmB,EAGhB;AAEH,SAAO,uCACLS,KAAK,CAACC,IADD,EAGJC,MAHI,CAIH,UACEC,IADF,EAEEd,QAFF,EAGEC,aAHF,EAIK;AAEH,QAAIc,IAAI,GAAGhB,eAAe,CACxBC,QADwB,EAExBC,aAFwB,EAGxBC,SAHwB,CAA1B;AAMAa,IAAAA,IAAI,GAAGA,IAAI,CAACZ,GAAL,CACL,UACEC,GADF,EAEK;AAEH,UAAMY,SAAS,GACbZ,GAAG,CAACa,QADY,GAGhBb,GAAG,CAACa,QAAJ,GACAF,IAAI,CACF,CADE,CAAJ,CAGGP,IAHH,CAGQU,MAPQ,GAQhB,CARF;;AAUA,6CACKd,GADL;AAEEY,QAAAA,SAAS,EAATA;AAFF;AAID,KAnBI,CAAP;AAsBAD,IAAAA,IAAI,GAAGA,IAAI,CAACI,MAAL,CACL,UACEf,GADF,EAEK;AAEH,aACEA,GAAG,CAACa,QADN;AAGD,KARI,CAAP;AAWA,yDACKH,IADL,uCAEKC,IAFL;AAID,GArDE,EAsDH,EAtDG,CAAP;AAwDD,CA7DD;;eA+De,kBACbK,IADa,EAGV;AAAA,MADHC,UACG,uEADU,KACV;AAEH,MAAIC,QAAQ,GAAGF,IAAI,CAACP,MAAL,CACb,UACEC,IADF,EAEEH,KAFF,EAGET,SAHF,EAIK;AAEH,QAAMa,IAAI,GAAGL,YAAY,CACvBC,KADuB,EAEvBT,SAFuB,CAAzB;;AAKA,yDACKY,IADL,uCAEKC,IAFL;AAID,GAhBY,EAiBb,EAjBa,CAAf;;AAoBA,MACEM,UADF,EAEE;AAEAC,IAAAA,QAAQ,GAAG,+BACTA,QADS,CAAX;AAGD;;AAEDA,EAAAA,QAAQ,GAAGA,QAAQ,CAACnB,GAAT,CACT,UACEoB,OADF,EAEEC,KAFF,EAGK;AAEH,2CACKD,OADL;AAEEC,MAAAA,KAAK,EAALA;AAFF;AAID,GAVQ,CAAX;AAaA,SACEF,QADF;AAGD,C","sourcesContent":["'use strict';\n\nimport sentencesTokenizedGet from './sentencesTokenizedGet';\nimport NNPsGet from './NNPsGet';\nimport NNPsUniqueGet from './NNPsUniqueGet';\n\nconst sentenceNNPsGet = (\n  sentence,\n  sentenceIndex,\n  castIndex\n) => {\n\n  return NNPsGet(\n    sentence\n  )\n    .map(\n      (\n        NNP\n      ) => {\n\n        const possessive = !!sentence\n          .match(\n            new RegExp(\n              `\n                ${\n                  NNP.text\n                }'s\n              `\n                .trim()\n            )\n          );\n\n        return {\n          ...NNP,\n          possessive,\n          sentenceIndex,\n          castIndex\n        };\n      }\n    );\n};\n\nconst _castNNPsGet = (\n  _cast,\n  castIndex\n) => {\n\n  return sentencesTokenizedGet(\n    _cast.role\n  )\n    .reduce(\n      (\n        memo,\n        sentence,\n        sentenceIndex\n      ) => {\n\n        let NNPs = sentenceNNPsGet(\n          sentence,\n          sentenceIndex,\n          castIndex\n        );\n\n        NNPs = NNPs.map(\n          (\n            NNP\n          ) => {\n\n            const _distance = (\n              NNP.distance\n            ) ?\n              NNP.distance -\n              NNPs[\n                0\n              ]\n                .text.length :\n              0;\n\n            return {\n              ...NNP,\n              _distance\n            };\n          }\n        );\n\n        NNPs = NNPs.filter(\n          (\n            NNP\n          ) => {\n\n            return (\n              NNP.distance\n            );\n          }\n        );\n\n        return [\n          ...memo,\n          ...NNPs\n        ];\n      },\n      []\n    );\n};\n\nexport default (\n  cast,\n  uniqueFlag = false\n) => {\n  \n  let castNNPs = cast.reduce(\n    (\n      memo,\n      _cast,\n      castIndex\n    ) => {\n\n      const NNPs = _castNNPsGet(\n        _cast,\n        castIndex\n      );\n\n      return [\n        ...memo,\n        ...NNPs\n      ];\n    },\n    []\n  );\n\n  if (\n    uniqueFlag\n  ) {\n\n    castNNPs = NNPsUniqueGet(\n      castNNPs\n    );\n  }\n\n  castNNPs = castNNPs.map(\n    (\n      castNNP,\n      index\n    ) => {\n  \n      return {\n        ...castNNP,\n        index\n      };\n    }\n  );\n\n  return (\n    castNNPs\n  );\n};\n"],"file":"castNNPsGet.js"}