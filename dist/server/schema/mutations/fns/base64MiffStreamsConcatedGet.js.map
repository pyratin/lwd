{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/base64MiffStreamsConcatedGet.js"],"names":["miffsGetFn","base64","Promise","resolve","reject","buffer","Buffer","from","replace","proc","encoding","error","stdout","stdin","write","end","base64s","reduce","memo","then","res","result","miffs"],"mappings":"AAAA;;;;;;;;;;;AAEA;;AAIA;;AAEA,IAAMA,UAAU,GAAG,SAAbA,UAAa,CACjBC,MADiB,EAEd;AAEH,SAAO,IAAIC,OAAJ,CACL,UACEC,OADF,EAEEC,MAFF,EAGK;AAEH,QAAMC,MAAM,GAAG,IAAIC,MAAM,CAACC,IAAX,CACbN,MAAM,CAACO,OAAP,CACE,iCADF,EAEE,EAFF,CADa,EAKb,QALa,CAAf;AAQA,QAAMC,IAAI,GAAG,yBACX,kBADW,EAEX;AACEC,MAAAA,QAAQ,EAAET;AADZ,KAFW,EAKX,UACEU,KADF,EAEEC,MAFF,EAGK;AAEH,UACED,KADF,EAEE;AAEA,eAAOP,MAAM,CACXO,KADW,CAAb;AAGD;;AAED,aAAOR,OAAO,CACZS,MADY,CAAd;AAGD,KAtBU,CAAb;AAyBAH,IAAAA,IAAI,CAACI,KAAL,CAAWC,KAAX,CACET,MADF;AAIAI,IAAAA,IAAI,CAACI,KAAL,CAAWE,GAAX;AACD,GA5CI,CAAP;AA8CD,CAlDD;;eAoDe,kBACbC,OADa,EAEV;AAEH,SAAOA,OAAO,CAACC,MAAR,CACL,UACEC,IADF,EAEEjB,MAFF,EAGK;AAEH,WAAOiB,IAAI,CAACC,IAAL,CACL,UACEC,GADF,EAEK;AAEH,aAAOpB,UAAU,CACfC,MADe,CAAV,CAGJkB,IAHI,CAIH,UACEE,MADF,EAEK;AAEH,6DACKD,GADL,IAEEC,MAFF;AAID,OAZE,CAAP;AAcD,KAnBI,CAAP;AAqBD,GA3BI,EA4BLnB,OAAO,CAACC,OAAR,CACE,EADF,CA5BK,EAgCJgB,IAhCI,CAiCH,UACEG,KADF,EAEK;AAEH,WAAO,2BACLA,KADK,CAAP;AAGD,GAxCE,CAAP;AA0CD,C","sourcesContent":["'use strict';\n\nimport {\n  exec\n} from 'child_process';\n\nimport streamcat from 'streamcat';\n\nconst miffsGetFn = (\n  base64\n) => {\n\n  return new Promise(\n    (\n      resolve,\n      reject\n    ) => {\n\n      const buffer = new Buffer.from(\n        base64.replace(\n          /^data:image\\/(jpeg|png);base64,/,\n          ''\n        ),\n        'base64'\n      );\n\n      const proc = exec(\n        'convert - miff:-',\n        {\n          encoding: base64\n        },\n        (\n          error,\n          stdout\n        ) => {\n\n          if (\n            error\n          ) {\n\n            return reject(\n              error\n            );\n          }\n\n          return resolve(\n            stdout\n          );\n        }\n      );\n\n      proc.stdin.write(\n        buffer\n      );\n\n      proc.stdin.end();\n    }\n  );\n};\n\nexport default (\n  base64s\n) => {\n\n  return base64s.reduce(\n    (\n      memo,\n      base64\n    ) => {\n\n      return memo.then(\n        (\n          res\n        ) => {\n\n          return miffsGetFn(\n            base64\n          )\n            .then(\n              (\n                result\n              ) => {\n\n                return [\n                  ...res,\n                  result\n                ];\n              }\n            );\n        }\n      );\n    },\n    Promise.resolve(\n      []\n    )\n  )\n    .then(\n      (\n        miffs\n      ) => {\n\n        return streamcat(\n          miffs\n        );\n      }\n    );\n};\n"],"file":"base64MiffStreamsConcatedGet.js"}