{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/deckRenderDetailsAssignedGet.js"],"names":["charactersRenderTextAssignedGetFn","_text","lengthMax","tokens","map","text","reduce","memo","token","length","trim","slice","charactersRenderTextAssignedGet","characters","character","renderText","charactersConcatedGet","_characters","dualRoleIndex","render","charactersSortedByCastIndexGet","sort","a","b","castIndex","charactersRenderDetailAssignedGet","cardsRenderDetailAssignedGet","cards","card","find","cardTextGet","distance","cardGet","cardsRenderTextAssignedGet","_card","deck","splash"],"mappings":"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","sourcesContent":["'use strict';\n\nimport wordsTokenizedGet from './wordsTokenizedGet';\n\nconst charactersRenderTextAssignedGetFn = (\n  _text,\n  lengthMax\n) => {\n\n  const tokens = wordsTokenizedGet(\n    _text\n  )\n    .map(\n      (\n        {\n          text\n        }\n      ) => {\n\n        return (\n          text\n        );\n      }\n    );\n\n  let text = tokens.reduce(\n    (\n      memo,\n      token\n    ) => {\n\n      if (\n        memo.length < \n        lengthMax\n      ) {\n\n        return `\n          ${\n            memo\n          } ${\n            token\n          }\n        `\n          .trim();\n      }\n\n      return (\n        memo\n      );\n    },\n    ''\n  );\n\n  text = text.slice(\n    0, lengthMax\n  );\n\n  if (\n    text.length <\n    _text.length\n  ) {\n\n    text = `\n      ${\n        text\n      }..\n    `\n      .trim();\n  }\n\n  return (\n    text\n  );\n};\n\nconst charactersRenderTextAssignedGet = (\n  characters\n) => {\n\n  const lengthMax = 10;\n\n  return characters.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      const renderText = charactersRenderTextAssignedGetFn(\n        character.text,\n        lengthMax\n      );\n\n      return [\n        ...memo,\n        {\n          ...character,\n          renderText\n        }\n      ];\n    },\n    []\n  );\n\n};\n\nconst charactersConcatedGet = (\n  _characters\n) => {\n\n  let characters = _characters.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      const dualRoleIndex = character.dualRoleIndex;\n\n      if (\n        character.render &&\n        (\n          dualRoleIndex >=\n          0\n        )\n      ) {\n\n        const renderText = `\n          ${\n            memo[\n              dualRoleIndex\n            ]\n              .renderText\n          } / ${\n            character.renderText\n          }\n        `\n          .trim();\n\n        return [\n          ...memo.slice(\n            0, dualRoleIndex\n          ),\n          {\n            ...memo[\n              dualRoleIndex\n            ],\n            renderText\n          },\n          ...memo.slice(\n            dualRoleIndex + 1\n          ),\n          {\n            ...character,\n            render: false\n          }\n        ];\n      }\n\n      return [\n        ...memo,\n        character,\n      ];\n    },\n    []\n  );\n\n  return (\n    characters\n  );\n};\n\nconst charactersSortedByCastIndexGet = (\n  characters\n) => {\n\n  return characters.sort(\n    (\n      a, b\n    ) => {\n\n      switch (\n        true\n      ) {\n\n        case (\n          a.castIndex >\n          b.castIndex\n        ) :\n\n          return 1;\n\n        case (\n          b.castIndex >\n          a.castIndex\n        ) :\n\n          return -1;\n      }\n    }\n  );\n};\n\nconst charactersRenderDetailAssignedGet = (\n  _characters\n) => {\n\n  let characters = charactersRenderTextAssignedGet(\n    _characters\n  );\n\n  characters = charactersConcatedGet(\n    characters\n  );\n\n  characters = charactersSortedByCastIndexGet(\n    characters\n  );\n\n  return (\n    characters\n  );\n};\n\nconst cardsRenderDetailAssignedGet = (\n  cards,\n  characters\n) => {\n\n  return cards.reduce(\n    (\n      memo,\n      card\n    ) => {\n\n      const character = characters.find(\n        (\n          character\n        ) => {\n\n          return (\n            character.text ===\n            card.character?.text\n          );\n        }\n      );\n\n      if (\n        character\n      ) {\n\n        return [\n          ...memo,\n          {\n            ...card,\n            dualRoleIndex: character.dualRoleIndex\n          }\n        ];\n      }\n\n      return [\n        ...memo,\n        card\n      ];\n    },\n    []\n  );\n};\n\nconst cardTextGet = (\n  {\n    text: _text,\n    character\n  }\n) => {\n\n  let renderText = _text;\n\n  if (\n    !character\n  ) {\n\n    return (\n      renderText\n    );\n  }\n\n  renderText = `\n    ${\n      renderText.slice(\n        0, character.distance\n      )\n    }<b>${\n      character.text\n    }</b>${\n      renderText.slice(\n        character.distance +\n        character.text.length\n      )\n    }\n  `\n    .trim();\n\n  return (\n    renderText\n  );\n};\n\nconst cardGet = (\n  card\n) => {\n\n  const renderText = cardTextGet(\n    card\n  );\n\n  return {\n    ...card,\n    renderText\n  };\n};\n\nconst cardsRenderTextAssignedGet = (\n  cards\n) => {\n\n  return cards.reduce(\n    (\n      memo,\n      _card\n    ) => {\n\n      const card = cardGet(\n        _card\n      );\n\n      return [\n        ...memo,\n        card\n      ];\n    },\n    []\n  );\n};\n\nexport default (\n  deck\n) => {\n\n  let characters = charactersRenderDetailAssignedGet(\n    deck.splash.characters\n  );\n\n  let cards = cardsRenderDetailAssignedGet(\n    deck.cards,\n    characters\n  );\n\n  cards = cardsRenderTextAssignedGet(\n    cards\n  );\n\n  return {\n    ...deck,\n    cards,\n    splash: {\n      ...deck.splash,\n      characters\n    }\n  };\n};\n"],"file":"deckRenderDetailsAssignedGet.js"}