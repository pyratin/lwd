{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/base64TextCompositedGet.js"],"names":["base64","_text","res","textPointsize","textBorder","Promise","resolve","reject","text","replace","factor","command","split","reduce","memo","_command","trim","_base64","buffer","Buffer","from","proc","encoding","error","stdout","stdin","write","end"],"mappings":"AAAA;;;;;;;;;;;;;AAEA;;;2FAIe,iBACbA,MADa,EAEbC,KAFa,EAGbC,GAHa,EAIbC,aAJa,EAKbC,UALa;AAAA;AAAA;AAAA;AAAA;AAAA,6CAQN,IAAIC,OAAJ,CACL,UACEC,OADF,EAEEC,MAFF,EAGK;AAEH,kBAAIC,IAAI,GAAGP,KAAK,CACbQ,OADQ,CAEP,IAFO,EAGP,KAHO,EAKRA,OALQ,CAMP,IANO,EAOP,SAPO,EASRA,OATQ,CAUP,KAVO,EAWP,KAXO,CAAX;;AAcA,kBAAMC,MAAM,GAAGR,GAAG,GAAG,GAArB;AAEA,kBAAMS,OAAO,GAAG,+EAKVT,GALU,cAOVA,GAPU,2DAWVA,GAXU,cAaVA,GAbU,6DAkBVA,GAAG,GAECE,UAAU,GAAG,CADf,GAEIM,MArBI,gGA2BVP,aAAa,GAAGO,MA3BN,qGA+BVF,IA/BU,qEAmCVJ,UAAU,GAAGM,MAnCH,gJA4CbE,KA5Ca,CA6CZ,IA7CY,EA+CbC,MA/Ca,CAgDZ,UACEC,IADF,EAEEC,QAFF,EAGK;AAEH,uBAAO,0BAEHD,IAFG,cAIHC,QAJG,oBAOJC,IAPI,EAAP;AAQD,eA7DW,EA8DZ,EA9DY,CAAhB;;AAiEA,kBAAMC,OAAO,GAAGjB,MAAM,CACnBS,OADa,CAEZ,2BAFY,EAGZ,EAHY,CAAhB;;AAMA,kBAAMS,MAAM,GAAG,IAAIC,MAAM,CAACC,IAAX,CACbH,OADa,EAEb,QAFa,CAAf;AAKA,kBAAMI,IAAI,GAAG,yBACXV,OADW,EAEX;AACEW,gBAAAA,QAAQ,EAAE;AADZ,eAFW,EAKX,UACEC,KADF,EAEEC,MAFF,EAGK;AAEH,oBACED,KADF,EAEE;AAEA,yBAAOhB,MAAM,CACXgB,KADW,CAAb;AAGD;;AAED,oBAAMvB,MAAM,GAAG,+CAEXwB,MAFW,kBAKZR,IALY,EAAf;AAOA,uBAAOV,OAAO,CACZN,MADY,CAAd;AAGD,eA7BU,CAAb;AAgCAqB,cAAAA,IAAI,CAACI,KAAL,CAAWC,KAAX,CACER,MADF;AAIAG,cAAAA,IAAI,CAACI,KAAL,CAAWE,GAAX;AACD,aAvII,CARM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["'use strict';\n\nimport {\n  exec\n} from 'child_process';\n\nexport default async (\n  base64,\n  _text,\n  res,\n  textPointsize,\n  textBorder\n) => {\n\n  return new Promise(\n    (\n      resolve,\n      reject\n    ) => {\n\n      let text = _text\n        .replace(\n          /\"/g,\n          '\\\\\"'\n        )\n        .replace(\n          /&/g,\n          '\\\\&amp;'\n        )\n        .replace(\n          /\\$/g,\n          '\\\\$'\n        );\n\n      const factor = res / 480;\n\n      const command = `\n        convert \n        \\\\(\n          jpeg:-\n          -resize ${\n            res\n          }x${\n            res\n          }^\n          -gravity center\n          -crop ${\n            res\n          }x${\n            res\n          }+0+0\n        \\\\)\n        \\\\(\n          -size ${\n            res - (\n              (\n                textBorder * 2\n              ) * factor\n            )\n          }\n          -background \"#000\" \n          -fill \"#fff\" \n          -pointsize ${\n            textPointsize * factor\n          }\n          -font \"/media/fonts/Muli-Italic-VariableFont_wght.ttf\"\n          pango:\"${\n            text\n          }\" \n          -bordercolor \"#000\"\n          -border ${\n            textBorder * factor\n          }\n        \\\\)\n        -gravity south\n        -compose blend\n        -define compose:args=90\n        -composite\n        jpeg:-\n      `\n        .split(\n          /\\s/\n        )\n        .reduce(\n          (\n            memo,\n            _command\n          ) => {\n\n            return `\n              ${\n                memo\n              } ${\n                _command\n              }\n            `\n              .trim();\n          },\n          ''\n        );\n\n      const _base64 = base64\n        .replace(\n          /^data:image\\/jpeg;base64,/,\n          ''\n        );\n\n      const buffer = new Buffer.from(\n        _base64,\n        'base64'\n      );\n\n      const proc = exec(\n        command,\n        {\n          encoding: 'base64'\n        },\n        (\n          error,\n          stdout\n        ) => {\n\n          if (\n            error\n          ) {\n\n            return reject(\n              error\n            );\n          }\n\n          const base64 = `\n            data:image/jpeg;base64,${\n              stdout\n            }\n          `\n            .trim();\n\n          return resolve(\n            base64\n          );\n        }\n      );\n\n      proc.stdin.write(\n        buffer\n      );\n\n      proc.stdin.end();\n    }\n  );\n};\n\n"],"file":"base64TextCompositedGet.js"}