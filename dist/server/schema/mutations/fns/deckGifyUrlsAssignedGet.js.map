{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/deckGifyUrlsAssignedGet.js"],"names":["cardsForGifyGet","cards","reduce","cardMemo","card","cardIndex","character","text","queryGet","gifyApiKey","process","env","npm_package_config_GIFY_API_KEY","trim","fnDelayRun","cardsFlatlistGifyUrlAssignedGetFn","encodeURIComponent","then","res","json","gifyUrl","data","images","url","cardsFlatlistGifyUrlAssignedGet","memo","result","Promise","resolve","cardByIndexGet","find","cardsGifyUrlAssignedGet","cardsFlatlist","_cardsFlatlist","deck"],"mappings":"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","sourcesContent":["'use strict';\n\nimport nodeFetch from 'node-fetch';\n\nimport fnDelayRunFn from './fnDelayRun';\n\nconst cardsForGifyGet = (\n  cards\n) => {\n\n  return cards.reduce(\n    (\n      cardMemo,\n      card,\n      cardIndex\n    ) => {\n\n      if (\n        !card?.character?.text\n      ) {\n\n        return [\n          ...cardMemo,\n          {\n            ...card,\n            cardIndex\n          }\n        ];\n      }\n\n      return (\n        cardMemo\n      );\n    },\n    []\n  );\n};\n\nconst queryGet = (\n  text\n) => {\n\n  const gifyApiKey = \n    process.env.npm_package_config_GIFY_API_KEY;\n\n  return `\n    https://api.giphy.com/v1/gifs/translate?api_key=${\n      gifyApiKey\n    }&weirdness:=10&s=${\n      text\n    }\n  `\n    .trim();\n};\n\nconst fnDelayRun = (\n  text\n) => {\n\n  return fnDelayRunFn(\n    cardsFlatlistGifyUrlAssignedGetFn,\n    2000,\n    `\n      deckCardsGifyUrlAssignedGet: ${\n        text\n      }\n    `\n      .trim(),\n    {\n      text\n    }\n  );\n};\n\nconst cardsFlatlistGifyUrlAssignedGetFn = (\n  {\n    text\n  }\n) => {\n\n  return nodeFetch(\n    queryGet(\n      encodeURIComponent(\n        text\n      )\n    )\n  )\n    .then(\n      (\n        res\n      ) => {\n\n        return res.json();\n      }\n    )\n    .then(\n      (\n        json\n      ) => {\n\n        const gifyUrl = json.data.images?.[\n          '480w_still'\n        ]\n          .url;\n\n        if (\n          !gifyUrl\n        ) {\n\n          return fnDelayRun(\n            text\n          );\n        }\n\n        return (\n          gifyUrl\n        );\n      }\n    )\n    .catch(\n      () => {\n\n        return fnDelayRun(\n          text\n        );\n      }\n    );\n};\n\nconst cardsFlatlistGifyUrlAssignedGet = (\n  cards\n) => {\n\n  return cards.reduce(\n    (\n      memo,\n      card\n    ) => {\n\n      return memo.then(\n        (\n          res\n        ) => {\n\n          return cardsFlatlistGifyUrlAssignedGetFn(\n            card\n          )\n            .then(\n              (\n                result\n              ) => {\n\n                return [\n                  ...res,\n                  {\n                    ...card,\n                    gifyUrl: result\n                  }\n                ];\n              }\n            );\n        }\n      );\n    },\n    Promise.resolve(\n      []\n    )\n  );\n};\n\nconst cardByIndexGet = (\n  cards,\n  cardIndex\n) => {\n\n  return cards.find(\n    (\n      card\n    ) => {\n\n      return (\n        card.cardIndex ===\n        cardIndex\n      );\n    }\n  );\n};\n\nconst cardsGifyUrlAssignedGet = (\n  cardsFlatlist,\n  cards\n) => {\n\n  return cards.reduce(\n    (\n      memo,\n      card,\n      cardIndex\n    ) => {\n\n      const _cardsFlatlist = cardByIndexGet(\n        cardsFlatlist,\n        cardIndex\n      );\n\n      if (\n        _cardsFlatlist\n      ) {\n\n        return [\n          ...memo,\n          {\n            ...card,\n            gifyUrl: _cardsFlatlist.gifyUrl\n          }\n        ];\n      }\n\n      return [\n        ...memo,\n        card\n      ];\n    },\n    []\n  );\n};\n\nexport default async (\n  deck\n) => {\n\n  let cardsFlatlist = cardsForGifyGet(\n    deck.cards\n  );\n\n  cardsFlatlist = await cardsFlatlistGifyUrlAssignedGet(\n    cardsFlatlist\n  );\n\n  const cards = cardsGifyUrlAssignedGet(\n    cardsFlatlist,\n    deck.cards\n  );\n\n  return {\n    ...deck,\n    cards\n  };\n};\n"],"file":"deckGifyUrlsAssignedGet.js"}