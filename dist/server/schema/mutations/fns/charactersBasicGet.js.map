{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/charactersBasicGet.js"],"names":["plotCharactersGet","plot","reduce","memo","sentence","Set","text","castCharactersFlatlistGet","cast","_castMemo","_cast","castIndex","castCharacters","role","castCharacterMemo","possessive","match","RegExp","trim","roleIndex","index","characterStringMatchedGet","plotCharacter","castCharacter","characterLevenMatchedGet","character","characterTokenizedGet","map","characterFragmentMatchedGet","_character","tokensSource","characterTokenCombinations","characterTokenCombination","join","characterToken","find","__charactersGetFn","characterText","_charactersGetFn","charactersGetFn","plotCharacters","characters","charactersSortedGet","sort","a","b","characterExistsGet","exists","charactersUniqueMatchesGet","charactersGet","charactersCastDataAssignedGet"],"mappings":"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","sourcesContent":["'use strict';\n\nimport leven from 'leven';\nimport combinations from 'combinations';\n\nimport NNPsGet from './NNPsGet';\nimport wordsTokenizedGet from './wordsTokenizedGet';\n\nconst plotCharactersGet = (\n  plot\n) => {\n\n  return plot.reduce(\n    (\n      memo,\n      sentence\n    ) => {\n\n      return [\n        ...new Set(\n          [\n            ...memo,\n            ...NNPsGet(\n              sentence.text\n            )\n          ]\n        )\n      ];\n    },\n    []\n  );\n};\n\nconst castCharactersFlatlistGet = (\n  cast\n) => {\n\n  return cast.reduce(\n    (\n      _castMemo,\n      _cast,\n      castIndex\n    ) => {\n\n      const castCharacters = NNPsGet(\n        _cast.role\n      )\n        .reduce(\n          (\n            castCharacterMemo,\n            text\n          ) => {\n\n            const possessive = !!_cast.role\n              .match(\n                new RegExp(\n                  `\n                    ${\n                      text\n                    }'s\n                  `\n                    .trim()\n                )\n              );\n\n            return [\n              ...castCharacterMemo,\n              {\n                text,\n                castIndex,\n                roleIndex: _cast.role\n                  .match(\n                    text\n                  )\n                  .index,\n                possessive\n              }\n            ];\n          },\n          []\n        );\n\n      return [\n        ..._castMemo,\n        ...castCharacters\n      ];\n    },\n    []\n  );\n};\n\nconst characterStringMatchedGet = (\n  plotCharacter,\n  castCharacter\n) => {\n\n  return (\n    plotCharacter ===\n    castCharacter\n  ) ?\n    plotCharacter :\n    null;\n};\n\nconst characterLevenMatchedGet = (\n  plotCharacter,\n  castCharacter\n) => {\n\n  const character = (\n    leven(\n      plotCharacter,\n      castCharacter\n    ) === 1\n  ) ?\n    plotCharacter :\n    null;\n\n  return (\n    character\n  );\n};\n\nconst characterTokenizedGet = (\n  character\n) => {\n\n  return wordsTokenizedGet(\n    character\n  )\n    .map(\n      (\n        {\n          text\n        }\n      ) => {\n\n        return (\n          text\n        );\n      }\n    );\n};\n\nconst characterFragmentMatchedGet = (\n  character,\n  _character,\n  tokensSource\n) => {\n\n  const characterTokenCombinations = combinations(\n    characterTokenizedGet(\n      _character\n    )\n  )\n    .reduce(\n      (\n        memo,\n        characterTokenCombination\n      ) => {\n\n        return [\n          ...memo,\n          characterTokenCombination.join(\n            ' '\n          )\n        ];\n      },\n      []\n    );\n\n  const characterToken = characterTokenCombinations.find(\n    (\n      characterToken\n    ) => {\n\n      return (\n        characterToken ===\n        character\n      );\n    }\n  );\n\n  if (\n    !characterToken\n  ) {\n\n    return (\n      null\n    );\n  }\n\n  return (\n    tokensSource === \n    'castCharacter'\n  ) ?\n    character :\n    _character;\n};\n\nconst __charactersGetFn = (\n  plotCharacter,\n  castCharacter\n) => {\n\n  let characterText;\n\n  switch (\n    true\n  ) {\n\n    case (\n      (\n        characterText = characterStringMatchedGet(\n          plotCharacter,\n          castCharacter\n        )\n      ) &&\n      !!characterText\n    ) :\n    case (\n      (\n        characterText = characterLevenMatchedGet(\n          plotCharacter,\n          castCharacter\n        )\n      ) &&\n      !!characterText\n    ) :\n    case (\n      (\n        characterText = characterFragmentMatchedGet(\n          plotCharacter,\n          castCharacter,\n          'castCharacter'\n        )\n      ) &&\n      !!characterText\n    ) :\n    case (\n      (\n        characterText = characterFragmentMatchedGet(\n          castCharacter,\n          plotCharacter,\n          'plotCharacter'\n        )\n      ) &&\n      !!characterText\n    ) :\n\n      return (\n        plotCharacter\n      );\n  }\n};\n\nconst _charactersGetFn = (\n  plotCharacter,\n  castCharacters\n) => {\n\n  const character = castCharacters.reduce(\n    (\n      memo,\n      castCharacter\n    ) => {\n\n      const characterText = __charactersGetFn(\n        plotCharacter,\n        castCharacter.text\n      );\n\n      if (\n        !memo &&\n        characterText\n      ) {\n\n        return {\n          ...castCharacter,\n          text: characterText\n        };\n      }\n\n      return (\n        memo\n      );\n    },\n    null\n  );\n\n  return (\n    character\n  );\n};\n\nconst charactersGetFn = (\n  plotCharacters,\n  castCharacters\n) => {\n\n  const characters = plotCharacters.reduce(\n    (\n      memo,\n      plotCharacter\n    ) => {\n\n      let character = _charactersGetFn(\n        plotCharacter,\n        castCharacters\n      );\n\n      if (\n        character\n      ) {\n\n        return [\n          ...memo,\n          character\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n\n  return (\n    characters\n  );\n};\n\nconst charactersSortedGet = (\n  castCharacters\n) => {\n\n  return castCharacters.sort(\n    (\n      a, b\n    ) => {\n\n      switch (\n        true\n      ) {\n\n        case (\n          a.possessive &&\n          !b.possessive\n        ) :\n\n          return 1;\n\n        case (\n          b.possessive &&\n          !a.possessive\n        ) :\n\n          return -1;\n\n        case (\n          a.roleIndex >\n          b.roleIndex\n        ) :\n\n          return 1;\n\n        case (\n          b.roleIndex >\n          a.roleIndex\n        ) :\n\n          return -1;\n\n        case (\n          a.castIndex >\n          b.castIndex\n        ) :\n\n          return 1;\n\n        case (\n          b.castIndex >\n          a.castIndex\n        ) :\n\n          return -1;\n      }\n    }\n  );\n};\n\nconst characterExistsGet = (\n  character,\n  characters\n) => {\n\n  return characters.reduce(\n    (\n      memo,\n      _character\n    ) => {\n\n      const exists = (\n        character.text ===\n        _character.text\n      );\n\n      if (\n        !memo &&\n        exists\n      ) {\n\n        return (\n          true\n        );\n      }\n\n      return (\n        memo\n      );\n    },\n    false\n  );\n};\n\nconst charactersUniqueMatchesGet = (\n  castCharacters\n) => {\n\n  return castCharacters.reduce(\n    (\n      memo,\n      castCharacter\n    ) => {\n\n      const exists = characterExistsGet(\n        castCharacter,\n        memo\n      );\n\n      if (\n        !exists\n      ) {\n\n        return [\n          ...memo,\n          castCharacter\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n};\n\nconst charactersGet = (\n  cast,\n  plotCharacters\n) => {\n\n  const castCharacters = castCharactersFlatlistGet(\n    cast\n  );\n\n  let characters = charactersGetFn(\n    plotCharacters,\n    castCharacters\n  );\n\n  characters = charactersSortedGet(\n    characters\n  );\n\n  characters = charactersUniqueMatchesGet(\n    characters\n  );\n\n  return (\n    characters\n  );\n};\n\nconst charactersCastDataAssignedGet = (\n  characters,\n  cast\n) => {\n\n  return characters.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      return [\n        ...memo,\n        {\n          ...character,\n          ...cast[\n            character.castIndex\n          ]\n        }\n      ];\n    },\n    []\n  )\n    .map(\n      (\n        character\n      ) => {\n\n        delete character.roleIndex;\n\n        return (\n          character\n        );\n      }\n    );\n};\n\nexport default (\n  cast,\n  plot\n) => {\n\n  const plotCharacters = plotCharactersGet(\n    plot\n  );\n\n  let characters = charactersGet(\n    cast,\n    plotCharacters\n  );\n\n  characters = charactersCastDataAssignedGet(\n    characters,\n    cast\n  );\n\n  return (\n    characters\n  );\n};\n"],"file":"charactersBasicGet.js"}