{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/charactersBasicGet.js"],"names":["_charactersGetFn","plotCharacter","castCharacters","character","reduce","memo","castCharacter","match","text","NNPCrossMatchesGet","plotCharacters","characters","charactersSortedGet","sort","a","b","possessive","distance","castIndex","characterExistsGet","_character","exists","charactersUniqueMatchesGet","charactersCastDataAssignedGet","cast","map","plot"],"mappings":"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","sourcesContent":["'use strict';\n\nimport plotNNPsGet from './plotNNPsGet';\nimport castNNPsGet from './castNNPsGet';\nimport NNPCrossMatchGet from './NNPCrossMatchGet';\n\nconst _charactersGetFn = (\n  plotCharacter,\n  castCharacters\n) => {\n\n  const character = castCharacters.reduce(\n    (\n      memo,\n      castCharacter\n    ) => {\n\n      const match = NNPCrossMatchGet(\n        plotCharacter.text,\n        castCharacter.text\n      );\n\n      if (\n        !memo &&\n        match\n      ) {\n\n        return {\n          ...castCharacter,\n          ...match\n        };\n      }\n\n      return (\n        memo\n      );\n    },\n    null\n  );\n\n  return (\n    character\n  );\n};\n\nconst NNPCrossMatchesGet = (\n  plotCharacters,\n  castCharacters\n) => {\n\n  const characters = plotCharacters.reduce(\n    (\n      memo,\n      plotCharacter\n    ) => {\n\n      let character = _charactersGetFn(\n        plotCharacter,\n        castCharacters\n      );\n\n      if (\n        character\n      ) {\n\n        return [\n          ...memo,\n          character\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n\n  return (\n    characters\n  );\n};\nconst charactersSortedGet = (\n  castCharacters\n) => {\n\n  return castCharacters.sort(\n    (\n      a, b\n    ) => {\n\n      switch (\n        true\n      ) {\n\n        case (\n          a.possessive &&\n          !b.possessive\n        ) :\n\n          return 1;\n\n        case (\n          b.possessive &&\n          !a.possessive\n        ) :\n\n          return -1;\n\n        case (\n          a.distance >\n          b.distance\n        ) :\n\n          return 1;\n\n        case (\n          b.distance >\n          a.distance\n        ) :\n\n          return -1;\n\n        case (\n          a.castIndex >\n          b.castIndex\n        ) :\n\n          return 1;\n\n        case (\n          b.castIndex >\n          a.castIndex\n        ) :\n\n          return -1;\n      }\n    }\n  );\n};\n\nconst characterExistsGet = (\n  character,\n  characters\n) => {\n\n  return characters.reduce(\n    (\n      memo,\n      _character\n    ) => {\n\n      const exists = (\n        character.text ===\n        _character.text\n      );\n\n      if (\n        !memo &&\n        exists\n      ) {\n\n        return (\n          true\n        );\n      }\n\n      return (\n        memo\n      );\n    },\n    false\n  );\n};\n\nconst charactersUniqueMatchesGet = (\n  castCharacters\n) => {\n\n  return castCharacters.reduce(\n    (\n      memo,\n      castCharacter\n    ) => {\n\n      const exists = characterExistsGet(\n        castCharacter,\n        memo\n      );\n\n      if (\n        !exists\n      ) {\n\n        return [\n          ...memo,\n          castCharacter\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n};\n\nconst charactersCastDataAssignedGet = (\n  characters,\n  cast\n) => {\n\n  return characters.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      return [\n        ...memo,\n        {\n          ...character,\n          ...cast[\n            character.castIndex\n          ]\n        }\n      ];\n    },\n    []\n  )\n    .map(\n      (\n        character\n      ) => {\n\n        delete character.distance;\n\n        return (\n          character\n        );\n      }\n    );\n};\n\nexport default (\n  cast,\n  plot\n) => {\n\n  const plotCharacters = plotNNPsGet(\n    plot\n  );\n\n  const castCharacters = castNNPsGet(\n    cast\n  );\n\n  let characters = NNPCrossMatchesGet(\n    plotCharacters,\n    castCharacters\n  );\n\n  characters = charactersSortedGet(\n    characters\n  );\n\n  characters = charactersUniqueMatchesGet(\n    characters\n  );\n\n  characters = charactersCastDataAssignedGet(\n    characters,\n    cast\n  );\n\n  return (\n    characters\n  );\n};\n"],"file":"charactersBasicGet.js"}