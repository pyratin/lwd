{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/charactersMetaRoleAssignedGet.js"],"names":["_NNPsGet","characters","map","index","text","roleExistsGet","character","NNP","_NNPs","matches","charactersRoleMatchIndexAssignedGet","reduce","memo","match","roleMatchIndex","_NNPIndex","castIndex","starringIndex","dualRoleIndex","findIndex","_memo","characterGroupsGet","characterGroups","slice","filter","characterGroup","characterGroupsSortedByCastIndexGet","sort","a","b","characterGroupsOrderedGet","_characterGroups","heroGroups","find","actor","gender","role","heroineGroups","length","villainGroups","otherGroups","characterGroupCastIndex","heroCastIndex","heroineCastIndex","villainCastIndex","manGroups","womanGroups","unknownGroups","charactersGet","roleGroupIndex","charactersRoleAssignedGet","_characters","title"],"mappings":"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","sourcesContent":["'use strict';\n\nimport charactersMetaRoleVillainAssignedGet\n  from './charactersMetaRoleVillainAssignedGet';\nimport NNPCrossMatchesGet from './NNPCrossMatchesGet';\nimport charactersSortedByStarringIndexGet \n  from './charactersSortedByStarringIndexGet';\n\nconst _NNPsGet = (\n  characters\n) => {\n\n  return characters.map(\n    (\n      {\n        text\n      },\n      index\n    ) => {\n\n      return {\n        text,\n        index\n      };\n    }\n  );\n};\n\nconst roleExistsGet = (\n  character,\n  characters\n) => {\n\n  const NNP = {\n    text: character.text,\n    index: 0\n  };\n\n  const _NNPs = _NNPsGet(\n    characters\n  );\n\n  const matches = NNPCrossMatchesGet(\n    NNP,\n    _NNPs\n  );\n\n  return matches?.[\n    0\n  ];\n};\n\nconst charactersRoleMatchIndexAssignedGet = (\n  characters\n) => {\n\n  return characters.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      const match = roleExistsGet(\n        character,\n        memo\n      );\n\n      const roleMatchIndex = (\n        match &&\n        (\n          memo[\n            match._NNPIndex\n          ]\n            .castIndex ===\n          character.castIndex\n        ) &&\n        (\n          memo[\n            match._NNPIndex\n          ]\n            .roleMatchIndex ===\n          -1\n        )\n      ) ?\n        memo[\n          match._NNPIndex\n        ]\n          .starringIndex :\n        -1;\n\n      const dualRoleIndex = (\n        !match\n      ) ?\n        memo.findIndex(\n          (\n            _memo\n          ) => {\n\n            return (\n              (\n                _memo.dualRoleIndex === \n                -1\n              ) &&\n              (\n                _memo.castIndex ===\n                character.castIndex\n              )\n            );\n          }\n        ) :\n        -1;\n\n      return [\n        ...memo,\n        {\n          ...character,\n          roleMatchIndex,\n          dualRoleIndex\n        }\n      ];\n    },\n    []\n  );\n};\n\nconst characterGroupsGet = (\n  characters\n) => {\n\n  let characterGroups = characters.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      const roleMatchIndex = character.roleMatchIndex;\n\n      if (\n        roleMatchIndex >=\n        0\n      ) {\n\n        return [\n          ...memo.slice(\n            0, roleMatchIndex\n          ),\n          [\n            ...memo[\n              roleMatchIndex\n            ],\n            character\n          ],\n          ...memo.slice(\n            roleMatchIndex + 1\n          ),\n          null\n        ];\n      }\n\n      return [\n        ...memo,\n        [\n          character\n        ]\n      ];\n    },\n    []\n  );\n\n  characterGroups = characterGroups.filter(\n    (\n      characterGroup\n    ) => {\n\n      return (\n        characterGroup\n      );\n    }\n  );\n\n  return (\n    characterGroups\n  );\n};\n\nconst characterGroupsSortedByCastIndexGet = (\n  characterGroups\n) => {\n\n  return characterGroups.sort(\n    (\n      a, b\n    ) => {\n\n      switch (\n        true\n      ) {\n\n        case (\n          a[0].castIndex >\n          b[0].castIndex\n        ) :\n\n          return 1;\n\n        case (\n          b[0].castIndex >\n          a[0].castIndex\n        ) :\n\n          return -1;\n      }\n    }\n  );\n};\n\nconst characterGroupsOrderedGet = (\n  _characterGroups\n) => {\n\n  let characterGroups = \n  characterGroupsSortedByCastIndexGet(\n    _characterGroups\n  );\n\n  let heroGroups = characterGroups.reduce(\n    (\n      memo,\n      characterGroup\n    ) => {\n\n      const match = characterGroup.find(\n        (\n          character\n        ) => {\n\n          return (\n            !character.castIndex &&\n            (\n              character.actor.gender ===\n              'man'\n            )\n          );\n        }\n      );\n\n      if (\n        match\n      ) {\n\n        return [\n          ...memo,\n          characterGroup.map(\n            (\n              character\n            ) => {\n\n              return {\n                ...character,\n                role: 'hero'\n              };\n            }\n          )\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n\n  let heroineGroups = characterGroups.reduce(\n    (\n      memo,\n      characterGroup\n    ) => {\n\n      if (\n        !memo.length &&\n        (\n          characterGroup[\n            0\n          ]\n            .actor.gender ===\n            'woman'\n        )\n      ) {\n\n        return [\n          ...memo,\n          characterGroup.map(\n            (\n              character\n            ) => {\n\n              return {\n                ...character,\n                role: 'heroine'\n              };\n            }\n          )\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n\n  let villainGroups = characterGroups.reduce(\n    (\n      memo,\n      characterGroup\n    ) => {\n\n      const match = characterGroup.find(\n        (\n          character\n        ) => {\n\n          return (\n            character.role ===\n            'villain'\n          );\n        }\n      );\n\n      if (\n        match\n      ) {\n\n        return [\n          ...memo,\n          characterGroup.map(\n            (\n              character\n            ) => {\n\n              return {\n                ...character,\n                role: 'villain'\n              };\n            }\n          )\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n\n  const otherGroups = characterGroups.filter(\n    (\n      characterGroup\n    ) => {\n\n      const characterGroupCastIndex = characterGroup[\n        0\n      ]\n        .castIndex;\n\n      const heroCastIndex = heroGroups[\n        0\n      ]?.[\n        0\n      ]?.castIndex;\n\n      const heroineCastIndex = heroineGroups[\n        0\n      ]?.[\n        0\n      ]?.castIndex;\n\n      const villainCastIndex = villainGroups[\n        0\n      ]?.[\n        0\n      ]?.castIndex;\n\n      return (\n        (\n          characterGroupCastIndex !==\n          heroCastIndex\n        ) &&\n        (\n          characterGroupCastIndex !==\n          heroineCastIndex\n        ) &&\n        (\n          characterGroupCastIndex !==\n          villainCastIndex\n        )\n      );\n    }\n  );\n\n  const manGroups = otherGroups.reduce(\n    (\n      memo,\n      characterGroup\n    ) => {\n\n      const match = characterGroup.find(\n        (\n          character\n        ) => {\n\n          return (\n            character.actor.gender ===\n            'man'\n          );\n        }\n      );\n\n      if (\n        match\n      ) {\n\n        return [\n          ...memo,\n          characterGroup.map(\n            (\n              character\n            ) => {\n\n              return {\n                ...character,\n                role: 'man'\n              };\n            }\n          )\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n\n  const womanGroups = otherGroups.reduce(\n    (\n      memo,\n      characterGroup\n    ) => {\n\n      const match = characterGroup.find(\n        (\n          character\n        ) => {\n\n          return (\n            character.actor.gender ===\n            'woman'\n          );\n        }\n      );\n\n      if (\n        match\n      ) {\n\n        return [\n          ...memo,\n          characterGroup.map(\n            (\n              character\n            ) => {\n\n              return {\n                ...character,\n                role: 'woman'\n              };\n            }\n          )\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n\n  const unknownGroups = otherGroups.reduce(\n    (\n      memo,\n      characterGroup\n    ) => {\n\n      const match = characterGroup.find(\n        (\n          character\n        ) => {\n\n          return (\n            character.actor.gender ===\n            'unknown'\n          );\n        }\n      );\n\n      if (\n        match\n      ) {\n\n        return [\n          ...memo,\n          characterGroup.map(\n            (\n              character\n            ) => {\n\n              return {\n                ...character,\n                role: 'unknown'\n              };\n            }\n          )\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n\n  return [\n    heroGroups,\n    heroineGroups,\n    villainGroups,\n    manGroups,\n    womanGroups,\n    unknownGroups\n  ];\n};\n\nconst charactersGet = (\n  characterGroups\n) => {\n\n  return characterGroups.reduce(\n    (\n      memo,\n      _characterGroups\n    ) => {\n\n      const characters = _characterGroups.reduce(\n        (\n          memo,\n          characterGroup,\n          roleGroupIndex\n        ) => {\n\n          return [\n            ...memo,\n            ...characterGroup.reduce(\n              (\n                memo,\n                character\n              ) => {\n\n                return [\n                  ...memo,\n                  {\n                    ...character,\n                    roleGroupIndex\n                  }\n                ];\n              },\n              []\n            )\n          ];\n        },\n        []\n      );\n\n      return [\n        ...memo,\n        ...characters\n      ];\n    },\n    []\n  );\n};\n\nconst charactersRoleAssignedGet = async (\n  _characters,\n  title\n) => {\n\n  let characters = \n  await charactersMetaRoleVillainAssignedGet(\n    _characters,\n    title\n  );\n\n  let characterGroups = characterGroupsGet(\n    characters\n  );\n\n  characterGroups = characterGroupsOrderedGet(\n    characterGroups\n  );\n\n  characters = charactersGet(\n    characterGroups\n  );\n\n  characters = charactersSortedByStarringIndexGet(\n    characters\n  );\n\n  return (\n    characters\n  );\n};\n\nexport default async (\n  _characters,\n  title\n) => {\n\n  let characters = charactersRoleMatchIndexAssignedGet(\n    _characters\n  );\n\n  characters = await charactersRoleAssignedGet(\n    characters,\n    title\n  );\n\n  return (\n    characters\n  );\n};\n"],"file":"charactersMetaRoleAssignedGet.js"}