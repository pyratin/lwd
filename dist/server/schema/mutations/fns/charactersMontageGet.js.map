{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/charactersMontageGet.js"],"names":["charactersBase64AssignedGetFn","character","db","render","Promise","resolve","_id","ObjectID","actorImageId","undefined","then","base64","charactersBase64AssignedGet","characters","reduce","memo","res","result","characterBase64sGet","renderText","trim","charactersCompositedBase64Get","characterStreamsConcated","direction","reject","proc","split","_command","encoding","error","stdout","pipe","stdin","charactersMontageGet","length","characterBase64s","characterRows","characterBase64","index","slice","characterBase64Row","characterRowStreams","characterRowStream","characterRowCompositedBase64s","characterRowCompositedStreams","charactersCompositedBase64","_characters","charactersMontageBase64"],"mappings":"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","sourcesContent":["'use strict';\n\nimport {\n  ObjectID\n} from 'mongodb';\nimport {\n  exec\n} from 'child_process';\n\nimport {\n  actorImageFindOne\n} from '~/js/server/data/actorImage';\nimport {\n  outputResGet\n} from '~/js/server/fns/variable';\nimport base64TextCompositedGet from './base64TextCompositedGet';\nimport base64MiffStreamsConcatedGet from \n  './base64MiffStreamsConcatedGet';\n\nconst charactersBase64AssignedGetFn = (\n  character,\n  db\n) => {\n\n  if (\n    !character.render\n  ) {\n\n    return Promise.resolve(\n      null\n    );\n  }\n\n  return actorImageFindOne(\n    {\n      _id: new ObjectID(\n        character.actorImageId\n      )\n    },\n    undefined,\n    db\n  )\n    .then(\n      (\n        {\n          base64\n        }\n      ) => {\n\n        return (\n          base64\n        );\n      }\n    );\n};\n\nconst charactersBase64AssignedGet = (\n  characters,\n  db\n) => {\n\n  return characters.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      return memo.then(\n        (\n          res\n        ) => {\n\n          return charactersBase64AssignedGetFn(\n            character,\n            db\n          )\n            .then(\n              (\n                result\n              ) => {\n\n                if (\n                  result\n                ) {\n\n                  return [\n                    ...res,\n                    {\n                      ...character,\n                      base64: result\n                    }\n                  ];\n                }\n\n                return [\n                  ...res,\n                  character\n                ];\n              }\n            );\n        }\n      );\n    },\n    Promise.resolve(\n      []\n    )\n  );\n};\n\nconst characterBase64sGet = (\n  characters\n) => {\n\n  return characters.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      return memo.then(\n        (\n          res\n        ) => {\n\n          if (\n            character.render\n          ) {\n\n            return base64TextCompositedGet(\n              character.base64,\n              `\n                ${\n                  character.renderText\n                }\n              `\n                .trim(),\n              outputResGet() / 3.5,\n              46,\n              5\n            )\n              .then(\n                (\n                  result\n                ) => {\n\n                  return [\n                    ...res,\n                    result\n                  ];\n                }\n              );\n          }\n\n          return (\n            res\n          );\n        }\n      );\n    },\n    Promise.resolve(\n      []\n    )\n  );\n};\n\nconst charactersCompositedBase64Get = (\n  characterStreamsConcated,\n  direction = 'row'\n) => {\n\n  return new Promise(\n    (\n      resolve,\n      reject\n    ) => {\n\n      const proc = exec(\n        `\n          convert \n          \\\\(\n            miff:-\n            -bordercolor transparent\n            -border ${\n              (direction === 'row') ?\n                '2x0' : '0x2'\n            }\n            -gravity south\n            -background none\n            ${\n              (direction === 'row') ?\n                '+' : '-'\n            }append\n          \\\\)\n          png:-\n        `\n          .split(\n            /\\s/\n          )\n          .reduce(\n            (\n              memo,\n              _command\n            ) => {\n\n              return `\n                ${\n                  memo\n                } ${\n                  _command\n                }\n              `\n                .trim();\n            },\n            ''\n          ),\n        {\n          encoding: 'base64'\n        },\n        (\n          error,\n          stdout\n        ) => {\n\n          if (\n            error\n          ) {\n\n            return reject(\n              error\n            );\n          }\n\n          return resolve(\n            `\n              data:image/png;base64,${\n                stdout\n              }\n            `\n              .trim()\n          );\n        }\n      );\n\n      characterStreamsConcated.pipe(\n        proc.stdin\n      );\n    }\n  );\n};\n\nconst charactersMontageGet = async (\n  characters\n) => {\n\n  if (\n    !characters.length\n  ) {\n\n    return Promise.resolve(\n      null\n    );\n  }\n\n  const characterBase64s = await characterBase64sGet(\n    characters\n  );\n\n  const characterRows = characterBase64s.reduce(\n    (\n      memo,\n      characterBase64,\n      index\n    ) => {\n\n      if (\n        index % 2\n      ) {\n\n        return [\n          ...memo.slice(\n            0, -1\n          ),\n          [\n            ...memo[\n              memo.length - 1\n            ], \n            characterBase64\n          ]\n        ];\n      }\n\n      return [\n        ...memo,\n        [\n          characterBase64\n        ]\n      ];\n    },\n    []\n  );\n\n  const characterRowStreams = await characterRows.reduce(\n    (\n      memo,\n      characterBase64Row\n    ) => {\n\n      return memo.then(\n        (\n          res\n        ) => {\n\n          return base64MiffStreamsConcatedGet(\n            characterBase64Row\n          )\n            .then(\n              (\n                result\n              ) => {\n\n                return [\n                  ...res,\n                  result\n                ];\n              }\n            );\n        }\n      );\n    },\n    Promise.resolve(\n      []\n    )\n  );\n\n  const characterRowCompositedBase64s = \n    await characterRowStreams.reduce(\n      (\n        memo,\n        characterRowStream\n      ) => {\n\n        return memo.then(\n          (\n            res\n          ) => {\n\n            return charactersCompositedBase64Get(\n              characterRowStream,\n              'row'\n            )\n              .then(\n                (\n                  result\n                ) => {\n\n                  return [\n                    ...res,\n                    result\n                  ];\n                }\n              );\n          }\n        );\n      },\n      Promise.resolve(\n        []\n      )\n    );\n\n  const characterRowCompositedStreams = \n    await base64MiffStreamsConcatedGet(\n      characterRowCompositedBase64s\n    );\n\n  const charactersCompositedBase64 = \n    await charactersCompositedBase64Get(\n      characterRowCompositedStreams,\n      'column'\n    );\n\n  return (\n    charactersCompositedBase64\n  );\n};\n\nexport default async (\n  _characters,\n  db\n) => {\n\n  let characters = await charactersBase64AssignedGet(\n    _characters,\n    db\n  );\n\n  const charactersMontageBase64 = \n    await charactersMontageGet(\n      characters\n    );\n\n  return (\n    charactersMontageBase64\n  );\n};\n"],"file":"charactersMontageGet.js"}