{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/charactersMontageGet.js"],"names":["charactersGet","characters","cards","reduce","memo","character","card","find","text","base64","characterIndexGet","findIndex","_character","actor","characterTextShortenedGet","_text","lengthMax","tokens","map","token","length","trim","charactersConcatedGet","_characters","characterIndex","slice","characterBase64sGet","then","res","result","Promise","resolve","charactersCompositedBase64Get","characterStreamsConcated","direction","reject","proc","split","_command","encoding","error","stdout","pipe","stdin","charactersMontageGet","characterBase64s","characterRows","characterBase64","index","characterBase64Row","characterRowStreams","characterRowStream","characterRowCompositedBase64s","characterRowCompositedStreams","charactersCompositedBase64","charactersMontageBase64"],"mappings":"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","sourcesContent":["'use strict';\n\nimport {\n  exec\n} from 'child_process';\n\nimport wordsTokenizedGet from './wordsTokenizedGet';\nimport {\n  outputResGet\n} from '~/js/server/fns/variable';\nimport base64TextCompositedGet from './base64TextCompositedGet';\nimport base64MiffStreamsConcatedGet from \n  './base64MiffStreamsConcatedGet';\n\nconst charactersGet = (\n  characters,\n  cards\n) => {\n\n  return characters.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      const card = cards.find(\n        (\n          card\n        ) => {\n\n          return (\n            card.character ===\n            character.text\n          );\n        }\n      );\n\n      if (\n        card\n      ) {\n\n        return [\n          ...memo,\n          {\n            ...character,\n            base64: card.base64\n          }\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n};\n\nconst characterIndexGet = (\n  character,\n  characters\n) => {\n\n  return characters.findIndex(\n    (\n      _character\n    ) => {\n\n      return (\n        _character.actor.text ===\n        character.actor.text\n      );\n    }\n  );\n};\n\nconst characterTextShortenedGet = (\n  _text,\n  lengthMax\n) => {\n\n  const tokens = wordsTokenizedGet(\n    _text\n  )\n    .map(\n      (\n        {\n          text\n        }\n      ) => {\n\n        return (\n          text\n        );\n      }\n    );\n\n  let text = tokens.reduce(\n    (\n      memo,\n      token\n    ) => {\n\n      if (\n        memo.length < \n        lengthMax\n      ) {\n\n        return `\n          ${\n            memo\n          } ${\n            token\n          }\n        `\n          .trim();\n      }\n\n      return (\n        memo\n      );\n    },\n    ''\n  );\n\n  if (\n    text.length <\n    _text.length\n  ) {\n\n    text = `\n      ${\n        text\n      } ...\n    `\n      .trim();\n  }\n\n  return (\n    text\n  );\n};\n\nconst charactersConcatedGet = (\n  _characters\n) => {\n\n  const lengthMax = 10;\n\n  let characters = _characters.reduce(\n    (\n      memo,\n      _character\n    ) => {\n\n      const text = characterTextShortenedGet(\n        _character.text,\n        lengthMax\n      );\n\n      return [\n        ...memo,\n        {\n          ..._character,\n          text\n        }\n      ];\n    },\n    []\n  );\n\n  characters = characters.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      const characterIndex = characterIndexGet(\n        character,\n        memo\n      );\n\n      if (\n        characterIndex >= \n        0\n      ) {\n\n        const lengthMax = 5;\n\n        const text = `\n          ${\n            characterTextShortenedGet(\n              memo[\n                characterIndex\n              ]\n                .text,\n              lengthMax\n            )\n          } / ${\n            characterTextShortenedGet(\n              character.text,\n              lengthMax\n            )\n          }\n        `\n          .trim();\n\n        return [\n          ...memo.slice(\n            0, characterIndex\n          ),\n          {\n            ...memo[\n              characterIndex\n            ],\n            text\n          },\n          ...memo.slice(\n            characterIndex + 1\n          )\n        ];\n      }\n\n      return [\n        ...memo,\n        character\n      ];\n    },\n    []\n  );\n\n  return (\n    characters\n  );\n};\n\nconst characterBase64sGet = (\n  characters\n) => {\n\n  return characters.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      return memo.then(\n        (\n          res\n        ) => {\n\n          return base64TextCompositedGet(\n            character.base64,\n            `\n              ${\n                character.text\n              }\n            `\n              .trim(),\n            outputResGet() / 3.5,\n            50,\n            10\n          )\n            .then(\n              (\n                result\n              ) => {\n\n                return [\n                  ...res,\n                  result\n                ];\n              }\n            );\n        }\n      );\n    },\n    Promise.resolve(\n      []\n    )\n  );\n};\n\nconst charactersCompositedBase64Get = (\n  characterStreamsConcated,\n  direction = 'row'\n) => {\n\n  return new Promise(\n    (\n      resolve,\n      reject\n    ) => {\n\n      const proc = exec(\n        `\n          convert \n          \\\\(\n            miff:-\n            -bordercolor transparent\n            -border ${\n              (direction === 'row') ?\n                '2x0' : '0x2'\n            }\n            -gravity south\n            -background none\n            ${\n              (direction === 'row') ?\n                '+' : '-'\n            }append\n          \\\\)\n          png:-\n        `\n          .split(\n            /\\s/\n          )\n          .reduce(\n            (\n              memo,\n              _command\n            ) => {\n\n              return `\n                ${\n                  memo\n                } ${\n                  _command\n                }\n              `\n                .trim();\n            },\n            ''\n          ),\n        {\n          encoding: 'base64'\n        },\n        (\n          error,\n          stdout\n        ) => {\n\n          if (\n            error\n          ) {\n\n            return reject(\n              error\n            );\n          }\n\n          return resolve(\n            `\n              data:image/png;base64,${\n                stdout\n              }\n            `\n              .trim()\n          );\n        }\n      );\n\n      characterStreamsConcated.pipe(\n        proc.stdin\n      );\n    }\n  );\n};\n\nconst charactersMontageGet = async (\n  characters\n) => {\n\n  if (\n    !characters.length\n  ) {\n\n    return Promise.resolve(\n      null\n    );\n  }\n\n  const characterBase64s = await characterBase64sGet(\n    characters\n  );\n\n  const characterRows = characterBase64s.reduce(\n    (\n      memo,\n      characterBase64,\n      index\n    ) => {\n\n      if (\n        index % 2\n      ) {\n\n        return [\n          ...memo.slice(\n            0, -1\n          ),\n          [\n            ...memo[\n              memo.length - 1\n            ], \n            characterBase64\n          ]\n        ];\n      }\n\n      return [\n        ...memo,\n        [\n          characterBase64\n        ]\n      ];\n    },\n    []\n  );\n\n  const characterRowStreams = await characterRows.reduce(\n    (\n      memo,\n      characterBase64Row\n    ) => {\n\n      return memo.then(\n        (\n          res\n        ) => {\n\n          return base64MiffStreamsConcatedGet(\n            characterBase64Row\n          )\n            .then(\n              (\n                result\n              ) => {\n\n                return [\n                  ...res,\n                  result\n                ];\n              }\n            );\n        }\n      );\n    },\n    Promise.resolve(\n      []\n    )\n  );\n\n  const characterRowCompositedBase64s = \n    await characterRowStreams.reduce(\n      (\n        memo,\n        characterRowStream\n      ) => {\n\n        return memo.then(\n          (\n            res\n          ) => {\n\n            return charactersCompositedBase64Get(\n              characterRowStream,\n              'row'\n            )\n              .then(\n                (\n                  result\n                ) => {\n\n                  return [\n                    ...res,\n                    result\n                  ];\n                }\n              );\n          }\n        );\n      },\n      Promise.resolve(\n        []\n      )\n    );\n\n  const characterRowCompositedStreams = \n    await base64MiffStreamsConcatedGet(\n      characterRowCompositedBase64s\n    );\n\n  const charactersCompositedBase64 = \n    await charactersCompositedBase64Get(\n      characterRowCompositedStreams,\n      'column'\n    );\n\n  return (\n    charactersCompositedBase64\n  );\n};\n\nexport default async (\n  _characters,\n  cards\n) => {\n\n  let characters = charactersGet(\n    _characters,\n    cards\n  );\n\n  characters = charactersConcatedGet(\n    characters\n  );\n\n  const charactersMontageBase64 = \n    await charactersMontageGet(\n      characters\n    );\n\n  return (\n    charactersMontageBase64\n  );\n};\n"],"file":"charactersMontageGet.js"}