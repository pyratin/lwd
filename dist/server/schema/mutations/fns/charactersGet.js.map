{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/charactersGet.js"],"names":["matchesDataAssignedGet","matches","_NNPs","__NNPs","reduce","memo","_cross","NNP","NNPIndex","_NNP","_NNPIndex","matchesSortedGet","sort","a","b","possessive","_distance","NNPmatchIndex","castIndex","matchExistsGet","match","_matches","find","_match","matchText","text","_matchText","matchesUniqueGet","exists","charactersGet","cast","character","actor","plot","plotText","NNPs","characters"],"mappings":"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","sourcesContent":["'use strict';\n\nimport plotNNPsGet from './plotNNPsGet';\nimport castNNPsGet from './castNNPsGet';\nimport NNPsCrossMatchesGet from './NNPsCrossMatchesGet';\nimport charactersCulledByCategoryGet\n  from './charactersCulledByCategoryGet';\n\nconst matchesDataAssignedGet = (\n  matches,\n  _NNPs,\n  __NNPs\n) => {\n\n  return matches.reduce(\n    (\n      memo,\n      _cross\n    ) => {\n\n      const NNP = _NNPs[\n        _cross.NNPIndex\n      ];\n\n      const _NNP = __NNPs[\n        _cross._NNPIndex\n      ];\n\n      return [\n        ...memo,\n        {\n          _cross,\n          NNP,\n          _NNP\n        }\n      ];\n    },\n    []\n  );\n};\n\nconst matchesSortedGet = (\n  matches\n) => {\n\n  return matches.sort(\n    (\n      a, b\n    ) => {\n\n      switch (\n        true\n      ) {\n\n        case (\n          a._NNP.possessive &&\n          !b._NNP.possessive\n        ) :\n\n          return 1;\n\n        case (\n          b._NNP.possessive &&\n          !a._NNP.possessive\n        ) :\n\n          return -1;\n\n        case (\n          a._NNP._distance >\n          b._NNP._distance\n        ) :\n\n          return 1;\n\n        case (\n          b._NNP._distance >\n          a._NNP._distance\n        ) :\n\n          return -1;\n\n        case(\n          a._cross.NNPmatchIndex >\n          b._cross.NNPmatchIndex\n        ) :\n\n          return 1;\n\n        case (\n          b._cross.NNPmatchIndex >\n          a._cross.NNPmatchIndex\n        ) :\n\n          return -1;\n\n        case (\n          a._NNP.castIndex >\n          b._NNP.castIndex\n        ) :\n\n          return 1;\n\n        case (\n          b._NNP.castIndex >\n          a._NNP.castIndex\n        ) :\n\n          return -1;\n      }\n    }\n  );\n};\n\nconst matchExistsGet = (\n  match,\n  _matches\n) => {\n\n  return _matches.find(\n    (\n      _match\n    ) => {\n\n      const matchText = match._cross.text;\n\n      const _matchText = _match._cross.text;\n\n      return (\n        (\n          _matchText ===\n          matchText\n        )\n      );\n    }\n  );\n};\n\nconst matchesUniqueGet = (\n  matches\n) => {\n\n  return matches.reduce(\n    (\n      memo,\n      match\n    ) => {\n\n      const exists = matchExistsGet(\n        match,\n        memo\n      );\n\n      if (\n        !exists\n      ) {\n\n        return [\n          ...memo,\n          match\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n};\n\nconst charactersGet = (\n  matches,\n  cast\n) => {\n\n  return matches.reduce(\n    (\n      memo,\n      {\n        _cross: {\n          text\n        },\n        _NNP: {\n          castIndex\n        }\n      }\n    ) => {\n\n      const character = {\n        text,\n        actor: cast[\n          castIndex\n        ]\n          .actor,\n        castIndex\n      };\n\n      return [\n        ...memo,\n        character\n      ];\n    },\n    []\n  );\n};\n\nexport default async (\n  cast,\n  plot,\n  plotText\n) => {\n\n  const NNPs = plotNNPsGet(\n    plot\n  );\n\n  const _NNPs = castNNPsGet(\n    cast\n  );\n\n  let matches = NNPsCrossMatchesGet(\n    NNPs,\n    _NNPs,\n    false\n  );\n\n  matches = matchesDataAssignedGet(\n    matches,\n    NNPs,\n    _NNPs\n  );\n\n  matches = matchesSortedGet(\n    matches\n  );\n\n  matches = matchesUniqueGet(\n    matches\n  );\n\n  let characters = charactersGet(\n    matches,\n    cast\n  );\n\n  characters = await charactersCulledByCategoryGet(\n    characters,\n    plotText\n  );\n\n  return (\n    characters\n  );\n};\n"],"file":"charactersGet.js"}