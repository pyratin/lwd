{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/cardsActorReplacedGet.js"],"names":["shuffledGet","els","reduce","memo","el","random","Math","sort","a","b","map","starringActorExistsGet","starringActor","starringActors","find","_starringActor","text","starringActorsFlatlistGetFn","card","actor","character","starringActorsFlatlistGet","cards","setRandomForGenreGet","genre","db","undefined","then","genreId","_id","_genreId","ObjectID","sets","floor","length","setId","spoofActorWeightAssignedGetFn","spoofActor","spoofActorsPrevious","_spoofActorsPrevious","index","toString","count","distance","_setId","genreMatch","spoofActorPrevious","setMatch","spoofActorWeightAssignedGet","_spoofActors","_spoofActor","result","res","Promise","resolve","spoofActors","spoofActorsSortedGet","spoofActorsGetFn","setGeneralId","gender","$ne","spoofActorsGet","actorText","cardCharactersGet","cardIndex","cardCharacter","spoofActorByTextGet","charactersActorAssignedGet","characters","characterActorText","_actor","actorImageIdsPreviousGet","charactersPrevious","actorImageId","actorImageIdWeightGet","actorImageIdsPrevious","_actorImageIdsPrevious","actorImageIdWeightAssignedGet","weight","actorImageIdsSortedByWeightGet","actorImageIds","actorImageIdsWeightAssigned","charactersActorImageAssignedGetFn","_actorId","projection","skip","limit","actorImages","base64","charactersActorImageAssignedGet","characterByCardIndexGet","cardsCharacterAssignedGet","_cards"],"mappings":"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","sourcesContent":["'use strict';\n\nimport {\n  ObjectID\n} from 'mongodb';\n\nimport {\n  genreFindOne\n} from '~/js/server/data/genre';\nimport {\n  setsFind,\n  setFindOne\n} from '~/js/server/data/set';\nimport {\n  actorsFind as actorsFindFn\n} from '~/js/server/data/actor';\nimport {\n  actorImagesFind,\n  actorImageFindOne\n} from '~/js/server/data/actorImage';\n\nconst shuffledGet = (\n  els\n) => {\n\n  return els.reduce(\n    (\n      memo,\n      el\n    ) => {\n\n      return [\n        ...memo,\n        {\n          el,\n          random: Math.random()\n        }\n      ];\n    },\n    []\n  )\n    .sort(\n      (\n        a, b\n      ) => {\n\n        switch (\n          true\n        ) {\n\n          case (\n            a.random >\n            b.random\n          ) :\n\n            return 1;\n\n          case (\n            b.random >\n            a.random\n          ) :\n\n            return -1;\n        }\n      }\n    )\n    .map(\n      (\n        {\n          el\n        }\n      ) => {\n\n        return (\n          el\n        );\n      }\n    );\n};\n\nconst starringActorExistsGet = (\n  starringActor,\n  starringActors\n) => {\n\n  return starringActors.find(\n    (\n      _starringActor\n    ) => {\n\n      return (\n        _starringActor.text ===\n        starringActor.text\n      );\n    }\n  );\n};\n\nconst starringActorsFlatlistGetFn = (\n  card\n) => {\n\n  const actor = card.character?.actor;\n\n  return (\n    actor\n  ) ?\n    actor :\n    null;\n};\n\nconst starringActorsFlatlistGet = (\n  cards\n) => {\n\n  return cards.reduce(\n    (\n      memo,\n      card\n    ) => {\n\n      const starringActor = starringActorsFlatlistGetFn(\n        card\n      );\n\n      if (\n        starringActor &&\n        !starringActorExistsGet(\n          starringActor,\n          memo\n        )\n      ) {\n\n        return [\n          ...memo,\n          starringActor\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n};\n\nconst setRandomForGenreGet = (\n  genre,\n  db\n) => {\n\n  return genreFindOne(\n    {\n      text: genre\n    },\n    undefined,\n    db\n  )\n    .then(\n      (\n        {\n          _id: genreId\n        }\n      ) => {\n\n        return setsFind(\n          {\n            _genreId: new ObjectID(\n              genreId\n            )\n          },\n          undefined,\n          db\n        );\n      }\n    )\n    .then(\n      (\n        sets\n      ) => {\n\n        return sets[\n          Math.floor(\n            Math.random() *\n            sets.length\n          )\n        ];\n      }\n    )\n    .then(\n      (\n        {\n          _id: setId\n        }\n      ) => {\n\n        return (\n          setId\n        );\n      }\n    );\n};\n\nconst spoofActorWeightAssignedGetFn = async (\n  spoofActor,\n  _genreId,\n  spoofActorsPrevious,\n  db\n) => {\n\n  const {\n    count,\n    distance\n  } = spoofActorsPrevious.reduce(\n    (\n      memo,\n      _spoofActorsPrevious,\n      index\n    ) => {\n\n      if (\n        _spoofActorsPrevious._id.toString() ===\n        spoofActor._id.toString()\n      ) {\n\n        return {\n          count: memo.count + 1,\n          distance: spoofActorsPrevious.length - (\n            index + 1\n          )\n        };\n      }\n\n      return (\n        memo\n      );\n    },\n    {\n      count: 0,\n      distance: spoofActorsPrevious.length\n    }\n  );\n\n  const genreId = (\n    await setFindOne(\n      {\n        _id: new ObjectID(\n          spoofActor._setId\n        )\n      },\n      undefined,\n      db\n    )\n  )?._genreId;\n\n  const genreMatch = (\n    _genreId?.toString() ===\n    genreId?.toString()\n  );\n\n  const spoofActorPrevious = spoofActorsPrevious[\n    spoofActorsPrevious.length - 1\n  ];\n\n  const _setId = (\n    spoofActorPrevious\n  ) ?\n    spoofActorPrevious._setId :\n    null;\n\n  const setMatch = (\n    _setId?.toString() ===\n    spoofActor._setId\n      .toString()\n  );\n\n  return {\n    ...spoofActor,\n    count,\n    distance,\n    genreMatch,\n    setMatch\n  };\n};\n\nconst spoofActorWeightAssignedGet = async (\n  _spoofActors,\n  genreId,\n  spoofActorsPrevious,\n  db\n) => {\n\n  const spoofActors = await _spoofActors.reduce(\n    (\n      memo,\n      _spoofActor\n    ) => {\n\n      return memo.then(\n        (\n          result\n        ) => {\n\n          return spoofActorWeightAssignedGetFn(\n            _spoofActor,\n            genreId,\n            spoofActorsPrevious,\n            db\n          )\n            .then(\n              (\n                res\n              ) => {\n\n                return [\n                  ...result,\n                  res\n                ];\n              }\n            );\n        }\n      );\n    },\n    Promise.resolve(\n      []\n    )\n  );\n\n  return (\n    spoofActors\n  );\n};\n\nconst spoofActorsSortedGet = (\n  spoofActors\n) => {\n\n  return spoofActors.sort(\n    (\n      a, b\n    ) => {\n\n      switch (\n        true\n      ) {\n\n        case (\n          a.count >\n          b.count\n        ) :\n\n          return 1;\n\n        case (\n          b.count >\n          a.count\n        ) :\n\n          return -1;\n\n        case (\n          a.distance >\n          b.distance\n        ) :\n\n          return -1;\n\n        case (\n          b.distance >\n          a.distance\n        ) :\n\n          return 1;\n\n        case (\n          a.genreMatch &&\n          !b.genreMatch\n        ) :\n\n          return -1;\n\n        case (\n          b.genreMatch &&\n          !a.genreMatch\n        ) :\n\n          return 1;\n\n        case (\n          a.setMatch &&\n          !b.setMatch\n        ) :\n\n          return -1;\n\n        case (\n          b.setMatch &&\n          !a.setMatch\n        ) :\n\n          return 1;\n      }\n    }\n  )\n    .map(\n      (\n        spoofActor\n      ) => {\n\n        delete spoofActor.count;\n\n        return (\n          spoofActor\n        );\n      }\n    );\n};\n\nconst spoofActorsGetFn = async (\n  starringActor,\n  genreId,\n  setGeneralId,\n  spoofActorsPrevious,\n  db\n) => {\n\n  const gender = starringActor.gender;\n\n  let spoofActors;\n\n  spoofActors = await actorsFindFn(\n    {\n      _setId: {\n        $ne: new ObjectID(\n          setGeneralId\n        )\n      },\n      gender\n    },\n    undefined,\n    db\n  );\n\n  if (\n    !spoofActors.length\n  ) {\n\n    spoofActors = await actorsFindFn(\n      {\n        _setId: new ObjectID(\n          setGeneralId\n        ),\n        gender\n      },\n      undefined,\n      db\n    );\n  }\n\n  spoofActors = shuffledGet(\n    spoofActors\n  );\n\n  spoofActors = await spoofActorWeightAssignedGet(\n    spoofActors,\n    genreId,\n    spoofActorsPrevious,\n    db\n  );\n\n  spoofActors = spoofActorsSortedGet(\n    spoofActors,\n    spoofActorsPrevious\n  );\n\n  const spoofActor = spoofActors[\n    0\n  ];\n\n  return (\n    spoofActor\n  );\n};\n\nconst spoofActorsGet = async (\n  starringActors,\n  genre,\n  db\n) => {\n\n  const genreId = (\n    await genreFindOne(\n      {\n        text: genre\n      },\n      undefined,\n      db\n    )\n  )?._id;\n\n  const setGeneralId = await setRandomForGenreGet(\n    'general',\n    db\n  );\n\n  return starringActors.reduce(\n    (\n      memo,\n      starringActor\n    ) => {\n\n      return memo.then(\n        (\n          res\n        ) => {\n\n          return spoofActorsGetFn(\n            starringActor,\n            genreId,\n            setGeneralId,\n            res,\n            db\n          )\n            .then(\n              (\n                result\n              ) => {\n\n                return [\n                  ...res,\n                  {\n                    ...result,\n                    actorText: starringActor.text\n                  }\n                ];\n              }\n            );\n        }\n      );\n    },\n    Promise.resolve(\n      []\n    )\n  );\n};\n\nconst cardCharactersGet = (\n  cards\n) => {\n\n  return cards.reduce(\n    (\n      memo,\n      card,\n      cardIndex\n    ) => {\n\n      const cardCharacter = card.character;\n\n      if (\n        cardCharacter\n      ) {\n\n        return [\n          ...memo,\n          {\n            ...cardCharacter,\n            cardIndex\n          }\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n};\n\nconst spoofActorByTextGet = (\n  actorText,\n  spoofActors\n) => {\n\n  return spoofActors.find(\n    (\n      spoofActor\n    ) => {\n\n      return (\n        spoofActor.actorText ===\n        actorText\n      );\n    }\n  );\n};\n\nconst charactersActorAssignedGet = (\n  characters,\n  spoofActors\n) => {\n\n  return characters.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      const characterActorText = character.actor.text;\n\n      if (\n        characterActorText\n      ) {\n\n        const spoofActor = spoofActorByTextGet(\n          characterActorText,\n          spoofActors\n        );\n\n        return [\n          ...memo,\n          {\n            ...character,\n            _actor: spoofActor\n          }\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n};\n\nconst actorImageIdsPreviousGet = (\n  charactersPrevious\n) => {\n\n  return charactersPrevious.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      const actorImageId = character?.actorImageId;\n\n      if (\n        actorImageId\n      ) {\n\n        return [\n          ...memo,\n          actorImageId\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n};\n\nconst actorImageIdWeightGet = (\n  actorImageId,\n  actorImageIdsPrevious\n) => {\n\n  return actorImageIdsPrevious.reduce(\n    (\n      memo,\n      _actorImageIdsPrevious,\n      index\n    ) => {\n\n      if (\n        _actorImageIdsPrevious.toString() ===\n        actorImageId.toString()\n      ) {\n\n        return {\n          count: memo.count + 1,\n          distance: actorImageIdsPrevious.length - (\n            index + 1\n          )\n        };\n      }\n\n      return (\n        memo\n      );\n    },\n    {\n      count: 0,\n      distance: actorImageIdsPrevious.length\n    }\n  );\n};\n\nconst actorImageIdWeightAssignedGet = (\n  actorImageId,\n  actorImageIdsPrevious\n) => {\n\n  const weight = actorImageIdWeightGet(\n    actorImageId,\n    actorImageIdsPrevious\n  );\n\n  return {\n    actorImageId,\n    ...weight\n  };\n};\n\nconst actorImageIdsSortedByWeightGet = (\n  actorImageIds,\n  actorImageIdsPrevious\n) => {\n\n  const actorImageIdsWeightAssigned = actorImageIds.reduce(\n    (\n      memo,\n      actorImageId\n    ) => {\n\n      return [\n        ...memo,\n        actorImageIdWeightAssignedGet(\n          actorImageId,\n          actorImageIdsPrevious\n        )\n      ];\n    },\n    []\n  );\n\n  return actorImageIdsWeightAssigned.sort(\n    (\n      a, b\n    ) => {\n\n      switch (\n        true\n      ) {\n\n        case (\n          a.count >\n          b.count\n        ) :\n\n          return 1;\n\n        case (\n          b.count >\n          a.count\n        ) :\n\n          return -1;\n\n        case (\n          a.distance >\n          b.distance\n        ) :\n\n          return -1;\n\n        case (\n          b.distance >\n          a.distance\n        ) :\n\n          return 1;\n      }\n    }\n  )\n    .map(\n      (\n        {\n          actorImageId\n        }\n      ) => {\n\n        return (\n          actorImageId\n        );\n      }\n    );\n};\n\nconst charactersActorImageAssignedGetFn = async (\n  character,\n  charactersPrevious,\n  db\n) => {\n\n  const actorImageIdsPrevious = actorImageIdsPreviousGet(\n    charactersPrevious\n  );\n\n  let actorImageIds = await actorImagesFind(\n    {\n      _actorId: new ObjectID(\n        character._actor._id\n      )\n    },\n    {\n      projection: {\n        _id: 1\n      },\n      sort: {},\n      skip: 0,\n      limit: 0\n    },\n    db\n  )\n    .then(\n      (\n        actorImages\n      ) => {\n\n        return actorImages.map(\n          (\n            {\n              _id: actorImageId\n            }\n          ) => {\n\n            return (\n              actorImageId.toString()\n            );\n          }\n        );\n      }\n    );\n\n  actorImageIds = shuffledGet(\n    actorImageIds\n  );\n\n  actorImageIds = actorImageIdsSortedByWeightGet(\n    actorImageIds,\n    actorImageIdsPrevious\n  );\n\n  const actorImageId = actorImageIds[\n    0\n  ];\n\n  const {\n    base64\n  } = await actorImageFindOne(\n    {\n      _id: new ObjectID(\n        actorImageId\n      )\n    },\n    undefined,\n    db\n  );\n\n  return {\n    actorImageId,\n    base64\n  };\n};\n\nconst charactersActorImageAssignedGet = (\n  characters,\n  db\n) => {\n\n  return characters.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      return memo.then(\n        (\n          res\n        ) => {\n\n          return charactersActorImageAssignedGetFn(\n            character,\n            res,\n            db\n          )\n            .then(\n              (\n                result\n              ) => {\n\n                return [\n                  ...res,\n                  {\n                    ...character,\n                    ...result\n                  }\n                ];\n              }\n            );\n        }\n      );\n    },\n    Promise.resolve(\n      []\n    )\n  );\n};\n\nconst characterByCardIndexGet = (\n  characters,\n  cardIndex\n) => {\n\n  return characters.find(\n    (\n      character\n    ) => {\n\n      return (\n        character.cardIndex ===\n        cardIndex\n      );\n    }\n  );\n};\n\nconst cardsCharacterAssignedGet = (\n  characters,\n  cards\n) => {\n\n  return cards.reduce(\n    (\n      memo,\n      card,\n      cardIndex\n    ) => {\n\n      const character = characterByCardIndexGet(\n        characters,\n        cardIndex\n      );\n\n      if (\n        character\n      ) {\n\n        return [\n          ...memo,\n          {\n            ...card,\n            base64: character.base64,\n            character: {\n              text: character.text,\n              actor: character.actor\n            }\n          }\n        ];\n      }\n\n      return [\n        ...memo,\n        card\n      ];\n    },\n    []\n  );\n};\n\nexport default async (\n  _cards,\n  genre,\n  db\n) => {\n\n  const starringActors = starringActorsFlatlistGet(\n    _cards\n  );\n\n  const spoofActors = await spoofActorsGet(\n    starringActors,\n    genre,\n    db\n  );\n\n  let characters = cardCharactersGet(\n    _cards\n  );\n\n  characters = charactersActorAssignedGet(\n    characters,\n    spoofActors\n  );\n\n  characters = await charactersActorImageAssignedGet(\n    characters,\n    db\n  );\n\n  const cards = cardsCharacterAssignedGet(\n    characters,\n    _cards\n  ); \n\n  return (\n    cards\n  );\n};\n"],"file":"cardsActorReplacedGet.js"}