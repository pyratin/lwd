{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/cardsActorReplacedGet.js"],"names":["shuffledGet","els","reduce","memo","el","random","Math","sort","a","b","map","starringActorExistsGet","starringActor","starringActors","find","_starringActor","text","starringActorsFlatlistGetFn","card","actor","character","starringActorsFlatlistGet","cards","spoofActorWeightGet","spoofActor","spoofActorsPrevious","_spoofActorsPrevious","index","_id","toString","count","distance","length","spoofActorWeightAssignedGet","weight","spoofActorsSortedByWeightGet","spoofActors","spoofActorsWeightAssigned","setRandomForGenreGet","genre","db","undefined","then","genreId","_genreId","ObjectID","sets","floor","setId","actorsFind","gender","_setId","spoofActorsGetFn","setRandomId","setGeneralId","spoofActorsGet","res","result","actorText","Promise","resolve","cardCharactersGet","cardIndex","cardCharacter","spoofActorByTextGet","charactersActorAssignedGet","characters","characterActorText","_actor","actorImageIdsPreviousGet","charactersPrevious","actorImageId","actorImageIdWeightGet","actorImageIdsPrevious","_actorImageIdsPrevious","actorImageIdWeightAssignedGet","actorImageIdsSortedByWeightGet","actorImageIds","actorImageIdsWeightAssigned","charactersActorImageAssignedGetFn","_actorId","projection","skip","limit","actorImages","base64","charactersActorImageAssignedGet","characterByCardIndexGet","cardsCharacterAssignedGet","actorUd","ud","actorId","_cards"],"mappings":"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","sourcesContent":["'use strict';\n\nimport {\n  ObjectID\n} from 'mongodb';\n\nimport {\n  genreFindOne\n} from '~/js/server/data/genre';\nimport {\n  setsFind\n} from '~/js/server/data/set';\nimport {\n  actorsFind as actorsFindFn\n} from '~/js/server/data/actor';\nimport {\n  actorImagesFind,\n  actorImageFindOne\n} from '~/js/server/data/actorImage';\n\nconst shuffledGet = (\n  els\n) => {\n\n  return els.reduce(\n    (\n      memo,\n      el\n    ) => {\n\n      return [\n        ...memo,\n        {\n          el,\n          random: Math.random()\n        }\n      ];\n    },\n    []\n  )\n    .sort(\n      (\n        a, b\n      ) => {\n\n        switch (\n          true\n        ) {\n\n          case (\n            a.random >\n            b.random\n          ) :\n\n            return 1;\n\n          case (\n            b.random >\n            a.random\n          ) :\n\n            return -1;\n        }\n      }\n    )\n    .map(\n      (\n        {\n          el\n        }\n      ) => {\n\n        return (\n          el\n        );\n      }\n    );\n};\n\nconst starringActorExistsGet = (\n  starringActor,\n  starringActors\n) => {\n\n  return starringActors.find(\n    (\n      _starringActor\n    ) => {\n\n      return (\n        _starringActor.text ===\n        starringActor.text\n      );\n    }\n  );\n};\n\nconst starringActorsFlatlistGetFn = (\n  card\n) => {\n\n  const actor = card.character?.actor;\n\n  return (\n    actor\n  ) ?\n    actor :\n    null;\n};\n\nconst starringActorsFlatlistGet = (\n  cards\n) => {\n\n  return cards.reduce(\n    (\n      memo,\n      card\n    ) => {\n\n      const starringActor = starringActorsFlatlistGetFn(\n        card\n      );\n\n      if (\n        starringActor &&\n        !starringActorExistsGet(\n          starringActor,\n          memo\n        )\n      ) {\n\n        return [\n          ...memo,\n          starringActor\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n};\n\nconst spoofActorWeightGet = (\n  spoofActor,\n  spoofActorsPrevious\n) => {\n\n  return spoofActorsPrevious.reduce(\n    (\n      memo,\n      _spoofActorsPrevious,\n      index\n    ) => {\n\n      if (\n        _spoofActorsPrevious._id.toString() ===\n        spoofActor._id.toString()\n      ) {\n\n        return {\n          count: memo.count + 1,\n          distance: spoofActorsPrevious.length - (\n            index + 1\n          )\n        };\n      }\n\n      return (\n        memo\n      );\n    },\n    {\n      count: 0,\n      distance: spoofActorsPrevious.length\n    }\n  );\n};\n\nconst spoofActorWeightAssignedGet = (\n  spoofActor,\n  spoofActorsPrevious\n) => {\n\n  const weight = spoofActorWeightGet(\n    spoofActor,\n    spoofActorsPrevious\n  );\n\n  return {\n    ...spoofActor,\n    ...weight\n  };\n};\n\nconst spoofActorsSortedByWeightGet = (\n  spoofActors,\n  spoofActorsPrevious\n) => {\n\n  const spoofActorsWeightAssigned = spoofActors.reduce(\n    (\n      memo,\n      spoofActor\n    ) => {\n\n      return [\n        ...memo,\n        spoofActorWeightAssignedGet(\n          spoofActor,\n          spoofActorsPrevious\n        )\n      ];\n    },\n    []\n  );\n\n  return spoofActorsWeightAssigned.sort(\n    (\n      a, b\n    ) => {\n\n      switch (\n        true\n      ) {\n\n        case (\n          a.count >\n          b.count\n        ) :\n\n          return 1;\n\n        case (\n          b.count >\n          a.count\n        ) :\n\n          return -1;\n\n        case (\n          a.distance >\n          b.distance\n        ) :\n\n          return -1;\n\n        case (\n          b.distance >\n          a.distance\n        ) :\n\n          return 1;\n      }\n    }\n  )\n    .map(\n      (\n        spoofActor\n      ) => {\n\n        delete spoofActor.count;\n\n        return (\n          spoofActor\n        );\n      }\n    );\n};\n\nconst setRandomForGenreGet = (\n  genre,\n  db\n) => {\n\n  return genreFindOne(\n    {\n      text: genre\n    },\n    undefined,\n    db\n  )\n    .then(\n      (\n        {\n          _id: genreId\n        }\n      ) => {\n\n        return setsFind(\n          {\n            _genreId: new ObjectID(\n              genreId\n            )\n          },\n          undefined,\n          db\n        );\n      }\n    )\n    .then(\n      (\n        sets\n      ) => {\n\n        return sets[\n          Math.floor(\n            Math.random() *\n            sets.length\n          )\n        ];\n      }\n    )\n    .then(\n      (\n        {\n          _id: setId\n        }\n      ) => {\n\n        return (\n          setId\n        );\n      }\n    );\n};\n\nconst actorsFind = (\n  setId,\n  gender,\n  db\n) => {\n\n  return actorsFindFn(\n    {\n      _setId: new ObjectID(\n        setId\n      ),\n      gender\n    },\n    undefined,\n    db\n  );\n};\n\nconst spoofActorsGetFn = async (\n  starringActor,\n  setRandomId,\n  setGeneralId,\n  spoofActorsPrevious,\n  db\n) => {\n\n  const gender = starringActor.gender;\n\n  let spoofActors = await actorsFind(\n    setRandomId,\n    gender,\n    db\n  );\n\n  if (\n    !spoofActors.length\n  ) {\n\n    spoofActors = await actorsFind(\n      setGeneralId,\n      gender,\n      db\n    );\n  }\n\n  spoofActors = shuffledGet(\n    spoofActors\n  );\n\n  spoofActors = spoofActorsSortedByWeightGet(\n    spoofActors,\n    spoofActorsPrevious\n  );\n\n  const spoofActor = spoofActors[\n    0\n  ];\n\n  return (\n    spoofActor\n  );\n};\n\nconst spoofActorsGet = async (\n  starringActors,\n  genre,\n  db\n) => {\n\n  const setRandomId = await setRandomForGenreGet(\n    genre,\n    db\n  );\n\n  const setGeneralId = await setRandomForGenreGet(\n    'general',\n    db\n  );\n\n  return starringActors.reduce(\n    (\n      memo,\n      starringActor\n    ) => {\n\n      return memo.then(\n        (\n          res\n        ) => {\n\n          return spoofActorsGetFn(\n            starringActor,\n            setRandomId,\n            setGeneralId,\n            res,\n            db\n          )\n            .then(\n              (\n                result\n              ) => {\n\n                return [\n                  ...res,\n                  {\n                    ...result,\n                    actorText: starringActor.text\n                  }\n                ];\n              }\n            );\n        }\n      );\n    },\n    Promise.resolve(\n      []\n    )\n  );\n};\n\nconst cardCharactersGet = (\n  cards\n) => {\n\n  return cards.reduce(\n    (\n      memo,\n      card,\n      cardIndex\n    ) => {\n\n      const cardCharacter = card.character;\n\n      if (\n        cardCharacter\n      ) {\n\n        return [\n          ...memo,\n          {\n            ...cardCharacter,\n            cardIndex\n          }\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n};\n\nconst spoofActorByTextGet = (\n  actorText,\n  spoofActors\n) => {\n\n  return spoofActors.find(\n    (\n      spoofActor\n    ) => {\n\n      return (\n        spoofActor.actorText ===\n        actorText\n      );\n    }\n  );\n};\n\nconst charactersActorAssignedGet = (\n  characters,\n  spoofActors\n) => {\n\n  return characters.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      const characterActorText = character.actor.text;\n\n      if (\n        characterActorText\n      ) {\n\n        const spoofActor = spoofActorByTextGet(\n          characterActorText,\n          spoofActors\n        );\n\n        return [\n          ...memo,\n          {\n            ...character,\n            _actor: spoofActor\n          }\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n};\n\nconst actorImageIdsPreviousGet = (\n  charactersPrevious\n) => {\n\n  return charactersPrevious.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      const actorImageId = character?.actorImageId;\n\n      if (\n        actorImageId\n      ) {\n\n        return [\n          ...memo,\n          actorImageId\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n};\n\nconst actorImageIdWeightGet = (\n  actorImageId,\n  actorImageIdsPrevious\n) => {\n\n  return actorImageIdsPrevious.reduce(\n    (\n      memo,\n      _actorImageIdsPrevious,\n      index\n    ) => {\n\n      if (\n        _actorImageIdsPrevious.toString() ===\n        actorImageId.toString()\n      ) {\n\n        return {\n          count: memo.count + 1,\n          distance: actorImageIdsPrevious.length - (\n            index + 1\n          )\n        };\n      }\n\n      return (\n        memo\n      );\n    },\n    {\n      count: 0,\n      distance: actorImageIdsPrevious.length\n    }\n  );\n};\n\nconst actorImageIdWeightAssignedGet = (\n  actorImageId,\n  actorImageIdsPrevious\n) => {\n\n  const weight = actorImageIdWeightGet(\n    actorImageId,\n    actorImageIdsPrevious\n  );\n\n  return {\n    actorImageId,\n    ...weight\n  };\n};\n\nconst actorImageIdsSortedByWeightGet = (\n  actorImageIds,\n  actorImageIdsPrevious\n) => {\n\n  const actorImageIdsWeightAssigned = actorImageIds.reduce(\n    (\n      memo,\n      actorImageId\n    ) => {\n\n      return [\n        ...memo,\n        actorImageIdWeightAssignedGet(\n          actorImageId,\n          actorImageIdsPrevious\n        )\n      ];\n    },\n    []\n  );\n\n  return actorImageIdsWeightAssigned.sort(\n    (\n      a, b\n    ) => {\n\n      switch (\n        true\n      ) {\n\n        case (\n          a.count >\n          b.count\n        ) :\n\n          return 1;\n\n        case (\n          b.count >\n          a.count\n        ) :\n\n          return -1;\n\n        case (\n          a.distance >\n          b.distance\n        ) :\n\n          return -1;\n\n        case (\n          b.distance >\n          a.distance\n        ) :\n\n          return 1;\n      }\n    }\n  )\n    .map(\n      (\n        {\n          actorImageId\n        }\n      ) => {\n\n        return (\n          actorImageId\n        );\n      }\n    );\n};\n\nconst charactersActorImageAssignedGetFn = async (\n  character,\n  charactersPrevious,\n  db\n) => {\n\n  const actorImageIdsPrevious = actorImageIdsPreviousGet(\n    charactersPrevious\n  );\n\n  let actorImageIds = await actorImagesFind(\n    {\n      _actorId: new ObjectID(\n        character._actor._id\n      )\n    },\n    {\n      projection: {\n        _id: 1\n      },\n      sort: {},\n      skip: 0,\n      limit: 0\n    },\n    db\n  )\n    .then(\n      (\n        actorImages\n      ) => {\n\n        return actorImages.map(\n          (\n            {\n              _id: actorImageId\n            }\n          ) => {\n\n            return (\n              actorImageId.toString()\n            );\n          }\n        );\n      }\n    );\n\n  actorImageIds = shuffledGet(\n    actorImageIds\n  );\n\n  actorImageIds = actorImageIdsSortedByWeightGet(\n    actorImageIds,\n    actorImageIdsPrevious\n  );\n\n  const actorImageId = actorImageIds[\n    0\n  ];\n\n  const {\n    base64\n  } = await actorImageFindOne(\n    {\n      _id: new ObjectID(\n        actorImageId\n      )\n    },\n    undefined,\n    db\n  );\n\n  return {\n    actorImageId,\n    base64\n  };\n};\n\nconst charactersActorImageAssignedGet = (\n  characters,\n  db\n) => {\n\n  return characters.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      return memo.then(\n        (\n          res\n        ) => {\n\n          return charactersActorImageAssignedGetFn(\n            character,\n            res,\n            db\n          )\n            .then(\n              (\n                result\n              ) => {\n\n                return [\n                  ...res,\n                  {\n                    ...character,\n                    ...result\n                  }\n                ];\n              }\n            );\n        }\n      );\n    },\n    Promise.resolve(\n      []\n    )\n  );\n};\n\nconst characterByCardIndexGet = (\n  characters,\n  cardIndex\n) => {\n\n  return characters.find(\n    (\n      character\n    ) => {\n\n      return (\n        character.cardIndex ===\n        cardIndex\n      );\n    }\n  );\n};\n\nconst cardsCharacterAssignedGet = (\n  characters,\n  cards\n) => {\n\n  return cards.reduce(\n    (\n      memo,\n      card,\n      cardIndex\n    ) => {\n\n      const character = characterByCardIndexGet(\n        characters,\n        cardIndex\n      );\n\n      if (\n        character\n      ) {\n\n        return [\n          ...memo,\n          {\n            ...card,\n            character: character.text,\n            base64: character.base64,\n            actorUd: character.actor.ud,\n            actorId: character._actor._id\n          }\n        ];\n      }\n\n      return [\n        ...memo,\n        card\n      ];\n    },\n    []\n  );\n};\n\nexport default async (\n  _cards,\n  genre,\n  db\n) => {\n\n  const starringActors = starringActorsFlatlistGet(\n    _cards\n  );\n\n  const spoofActors = await spoofActorsGet(\n    starringActors,\n    genre,\n    db\n  );\n\n  let characters = cardCharactersGet(\n    _cards\n  );\n\n  characters = charactersActorAssignedGet(\n    characters,\n    spoofActors\n  );\n\n  characters = await charactersActorImageAssignedGet(\n    characters,\n    db\n  );\n\n  const cards = cardsCharacterAssignedGet(\n    characters,\n    _cards\n  ); \n\n  return (\n    cards\n  );\n};\n"],"file":"cardsActorReplacedGet.js"}