{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/cardsActorReplacedGet.js"],"names":["shuffledGet","els","reduce","memo","el","random","Math","sort","a","b","map","starringActorExistsGet","starringActor","starringActors","find","_starringActor","ud","starringActorsFlatlistGetFn","card","actor","character","starringActorsFlatlistGet","cards","spoofActorWeightGet","spoofActor","spoofActorsPrevious","_spoofActorsPrevious","index","_id","toString","count","distance","length","spoofActorWeightAssignedGet","weight","spoofActorsSortedByWeightGet","spoofActors","spoofActorsWeightAssigned","spoofActorsGetFn","db","gender","spoofActorsGet","then","res","result","actorText","text","Promise","resolve","cardCharactersGet","cardIndex","cardCharacter","spoofActorByTextGet","charactersActorsAssignedGet","characters","characterActorText","_actor","actorImageIdsPreviousGet","charactersPrevious","actorImageId","actorImageIdWeightGet","actorImageIdsPrevious","_actorImageIdsPrevious","actorImageIdWeightAssignedGet","actorImageIdsSortedByWeightGet","actorImageIds","actorImageIdsWeightAssigned","charactersActorImageAssignedGetFn","_actorId","ObjectID","projection","skip","limit","actorImages","base64","charactersActorImageAssignedGet","characterByCardIndexGet","cardsCharacterAssignedGet","_cards"],"mappings":"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","sourcesContent":["'use strict';\n\nimport {\n  ObjectID\n} from 'mongodb';\n\nimport {\n  actorsFind\n} from '~/js/server/data/actor';\nimport {\n  actorImagesFind,\n  actorImageFindOne\n} from '~/js/server/data/actorImage';\n\nconst shuffledGet = (\n  els\n) => {\n\n  return els.reduce(\n    (\n      memo,\n      el\n    ) => {\n\n      return [\n        ...memo,\n        {\n          el,\n          random: Math.random()\n        }\n      ];\n    },\n    []\n  )\n    .sort(\n      (\n        a, b\n      ) => {\n\n        switch (\n          true\n        ) {\n\n          case (\n            a.random >\n            b.random\n          ) :\n\n            return 1;\n\n          case (\n            b.random >\n            a.random\n          ) :\n\n            return -1;\n        }\n      }\n    )\n    .map(\n      (\n        {\n          el\n        }\n      ) => {\n\n        return (\n          el\n        );\n      }\n    );\n};\n\nconst starringActorExistsGet = (\n  starringActor,\n  starringActors\n) => {\n\n  return starringActors.find(\n    (\n      _starringActor\n    ) => {\n\n      return (\n        _starringActor.ud ===\n        starringActor.ud\n      );\n    }\n  );\n};\n\nconst starringActorsFlatlistGetFn = (\n  card\n) => {\n\n  const actor = card.character?.actor;\n\n  return (\n    actor\n  ) ?\n    {\n      ...card.character?.actor,\n    } :\n    null;\n};\n\nconst starringActorsFlatlistGet = (\n  cards\n) => {\n\n  return cards.reduce(\n    (\n      memo,\n      card\n    ) => {\n\n      const starringActor = starringActorsFlatlistGetFn(\n        card\n      );\n\n      if (\n        starringActor &&\n        !starringActorExistsGet(\n          starringActor,\n          memo\n        )\n      ) {\n\n        return [\n          ...memo,\n          starringActor\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n};\n\nconst spoofActorWeightGet = (\n  spoofActor,\n  spoofActorsPrevious\n) => {\n\n  return spoofActorsPrevious.reduce(\n    (\n      memo,\n      _spoofActorsPrevious,\n      index\n    ) => {\n\n      if (\n        _spoofActorsPrevious._id.toString() ===\n        spoofActor._id.toString()\n      ) {\n\n        return {\n          count: memo.count + 1,\n          distance: spoofActorsPrevious.length - (\n            index + 1\n          )\n        };\n      }\n\n      return (\n        memo\n      );\n    },\n    {\n      count: 0,\n      distance: spoofActorsPrevious.length\n    }\n  );\n};\n\nconst spoofActorWeightAssignedGet = (\n  spoofActor,\n  spoofActorsPrevious\n) => {\n\n  const weight = spoofActorWeightGet(\n    spoofActor,\n    spoofActorsPrevious\n  );\n\n  return {\n    ...spoofActor,\n    ...weight\n  };\n};\n\nconst spoofActorsSortedByWeightGet = (\n  spoofActors,\n  spoofActorsPrevious\n) => {\n\n  const spoofActorsWeightAssigned = spoofActors.reduce(\n    (\n      memo,\n      spoofActor\n    ) => {\n\n      return [\n        ...memo,\n        spoofActorWeightAssignedGet(\n          spoofActor,\n          spoofActorsPrevious\n        )\n      ];\n    },\n    []\n  );\n\n  return spoofActorsWeightAssigned.sort(\n    (\n      a, b\n    ) => {\n\n      switch (\n        true\n      ) {\n\n        case (\n          a.count >\n          b.count\n        ) :\n\n          return 1;\n\n        case (\n          b.count >\n          a.count\n        ) :\n\n          return -1;\n\n        case (\n          a.distance >\n          b.distance\n        ) :\n\n          return -1;\n\n        case (\n          b.distance >\n          a.distance\n        ) :\n\n          return 1;\n      }\n    }\n  )\n    .map(\n      (\n        spoofActor\n      ) => {\n\n        delete spoofActor.count;\n\n        return (\n          spoofActor\n        );\n      }\n    );\n};\n\nconst spoofActorsGetFn = async (\n  starringActor,\n  spoofActorsPrevious,\n  db\n) => {\n\n  let spoofActors = await actorsFind(\n    {\n      gender: starringActor.gender\n    },\n    null,\n    db\n  );\n\n  spoofActors = shuffledGet(\n    spoofActors\n  );\n\n  spoofActors = spoofActorsSortedByWeightGet(\n    spoofActors,\n    spoofActorsPrevious\n  );\n\n  const spoofActor = spoofActors[\n    0\n  ];\n\n  return (\n    spoofActor\n  );\n};\n\nconst spoofActorsGet = (\n  starringActors,\n  db\n) => {\n\n  return starringActors.reduce(\n    (\n      memo,\n      starringActor\n    ) => {\n\n      return memo.then(\n        (\n          res\n        ) => {\n\n          return spoofActorsGetFn(\n            starringActor,\n            res,\n            db\n          )\n            .then(\n              (\n                result\n              ) => {\n\n                return [\n                  ...res,\n                  {\n                    ...result,\n                    actorText: starringActor.text\n                  }\n                ];\n              }\n            );\n        }\n      );\n    },\n    Promise.resolve(\n      []\n    )\n  );\n};\n\nconst cardCharactersGet = (\n  cards\n) => {\n\n  return cards.reduce(\n    (\n      memo,\n      card,\n      cardIndex\n    ) => {\n\n      const cardCharacter = card.character;\n\n      if (\n        cardCharacter\n      ) {\n\n        return [\n          ...memo,\n          {\n            ...cardCharacter,\n            cardIndex\n          }\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n};\n\nconst spoofActorByTextGet = (\n  actorText,\n  spoofActors\n) => {\n\n  return spoofActors.find(\n    (\n      spoofActor\n    ) => {\n\n      return (\n        spoofActor.actorText ===\n        actorText\n      );\n    }\n  );\n};\n\nconst charactersActorsAssignedGet = (\n  characters,\n  spoofActors\n) => {\n\n  return characters.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      const characterActorText = character.actor.text;\n\n      if (\n        characterActorText\n      ) {\n\n        const spoofActor = spoofActorByTextGet(\n          characterActorText,\n          spoofActors\n        );\n\n        return [\n          ...memo,\n          {\n            ...character,\n            _actor: spoofActor\n          }\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n};\n\nconst actorImageIdsPreviousGet = (\n  charactersPrevious\n) => {\n\n  return charactersPrevious.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      const actorImageId = character?.actorImageId;\n\n      if (\n        actorImageId\n      ) {\n\n        return [\n          ...memo,\n          actorImageId\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n};\n\nconst actorImageIdWeightGet = (\n  actorImageId,\n  actorImageIdsPrevious\n) => {\n\n  return actorImageIdsPrevious.reduce(\n    (\n      memo,\n      _actorImageIdsPrevious,\n      index\n    ) => {\n\n      if (\n        _actorImageIdsPrevious.toString() ===\n        actorImageId.toString()\n      ) {\n\n        return {\n          count: memo.count + 1,\n          distance: actorImageIdsPrevious.length - (\n            index + 1\n          )\n        };\n      }\n\n      return (\n        memo\n      );\n    },\n    {\n      count: 0,\n      distance: actorImageIdsPrevious.length\n    }\n  );\n};\n\nconst actorImageIdWeightAssignedGet = (\n  actorImageId,\n  actorImageIdsPrevious\n) => {\n\n  const weight = actorImageIdWeightGet(\n    actorImageId,\n    actorImageIdsPrevious\n  );\n\n  return {\n    actorImageId,\n    ...weight\n  };\n};\n\nconst actorImageIdsSortedByWeightGet = (\n  actorImageIds,\n  actorImageIdsPrevious\n) => {\n\n  const actorImageIdsWeightAssigned = actorImageIds.reduce(\n    (\n      memo,\n      actorImageId\n    ) => {\n\n      return [\n        ...memo,\n        actorImageIdWeightAssignedGet(\n          actorImageId,\n          actorImageIdsPrevious\n        )\n      ];\n    },\n    []\n  );\n\n  return actorImageIdsWeightAssigned.sort(\n    (\n      a, b\n    ) => {\n\n      switch (\n        true\n      ) {\n\n        case (\n          a.count >\n          b.count\n        ) :\n\n          return 1;\n\n        case (\n          b.count >\n          a.count\n        ) :\n\n          return -1;\n\n        case (\n          a.distance >\n          b.distance\n        ) :\n\n          return -1;\n\n        case (\n          b.distance >\n          a.distance\n        ) :\n\n          return 1;\n      }\n    }\n  )\n    .map(\n      (\n        {\n          actorImageId\n        }\n      ) => {\n\n        return (\n          actorImageId\n        );\n      }\n    );\n};\n\nconst charactersActorImageAssignedGetFn = async (\n  character,\n  charactersPrevious,\n  db\n) => {\n\n  const actorImageIdsPrevious = actorImageIdsPreviousGet(\n    charactersPrevious\n  );\n\n  let actorImageIds = await actorImagesFind(\n    {\n      _actorId: new ObjectID(\n        character._actor._id\n      )\n    },\n    {\n      projection: {\n        _id: 1\n      },\n      sort: {},\n      skip: 0,\n      limit: 0\n    },\n    db\n  )\n    .then(\n      (\n        actorImages\n      ) => {\n\n        return actorImages.map(\n          (\n            {\n              _id: actorImageId\n            }\n          ) => {\n\n            return (\n              actorImageId.toString()\n            );\n          }\n        );\n      }\n    );\n\n  actorImageIds = shuffledGet(\n    actorImageIds\n  );\n\n  actorImageIds = actorImageIdsSortedByWeightGet(\n    actorImageIds,\n    actorImageIdsPrevious\n  );\n\n  const actorImageId = actorImageIds[\n    0\n  ];\n\n  const {\n    base64\n  } = await actorImageFindOne(\n    {\n      _id: new ObjectID(\n        actorImageId\n      )\n    },\n    null,\n    db\n  );\n\n  return {\n    actorImageId,\n    base64\n  };\n};\n\nconst charactersActorImageAssignedGet = (\n  characters,\n  db\n) => {\n\n  return characters.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      return memo.then(\n        (\n          res\n        ) => {\n\n          return charactersActorImageAssignedGetFn(\n            character,\n            res,\n            db\n          )\n            .then(\n              (\n                result\n              ) => {\n\n                return [\n                  ...res,\n                  {\n                    ...character,\n                    ...result\n                  }\n                ];\n              }\n            );\n        }\n      );\n    },\n    Promise.resolve(\n      []\n    )\n  );\n};\n\nconst characterByCardIndexGet = (\n  characters,\n  cardIndex\n) => {\n\n  return characters.find(\n    (\n      character\n    ) => {\n\n      return (\n        character.cardIndex ===\n        cardIndex\n      );\n    }\n  );\n};\n\nconst cardsCharacterAssignedGet = (\n  characters,\n  cards\n) => {\n\n  return cards.reduce(\n    (\n      memo,\n      card,\n      cardIndex\n    ) => {\n\n      const character = characterByCardIndexGet(\n        characters,\n        cardIndex\n      );\n\n      if (\n        character\n      ) {\n\n        return [\n          ...memo,\n          {\n            ...card,\n            character: character.text,\n            base64: character.base64\n          }\n        ];\n      }\n\n      return [\n        ...memo,\n        card\n      ];\n    },\n    []\n  );\n};\n\nexport default async (\n  _cards,\n  db\n) => {\n\n  const starringActors = starringActorsFlatlistGet(\n    _cards\n  );\n\n  const spoofActors = await spoofActorsGet(\n    starringActors,\n    db\n  );\n\n  let characters = cardCharactersGet(\n    _cards\n  );\n\n  characters = charactersActorsAssignedGet(\n    characters,\n    spoofActors\n  );\n\n  characters = await charactersActorImageAssignedGet(\n    characters,\n    db\n  );\n\n  const cards = cardsCharacterAssignedGet(\n    characters,\n    _cards\n  ); \n\n  return (\n    cards\n  );\n};\n"],"file":"cardsActorReplacedGet.js"}