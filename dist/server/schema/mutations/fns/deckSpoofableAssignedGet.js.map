{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/deckSpoofableAssignedGet.js"],"names":["heroExistsGet","deck","heroCharacter","splash","characters","find","character","castIndex","actor","gender","NNP","text","index","_NNPs","cards","matches","textIsLengthyGet","reduce","memo","length","heroExists","textIsLengthy","spoofable"],"mappings":"AAAA;;;;;;;;;;;AAEA;;AACA;;;;;;AAEA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CACpBC,IADoB,EAEjB;AAEH,MAAMC,aAAa,GAAGD,IAAI,CAACE,MAAL,CAAYC,UAAZ,CACnBC,IADmB,CAElB,UACEC,SADF,EAEK;AAEH,WAEIA,SAAS,CAACC,SAAV,KACA,CAFF,IAKED,SAAS,CAACE,KAAV,CAAgBC,MAAhB,KACA,KAPJ;AAUD,GAhBiB,CAAtB;AAmBA,MAAMC,GAAG,GAAG;AACVC,IAAAA,IAAI,EAAET,aAAF,aAAEA,aAAF,uBAAEA,aAAa,CAAES,IADX;AAEVC,IAAAA,KAAK,EAAE;AAFG,GAAZ;;AAKA,MAAMC,KAAK,GAAG,6BACZZ,IAAI,CAACa,KADO,CAAd;;AAIA,MAAMC,OAAO,GAAG,oCACdL,GADc,EAEdG,KAFc,CAAhB;AAKA,SACE,CAAC,CAACE,OADJ;AAGD,CAxCD;;AA0CA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CACvBf,IADuB,EAEpB;AAEH,SAAOA,IAAI,CAACa,KAAL,CACJG,MADI,CAEH,UACEC,IADF,QAKK;AAAA,QAFDP,IAEC,QAFDA,IAEC;;AAEH,QACE,CAACO,IAAD,IAEEP,IAAI,CAACQ,MAAL,GAEE,MACA,EANN,EASE;AAEA,aACE,IADF;AAGD;;AAED,WACED,IADF;AAGD,GA5BE,EA6BH,KA7BG,CAAP;AA+BD,CAnCD;;eAqCe,kBACbjB,IADa,EAEV;AAEH,MAAMmB,UAAU,GAAGpB,aAAa,CAC9BC,IAD8B,CAAhC;AAIA,MAAMoB,aAAa,GAAGL,gBAAgB,CACpCf,IADoC,CAAtC;AAIA,yCACKA,IADL;AAEEE,IAAAA,MAAM,kCACDF,IAAI,CAACE,MADJ;AAEJmB,MAAAA,SAAS,EACP,CAAC,CAACF,UAAF,IACA,CAACC;AAJC;AAFR;AAUD,C","sourcesContent":["'use strict';\n\nimport plotNNPsGet from './plotNNPsGet';\nimport NNPCrossMatchesGet from './NNPCrossMatchesGet';\n\nconst heroExistsGet = (\n  deck\n) => {\n\n  const heroCharacter = deck.splash.characters\n    .find(\n      (\n        character\n      ) => {\n\n        return (\n          (\n            character.castIndex ===\n            0\n          ) &&\n          (\n            character.actor.gender ===\n            'man'\n          )\n        );\n      }\n    );\n\n  const NNP = {\n    text: heroCharacter?.text,\n    index: 0\n  };\n\n  const _NNPs = plotNNPsGet(\n    deck.cards\n  );\n\n  const matches = NNPCrossMatchesGet(\n    NNP,\n    _NNPs\n  );\n\n  return (\n    !!matches\n  );\n};\n\nconst textIsLengthyGet = (\n  deck\n) => {\n\n  return deck.cards\n    .reduce(\n      (\n        memo,\n        {\n          text\n        }\n      ) => {\n\n        if (\n          !memo &&\n          (\n            text.length >\n            (\n              100 + \n              25\n            )\n          )\n        ) {\n\n          return (\n            true\n          );\n        }\n\n        return (\n          memo\n        );\n      },\n      false\n    );\n};\n\nexport default (\n  deck\n) => {\n\n  const heroExists = heroExistsGet(\n    deck\n  );\n\n  const textIsLengthy = textIsLengthyGet(\n    deck\n  );\n\n  return {\n    ...deck,\n    splash: {\n      ...deck.splash,\n      spoofable: (\n        !!heroExists &&\n        !textIsLengthy\n      )\n    }\n  };\n};\n"],"file":"deckSpoofableAssignedGet.js"}