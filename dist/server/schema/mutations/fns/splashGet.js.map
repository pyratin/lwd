{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/splashGet.js"],"names":["base64BlankGet","Promise","resolve","reject","fs","readFile","path","join","process","cwd","error","res","trim","moviePosterBase64GetFn","buffer","proc","split","reduce","memo","_command","encoding","stdout","stdin","write","end","moviePosterBase64Get","moviePoster","then","finalCompositedGetFn","finalCompositeMiffStreamsConcated","pipe","finalCompositedGet","movieTitle","moviePosterBase64","charactersMontageBase64","pointsize","border","splash","_characters","cards"],"mappings":"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","sourcesContent":["'use strict';\n\nimport fs from 'fs';\nimport path from 'path';\nimport nodeFetch from 'node-fetch';\nimport {\n  exec\n} from 'child_process';\n\nimport {\n  outputResGet\n} from '~/js/server/fns/variable';\nimport base64TextCompositedGet from './base64TextCompositedGet';\nimport base64MiffStreamsConcatedGet from \n  './base64MiffStreamsConcatedGet';\nimport charactersMontageGet from './charactersMontageGet';\n\nconst base64BlankGet = () => {\n\n  return new Promise(\n    (\n      resolve,\n      reject\n    ) => {\n\n      return fs.readFile(\n        path.join(\n          process.cwd(),\n          'media/blank.jpeg'\n        ),\n        'base64',\n        (\n          error,\n          res\n        ) => {\n\n          if (\n            error\n          ) {\n\n            return reject(\n              error\n            );\n          }\n\n          return resolve(\n            `\n              data:image/jpeg;base64,${\n                res\n              }\n            `\n              .trim()\n          );\n        }\n      );\n    }\n  );\n};\n\nconst moviePosterBase64GetFn = (\n  buffer\n) => {\n\n  return new Promise(\n    (\n      resolve,\n      reject\n    ) => {\n\n      const res = outputResGet();\n\n      const proc = exec(\n        `\n          convert \n          \\\\(\n            -size ${\n              res\n            }x${\n              res\n            }\n            xc:\"#000\" \n          \\\\)\n          \\\\(\n            -\n            -resize ${\n              res\n            }x${\n              res\n            }\n          \\\\)\n          -gravity center\n          -compose blend\n          -define compose:args=50\n          -composite\n          jpeg:-\n        `\n          .split(\n            /\\s/\n          )\n          .reduce(\n            (\n              memo,\n              _command\n            ) => {\n\n              return `\n                ${\n                  memo\n                } ${\n                  _command\n                }\n              `\n                .trim();\n            },\n            ''\n          ),\n        {\n          encoding: 'base64'\n        },\n        (\n          error,\n          stdout\n        ) => {\n\n          if (\n            error\n          ) {\n\n            return reject(\n              error\n            );\n          }\n\n          return resolve(\n            `\n              data:image/jpeg;base64,${\n                stdout\n              }\n            `\n              .trim()\n          );\n        }\n      );\n\n      proc.stdin.write(\n        buffer\n      );\n\n      proc.stdin.end();\n    }\n  );\n};\n\nconst moviePosterBase64Get = (\n  moviePoster\n) => {\n\n  if (\n    !moviePoster\n  ) {\n\n    return base64BlankGet();\n  }\n\n  return nodeFetch(\n    moviePoster\n  )\n    .then(\n      (\n        res\n      ) => {\n\n        return res.buffer();\n      }\n    )\n    .then(\n      (\n        buffer\n      ) => {\n\n        return moviePosterBase64GetFn(\n          buffer\n        );\n      }\n    );\n};\n\nconst finalCompositedGetFn = (\n  finalCompositeMiffStreamsConcated\n) => {\n\n  return new Promise(\n    (\n      resolve,\n      reject\n    ) => {\n\n      const proc = exec(\n        'convert miff:- -gravity north -composite jpeg:-',\n        {\n          encoding: 'base64'\n        },\n        (\n          error,\n          stdout\n        ) => {\n\n          if (\n            error\n          ) {\n\n            return reject(\n              error\n            );\n          }\n\n          return resolve(\n            `\n              data:image/jpeg;base64,${\n                stdout\n              }\n            `\n              .trim()\n          );\n        }\n      );\n\n      finalCompositeMiffStreamsConcated.pipe(\n        proc.stdin\n      );\n    }\n  );\n};\n\nconst finalCompositedGet = async (\n  movieTitle,\n  moviePosterBase64,\n  charactersMontageBase64\n) => {\n\n  const res = outputResGet();\n\n  const pointsize = 20;\n\n  const border = 10;\n\n  if (\n    !charactersMontageBase64\n  ) {\n\n    return base64TextCompositedGet(\n      moviePosterBase64,\n      movieTitle,\n      res,\n      pointsize,\n      border\n    );\n  }\n\n  const finalCompositeMiffStreamsConcated = \n    await base64MiffStreamsConcatedGet(\n      [\n        moviePosterBase64,\n        charactersMontageBase64\n      ]\n    );\n\n  let splash = await finalCompositedGetFn(\n    finalCompositeMiffStreamsConcated\n  );\n\n  splash = await base64TextCompositedGet(\n    splash,\n    movieTitle,\n    res,\n    pointsize,\n    border\n  );\n\n  return (\n    splash\n  );\n};\n\nexport default async (\n  movieTitle,\n  moviePoster,\n  _characters,\n  cards\n) => {\n\n  const moviePosterBase64 = await moviePosterBase64Get(\n    moviePoster\n  );\n\n  const charactersMontageBase64 = \n    await charactersMontageGet(\n      _characters,\n      cards\n    );\n\n  const splash = await finalCompositedGet(\n    movieTitle,\n    moviePosterBase64,\n    charactersMontageBase64\n  );\n\n  return (\n    splash\n  );\n};\n"],"file":"splashGet.js"}