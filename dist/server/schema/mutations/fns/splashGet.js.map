{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/splashGet.js"],"names":["base64BlankGet","Promise","resolve","reject","fs","readFile","path","join","process","cwd","error","res","trim","charactersGet","cards","reduce","memo","card","character","find","_memo","text","base64","moviePosterBase64GetFn","buffer","proc","split","_command","encoding","stdout","stdin","write","end","moviePosterBase64Get","moviePoster","then","characterBase64sGet","characters","result","charactersCompositedBase64Get","characterStreamsConcated","direction","pipe","charactersMontageGet","length","characterBase64s","characterRows","characterBase64","index","slice","characterBase64Row","characterRowStreams","characterRowStream","characterRowCompositedBase64s","characterRowCompositedStreams","charactersCompositedBase64","finalCompositedGetFn","finalCompositeMiffStreamsConcated","finalCompositedGet","movieTitle","moviePosterBase64","charactersMontageBase64","pointsize","border","splash"],"mappings":"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","sourcesContent":["'use strict';\n\nimport fs from 'fs';\nimport path from 'path';\nimport nodeFetch from 'node-fetch';\nimport {\n  exec\n} from 'child_process';\n\nimport {\n  outputResGet\n} from '~/js/server/fns/variable';\nimport base64TextCompositedGet from './base64TextCompositedGet';\nimport base64MiffStreamsConcatedGet from \n  './base64MiffStreamsConcatedGet';\n\nconst base64BlankGet = () => {\n\n  return new Promise(\n    (\n      resolve,\n      reject\n    ) => {\n\n      return fs.readFile(\n        path.join(\n          process.cwd(),\n          'media/blank.jpeg'\n        ),\n        'base64',\n        (\n          error,\n          res\n        ) => {\n\n          if (\n            error\n          ) {\n\n            return reject(\n              error\n            );\n          }\n\n          return resolve(\n            `\n              data:image/jpeg;base64,${\n                res\n              }\n            `\n              .trim()\n          );\n        }\n      );\n    }\n  );\n};\n\nconst charactersGet = (\n  cards\n) => {\n\n  return cards.reduce(\n    (\n      memo,\n      card\n    ) => {\n\n      if (\n        card.character &&\n        !memo.find(\n          (\n            _memo\n          ) => {\n\n            return (\n              _memo.text ===\n              card.character\n            );\n          }\n        )\n      ) {\n\n        return [\n          ...memo,\n          {\n            text: card.character,\n            base64: card.base64\n          }\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n};\n\nconst moviePosterBase64GetFn = (\n  buffer\n) => {\n\n  return new Promise(\n    (\n      resolve,\n      reject\n    ) => {\n\n      const res = outputResGet();\n\n      const proc = exec(\n        `\n          convert \n          \\\\(\n            -size ${\n              res\n            }x${\n              res\n            }\n            xc:\"#000\" \n          \\\\)\n          \\\\(\n            jpeg:-\n            -resize ${\n              res\n            }x${\n              res\n            }\n          \\\\)\n          -gravity center\n          -compose blend\n          -define compose:args=50\n          -composite\n          jpeg:-\n        `\n          .split(\n            /\\s/\n          )\n          .reduce(\n            (\n              memo,\n              _command\n            ) => {\n\n              return `\n                ${\n                  memo\n                } ${\n                  _command\n                }\n              `\n                .trim();\n            },\n            ''\n          ),\n        {\n          encoding: 'base64'\n        },\n        (\n          error,\n          stdout\n        ) => {\n\n          if (\n            error\n          ) {\n\n            return reject(\n              error\n            );\n          }\n\n          return resolve(\n            `\n              data:image/jpeg;base64,${\n                stdout\n              }\n            `\n              .trim()\n          );\n        }\n      );\n\n      proc.stdin.write(\n        buffer\n      );\n\n      proc.stdin.end();\n    }\n  );\n};\n\nconst moviePosterBase64Get = (\n  moviePoster\n) => {\n\n  if (\n    !moviePoster\n  ) {\n\n    return base64BlankGet();\n  }\n\n  return nodeFetch(\n    moviePoster\n  )\n    .then(\n      (\n        res\n      ) => {\n\n        return res.buffer();\n      }\n    )\n    .then(\n      (\n        buffer\n      ) => {\n\n        return moviePosterBase64GetFn(\n          buffer\n        );\n      }\n    );\n};\n\nconst characterBase64sGet = (\n  characters\n) => {\n\n  return characters.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      return memo.then(\n        (\n          res\n        ) => {\n\n          return base64TextCompositedGet(\n            character.base64,\n            `\n              ${\n                character.text\n              }\n            `\n              .trim(),\n            outputResGet() / 3.5,\n            50,\n            10\n          )\n            .then(\n              (\n                result\n              ) => {\n\n                return [\n                  ...res,\n                  result\n                ];\n              }\n            );\n        }\n      );\n    },\n    Promise.resolve(\n      []\n    )\n  );\n};\n\nconst charactersCompositedBase64Get = (\n  characterStreamsConcated,\n  direction = 'row'\n) => {\n\n  return new Promise(\n    (\n      resolve,\n      reject\n    ) => {\n\n      const proc = exec(\n        `\n          convert \n          \\\\(\n            miff:-\n            -bordercolor transparent\n            -border ${\n              (direction === 'row') ?\n                '2x0' : '0x2'\n            }\n            -gravity south\n            -background none\n            ${\n              (direction === 'row') ?\n                '+' : '-'\n            }append\n          \\\\)\n          png:-\n        `\n          .split(\n            /\\s/\n          )\n          .reduce(\n            (\n              memo,\n              _command\n            ) => {\n\n              return `\n                ${\n                  memo\n                } ${\n                  _command\n                }\n              `\n                .trim();\n            },\n            ''\n          ),\n        {\n          encoding: 'base64'\n        },\n        (\n          error,\n          stdout\n        ) => {\n\n          if (\n            error\n          ) {\n\n            return reject(\n              error\n            );\n          }\n\n          return resolve(\n            `\n              data:image/png;base64,${\n                stdout\n              }\n            `\n              .trim()\n          );\n        }\n      );\n\n      characterStreamsConcated.pipe(\n        proc.stdin\n      );\n    }\n  );\n};\n\nconst charactersMontageGet = async (\n  characters\n) => {\n\n  if (\n    !characters.length\n  ) {\n\n    return Promise.resolve(\n      null\n    );\n  }\n\n  const characterBase64s = await characterBase64sGet(\n    characters\n  );\n\n  const characterRows = characterBase64s.reduce(\n    (\n      memo,\n      characterBase64,\n      index\n    ) => {\n\n      if (\n        index % 2\n      ) {\n\n        return [\n          ...memo.slice(\n            0, -1\n          ),\n          [\n            ...memo[\n              memo.length - 1\n            ], \n            characterBase64\n          ]\n        ];\n      }\n\n      return [\n        ...memo,\n        [\n          characterBase64\n        ]\n      ];\n    },\n    []\n  );\n\n  const characterRowStreams = await characterRows.reduce(\n    (\n      memo,\n      characterBase64Row\n    ) => {\n\n      return memo.then(\n        (\n          res\n        ) => {\n\n          return base64MiffStreamsConcatedGet(\n            characterBase64Row\n          )\n            .then(\n              (\n                result\n              ) => {\n\n                return [\n                  ...res,\n                  result\n                ];\n              }\n            );\n        }\n      );\n    },\n    Promise.resolve(\n      []\n    )\n  );\n\n  const characterRowCompositedBase64s = \n    await characterRowStreams.reduce(\n      (\n        memo,\n        characterRowStream\n      ) => {\n\n        return memo.then(\n          (\n            res\n          ) => {\n\n            return charactersCompositedBase64Get(\n              characterRowStream,\n              'row'\n            )\n              .then(\n                (\n                  result\n                ) => {\n\n                  return [\n                    ...res,\n                    result\n                  ];\n                }\n              );\n          }\n        );\n      },\n      Promise.resolve(\n        []\n      )\n    );\n\n  const characterRowCompositedStreams = \n    await base64MiffStreamsConcatedGet(\n      characterRowCompositedBase64s\n    );\n\n  const charactersCompositedBase64 = \n    await charactersCompositedBase64Get(\n      characterRowCompositedStreams,\n      'column'\n    );\n\n  return (\n    charactersCompositedBase64\n  );\n};\n\nconst finalCompositedGetFn = (\n  finalCompositeMiffStreamsConcated\n) => {\n\n  return new Promise(\n    (\n      resolve,\n      reject\n    ) => {\n\n      const proc = exec(\n        'convert miff:- -gravity north -composite jpeg:-',\n        {\n          encoding: 'base64'\n        },\n        (\n          error,\n          stdout\n        ) => {\n\n          if (\n            error\n          ) {\n\n            return reject(\n              error\n            );\n          }\n\n          return resolve(\n            `\n              data:image/jpeg;base64,${\n                stdout\n              }\n            `\n              .trim()\n          );\n        }\n      );\n\n      finalCompositeMiffStreamsConcated.pipe(\n        proc.stdin\n      );\n    }\n  );\n};\n\nconst finalCompositedGet = async (\n  movieTitle,\n  moviePosterBase64,\n  charactersMontageBase64\n) => {\n\n  const res = outputResGet();\n\n  const pointsize = 20;\n\n  const border = 10;\n\n  if (\n    !charactersMontageBase64\n  ) {\n\n    return base64TextCompositedGet(\n      moviePosterBase64,\n      movieTitle,\n      res,\n      pointsize,\n      border\n    );\n  }\n\n  const finalCompositeMiffStreamsConcated = \n    await base64MiffStreamsConcatedGet(\n      [\n        moviePosterBase64,\n        charactersMontageBase64\n      ]\n    );\n\n  let splash = await finalCompositedGetFn(\n    finalCompositeMiffStreamsConcated\n  );\n\n  splash = await base64TextCompositedGet(\n    splash,\n    movieTitle,\n    res,\n    pointsize,\n    border\n  );\n\n  return (\n    splash\n  );\n};\n\nexport default async (\n  movieTitle,\n  moviePoster,\n  cards\n) => {\n\n  const characters = charactersGet(\n    cards\n  );\n\n  const moviePosterBase64 = await moviePosterBase64Get(\n    moviePoster\n  );\n\n  const charactersMontageBase64 = \n    await charactersMontageGet(\n      characters\n    );\n\n  const splash = await finalCompositedGet(\n    movieTitle,\n    moviePosterBase64,\n    charactersMontageBase64\n  );\n\n  return (\n    splash\n  );\n};\n"],"file":"splashGet.js"}