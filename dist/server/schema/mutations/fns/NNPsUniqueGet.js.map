{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/NNPsUniqueGet.js"],"names":["NNPExistsGet","_NNPs","text","find","_text","NNPs","reduce","memo","NNP","exists"],"mappings":"AAAA;;;;;;;;;;;AAEA,IAAMA,YAAY,GAAG,SAAfA,YAAe,OAInBC,KAJmB,EAKhB;AAAA,MAHDC,IAGC,QAHDA,IAGC;AAEH,SAAOD,KAAK,CAACE,IAAN,CACL,iBAIK;AAAA,QAFKC,KAEL,SAFDF,IAEC;AAEH,WACEE,KAAK,KACLF,IAFF;AAID,GAXI,CAAP;AAaD,CApBD;;eAsBe,kBACbG,IADa,EAEV;AAEH,SAAOA,IAAI,CAACC,MAAL,CACL,UACEC,IADF,EAEEC,GAFF,EAGK;AAEH,QAAMC,MAAM,GAAGT,YAAY,CACzBQ,GADyB,EAEzBD,IAFyB,CAA3B;;AAKA,QACE,CAACE,MADH,EAEE;AAEA,2DACKF,IADL,IAEEC,GAFF;AAID;;AAED,WACED,IADF;AAGD,GAxBI,EAyBL,EAzBK,CAAP;AA2BD,C","sourcesContent":["'use strict';\n\nconst NNPExistsGet = (\n  {\n    text\n  },\n  _NNPs\n) => {\n\n  return _NNPs.find(\n    (\n      {\n        text: _text\n      }\n    ) => {\n\n      return (\n        _text ===\n        text\n      );\n    }\n  );\n};\n\nexport default (\n  NNPs\n) => {\n\n  return NNPs.reduce(\n    (\n      memo,\n      NNP\n    ) => {\n\n      const exists = NNPExistsGet(\n        NNP,\n        memo\n      );\n\n      if (\n        !exists\n      ) {\n\n        return [\n          ...memo,\n          NNP\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n};\n"],"file":"NNPsUniqueGet.js"}