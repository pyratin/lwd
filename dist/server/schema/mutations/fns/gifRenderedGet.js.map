{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/gifRenderedGet.js"],"names":["gifGetFn","miffStreamsConcated","Promise","resolve","reject","proc","encoding","error","stdout","pipe","stdin","gifGet","splash","base64s","input","gif","db","_splash","_cards","cards","cardBase64s"],"mappings":"AAAA;;;;;;;;;;;;;;;AAEA;;AAIA;;AACA;;AACA;;AAGA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CACfC,mBADe,EAEZ;AAEH,SAAO,IAAIC,OAAJ,CACL,UACEC,OADF,EAEEC,MAFF,EAGK;AAEH,QAAMC,IAAI,GAAG,yBACX,0CADW,EAEX;AACEC,MAAAA,QAAQ,EAAE;AADZ,KAFW,EAKX,UACEC,KADF,EAEEC,MAFF,EAGK;AAEH,UACED,KADF,EAEE;AAEA,eAAOH,MAAM,CACXG,KADW,CAAb;AAGD;;AAED,aAAOJ,OAAO,CACZK,MADY,CAAd;AAGD,KAtBU,CAAb;AAyBAP,IAAAA,mBAAmB,CAACQ,IAApB,CACEJ,IAAI,CAACK,KADP;AAGD,GAlCI,CAAP;AAoCD,CAxCD;;AA0CA,IAAMC,MAAM;AAAA,2FAAG,iBACbC,MADa,EAEbC,OAFa;AAAA;AAAA;AAAA;AAAA;AAAA;AAKPC,YAAAA,KALO,GAMXF,MADY,IAIVA,MAJU,6CAKPC,OALO,KAOZA,OAZW;AAAA;AAAA,mBAcmB,8CAC9BC,KAD8B,CAdnB;;AAAA;AAcTb,YAAAA,mBAdS;AAAA;AAAA,mBAkBGD,QAAQ,CACtBC,mBADsB,CAlBX;;AAAA;AAkBTc,YAAAA,GAlBS;AAAA,6CAuBXA,GAvBW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANJ,MAAM;AAAA;AAAA;AAAA,GAAZ;;;4FA2Be,yBAKbK,EALa;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEHC,YAAAA,OAFG,SAEXL,MAFW,EAGJM,MAHI,SAGXC,KAHW;AAAA;AAAA,mBAQa,kCACxBD,MADwB,EAExBF,EAFwB,CARb;;AAAA;AAQPI,YAAAA,WARO;AAAA;AAAA,mBAaQ,mCACnBH,OADmB,EAEnBD,EAFmB,CAbR;;AAAA;AAaPJ,YAAAA,MAbO;AAAA;AAAA,mBAkBKD,MAAM,CACtBC,MADsB,EAEtBQ,WAFsB,CAlBX;;AAAA;AAkBPL,YAAAA,GAlBO;AAAA,8CAwBXA,GAxBW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["'use strict';\n\nimport {\n  exec\n} from 'child_process';\n\nimport cardsRenderedGet from './cardsRenderedGet';\nimport splashRenderedGet from './splashRenderedGet';\nimport base64MiffStreamsConcatedGet from \n  './base64MiffStreamsConcatedGet';\n\nconst gifGetFn = (\n  miffStreamsConcated\n) => {\n\n  return new Promise(\n    (\n      resolve,\n      reject\n    ) => {\n\n      const proc = exec(\n        'convert -loop 0 -delay 1000 miff:- gif:-',\n        {\n          encoding: 'base64'\n        },\n        (\n          error,\n          stdout\n        ) => {\n\n          if (\n            error\n          ) {\n\n            return reject(\n              error\n            );\n          }\n\n          return resolve(\n            stdout\n          );\n        }\n      );\n\n      miffStreamsConcated.pipe(\n        proc.stdin\n      );\n    }\n  );\n};\n\nconst gifGet = async (\n  splash,\n  base64s\n) => {\n\n  const input = (\n    splash\n  ) ?\n    [\n      splash,\n      ...base64s\n    ] :\n    base64s;\n\n  let miffStreamsConcated = await base64MiffStreamsConcatedGet(\n    input\n  );\n\n  let gif = await gifGetFn(\n    miffStreamsConcated\n  );\n\n  return (\n    gif\n  );\n};\n\nexport default async (\n  {\n    splash: _splash,\n    cards: _cards\n  },\n  db\n) => {\n\n  const cardBase64s = await cardsRenderedGet(\n    _cards,\n    db\n  );\n\n  const splash = await splashRenderedGet(\n    _splash,\n    db\n  );\n\n  const gif = await gifGet(\n    splash,\n    cardBase64s\n  );\n\n  return (\n    gif\n  );\n};\n"],"file":"gifRenderedGet.js"}