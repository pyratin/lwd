{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/deckCharactersSpoofedGet.js"],"names":["spoofNameHeroGet","genre","split","map","letter","index","toUpperCase","join","spoofNamesShuffledGet","spoofNames","spoofName","value","random","Math","sort","a","b","dualRoleSuffixGet","trim","spoofNamesProcessedGet","_spoofNames","_characterGroups","role","Array","length","fill","_","characterGroupsSpoofNameAssignedGetFn","characterGroups","reduce","memo","characterGroup","character","text","roleGroupIndex","_text","characterGroupsSpoofNameAssignedGet","heroGroups","heroineGroups","heroine","villainGroups","villain","manGroups","man","womanGroups","woman","unknownGroups","unknown","charactersGet","characters","characterGroupsGet","_characters","filter","characterSubGroups","slice"],"mappings":"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","sourcesContent":["'use strict';\n\nimport spoofNamesGetFn from './spoofNamesGet';\nimport charactersSortedByStarringIndexGet \n  from './charactersSortedByStarringIndexGet';\n\nconst spoofNameHeroGet = (\n  genre\n) => {\n\n  return [\n    genre.split(\n      /^spoof-/\n    )[\n      1\n    ]\n      .split(\n        ''\n      )\n      .map(\n        (\n          letter,\n          index\n        ) => {\n\n          if (\n            !index\n          ) {\n\n            return letter.toUpperCase();\n          }\n\n          return (\n            letter\n          );\n        }\n      )\n      .join(\n        ''\n      )\n  ];\n};\n\nconst spoofNamesShuffledGet = (\n  spoofNames\n) => {\n\n  return spoofNames.map(\n    (\n      spoofName\n    ) => {\n\n      return {\n        value: spoofName,\n        random: Math.random() \n      };\n    }\n  )\n    .sort(\n      (\n        a, b\n      ) => {\n\n        switch (\n          true\n        ) {\n\n          case (\n            a.random >\n            b.random\n          ) :\n\n            return 1;\n\n          case (\n            b.random >\n            a.random\n          ) :\n\n            return -1;\n        }\n      }\n    )\n    .map(\n      (\n        {\n          value\n        }\n      ) => {\n\n        return (\n          value\n        );\n      }\n    );\n};\n\nconst dualRoleSuffixGet = (\n  index\n) => {\n\n  switch (\n    index\n  ) {\n\n    case (0) :\n\n      return '';\n\n    case (1) :\n\n      return '-Man';\n\n    default :\n\n      return `\n        -Man-${\n          index + 1\n        }\n      `\n        .trim();\n  }\n};\n\nconst spoofNamesProcessedGet = (\n  _spoofNames,\n  _characterGroups\n) => {\n\n  let spoofNames = spoofNamesShuffledGet(\n    _spoofNames\n  );\n\n  const role = _characterGroups?.[\n    0\n  ]?.[\n    0\n  ]?.role;\n\n  if (\n    role ===\n    'hero'\n  ) {\n\n    spoofNames = new Array(\n      _characterGroups.length\n    )\n      .fill()\n      .map(\n        (\n          _,\n          index\n        ) => {\n\n          return `\n            ${\n              spoofNames[\n                0\n              ]\n            }${\n              dualRoleSuffixGet(\n                index\n              )\n            }\n          `\n            .trim();\n        }\n      );\n  }\n\n  return (\n    spoofNames\n  );\n};\n\nconst characterGroupsSpoofNameAssignedGetFn = (\n  _characterGroups,\n  _spoofNames\n) => {\n\n  const spoofNames = spoofNamesProcessedGet(\n    _spoofNames,\n    _characterGroups\n  );\n\n  const characterGroups = _characterGroups.reduce(\n    (\n      memo,\n      characterGroup\n    ) => {\n\n      return [\n        ...memo,\n        characterGroup.reduce(\n          (\n            memo,\n            character\n          ) => {\n\n            return [\n              ...memo,\n              {\n                ...character,\n                text: spoofNames[\n                  character.roleGroupIndex\n                ],\n                _text: character.text\n              }\n            ];\n          },\n          []\n        )\n      ];\n    },\n    []\n  );\n\n  return (\n    characterGroups\n  );\n};\n\nconst characterGroupsSpoofNameAssignedGet = (\n  _characterGroups,\n  spoofNames,\n  genre\n) => {\n\n  const heroGroups = \n  characterGroupsSpoofNameAssignedGetFn(\n    _characterGroups[\n      0\n    ],\n    spoofNameHeroGet(\n      genre\n    )\n  );\n\n  const heroineGroups = \n  characterGroupsSpoofNameAssignedGetFn(\n    _characterGroups[\n      1\n    ],\n    spoofNames.heroine\n  );\n\n  const villainGroups = \n  characterGroupsSpoofNameAssignedGetFn(\n    _characterGroups[\n      2\n    ],\n    spoofNames.villain\n  );\n\n  const manGroups = \n  characterGroupsSpoofNameAssignedGetFn(\n    _characterGroups[\n      3\n    ],\n    spoofNames.man\n  );\n\n  const womanGroups =\n  characterGroupsSpoofNameAssignedGetFn(\n    _characterGroups[\n      4\n    ],\n    spoofNames.woman\n  );\n\n  const unknownGroups =\n  characterGroupsSpoofNameAssignedGetFn(\n    _characterGroups[\n      5\n    ],\n    spoofNames.unknown\n  );\n\n  const characterGroups = [\n    heroGroups,\n    heroineGroups,\n    villainGroups,\n    manGroups,\n    womanGroups,\n    unknownGroups\n  ];\n\n  return (\n    characterGroups\n  );\n};\n\nconst charactersGet = (\n  characterGroups\n) => {\n\n  return characterGroups.reduce(\n    (\n      memo,\n      _characterGroups\n    ) => {\n\n      const characters = _characterGroups.reduce(\n        (\n          memo,\n          characterGroup\n        ) => {\n\n          return [\n            ...memo,\n            ...characterGroup.reduce(\n              (\n                memo,\n                character\n              ) => {\n\n                return [\n                  ...memo,\n                  character\n                ];\n              },\n              []\n            )\n          ];\n        },\n        []\n      );\n\n      return [\n        ...memo,\n        ...characters\n      ];\n    },\n    []\n  );\n};\n\nconst characterGroupsGet = (\n  _characters\n) => {\n\n  return [\n    'hero',\n    'heroine',\n    'villain',\n    'man',\n    'woman',\n    'unknown'\n  ]\n    .reduce(\n      (\n        memo,\n        role\n      ) => {\n\n        const characters = _characters.filter(\n          (\n            character\n          ) => {\n\n            return (\n              character.role ===\n              role\n            );\n          }\n        );\n\n        const characterSubGroups = characters.reduce(\n          (\n            memo,\n            character\n          ) => {\n\n            const index = character.roleGroupIndex;\n\n            return [\n              ...memo.slice(\n                0, index\n              ),\n              [\n                ...memo[\n                  index\n                ] ||\n                [],\n                character\n              ],\n              ...memo.slice(\n                index + 1\n              )\n            ];\n          },\n          []\n        );\n\n        return [\n          ...memo,\n          characterSubGroups\n        ];\n      },\n      []\n    );\n};\n\nexport default (\n  _characters,\n  genre\n) => {\n\n  let characterGroups = characterGroupsGet(\n    _characters\n  );\n\n  const spoofNames = spoofNamesGetFn();\n\n  characterGroups = characterGroupsSpoofNameAssignedGet(\n    characterGroups,\n    spoofNames,\n    genre\n  );\n\n  let characters = charactersGet(\n    characterGroups\n  );\n\n  characters = charactersSortedByStarringIndexGet(\n    characters\n  );\n\n  return (\n    characters\n  );\n};\n"],"file":"deckCharactersSpoofedGet.js"}