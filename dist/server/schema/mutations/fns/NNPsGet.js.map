{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/NNPsGet.js"],"names":["wordsChunk","words","wordsChunked","reduce","memo","word","_word","slice","tag","text","match","index","trim","NNPsGetFn","sentence"],"mappings":"AAAA;;;;;;;;;;;;;AAEA;;AACA;;;;;;AAEA,IAAMA,UAAU,GAAG,SAAbA,UAAa,CACjBC,KADiB,EAEd;AAEH,MAAMC,YAAY,GAAGD,KAAK,CAACE,MAAN,CACnB,UACEC,IADF,EAEEC,IAFF,EAGK;AAEH,QAAMC,KAAK,GAAGF,IAAI,CAACG,KAAL,CACZ,CAAC,CADW,EAGZ,CAHY,CAAd;;AAMA,YACE,IADF;AAIE,WACE,CAACD,KADH;AAIE,6DACKF,IADL,IAEEC,IAFF;;AAKF,WAEIC,KAAK,CAACE,GAAN,KACA,KAFF,IAKEH,IAAI,CAACG,GAAL,KACA,KAPJ;AAUA,WAEIF,KAAK,CAACE,GAAN,KACA,KAFF,IAKE,CAAC,CAACH,IAAI,CAACI,IAAL,CACCC,KADD,CAEE,QAFF,CANN;AAYA,WAEIL,IAAI,CAACG,GAAL,KACA,KAFF,IAKE,CAAC,CAACF,KAAK,CAACG,IAAN,CACCC,KADD,CAEE,QAFF,CALJ,IAWE,CAAC,CAACJ,KAAK,CAACK,KAZZ;AAgBE,6DACKP,IAAI,CAACG,KAAL,CACD,CADC,EACE,CAAC,CADH,CADL,oCAKOD,KALP;AAMIG,UAAAA,IAAI,EAAE,4BAEFH,KAAK,CAACG,IAFJ,cAIFJ,IAAI,CAACI,IAJH,sBAOHG,IAPG,EANV;AAcIJ,UAAAA,GAAG,EAAE;AAdT;;AAkBF,WACEH,IAAI,CAACG,GAAL,KACA,IAFF;AAKE,6DACKJ,IADL,oCAGOC,IAHP;AAIIG,UAAAA,GAAG,EAAE;AAJT;;AAQF;AAEE,6DACKJ,IADL,IAEEC,IAFF;AApFJ;AAyFD,GArGkB,EAsGnB,EAtGmB,CAArB;AAyGA,SACEH,YADF;AAGD,CAhHD;;AAkHA,IAAMW,SAAS,GAAG,SAAZA,SAAY,CAChBZ,KADgB,EAEb;AAEH,SAAOA,KAAK,CAACE,MAAN,CACL,UACEC,IADF,EAEEC,IAFF,EAGK;AAEH,YACE,IADF;AAIE,WACEA,IAAI,CAACG,GAAL,KACA,KAFF;AAKE,6DACKJ,IADL,IAEEC,IAAI,CAACI,IAFP;;AAKF;AAEE,eACEL,IADF;AAhBJ;AAoBD,GA1BI,EA2BL,EA3BK,CAAP;AA6BD,CAjCD;;eAmCe,kBACbU,QADa,EAEV;AAEH,MAAIb,KAAK,GAAG,mCACVa,QADU,CAAZ;AAIAb,EAAAA,KAAK,GAAG,gCACNA,KADM,CAAR;AAIAA,EAAAA,KAAK,GAAGD,UAAU,CAChBC,KADgB,CAAlB;AAIAA,EAAAA,KAAK,GAAGY,SAAS,CACfZ,KADe,CAAjB;AAIA,SACEA,KADF;AAGD,C","sourcesContent":["'use strict';\n\nimport wordsTokenizedGet from './wordsTokenizedGet';\nimport wordsTaggedGet from './wordsTaggedGet';\n\nconst wordsChunk = (\n  words\n) => {\n\n  const wordsChunked = words.reduce(\n    (\n      memo,\n      word\n    ) => {\n\n      const _word = memo.slice(\n        -1\n      )[\n        0\n      ];\n\n      switch (\n        true\n      ) {\n\n        case (\n          !_word\n        ) :\n\n          return [\n            ...memo,\n            word\n          ];\n\n        case (\n          (\n            _word.tag === \n            'NNP'\n          ) &&\n          (\n            word.tag === \n            'NNP'\n          )\n        ) :\n        case (\n          (\n            _word.tag === \n            'NNP'\n          ) &&\n          (\n            !!word.text\n              .match(\n                /^[A-Z]/\n              )\n          )\n        ) :\n        case (\n          (\n            word.tag === \n            'NNP'\n          ) &&\n          (\n            !!_word.text\n              .match(\n                /^[A-Z]/\n              )\n          ) &&\n          (\n            !!_word.index\n          )\n        ) :\n\n          return [\n            ...memo.slice(\n              0, -1\n            ),\n            {\n              ..._word,\n              text: `\n                ${\n                  _word.text\n                } ${\n                  word.text\n                }\n              `\n                .trim(),\n              tag: 'NNP'\n            }\n          ];\n\n        case (\n          word.tag ===\n          'FW'\n        ) :\n\n          return [\n            ...memo,\n            {\n              ...word,\n              tag: 'NNP'\n            }\n          ];\n\n        default:\n\n          return [\n            ...memo,\n            word\n          ];\n      }\n    },\n    []\n  );\n\n  return (\n    wordsChunked\n  );\n};\n\nconst NNPsGetFn = (\n  words\n) => {\n\n  return words.reduce(\n    (\n      memo,\n      word\n    ) => {\n\n      switch (\n        true\n      ) {\n\n        case (\n          word.tag === \n          'NNP'\n        ) :\n\n          return [\n            ...memo,\n            word.text\n          ];\n\n        default :\n\n          return (\n            memo\n          );\n      }\n    },\n    []\n  );\n};\n\nexport default (\n  sentence\n) => {\n\n  let words = wordsTokenizedGet(\n    sentence\n  );\n\n  words = wordsTaggedGet(\n    words\n  );\n\n  words = wordsChunk(\n    words\n  );\n\n  words = NNPsGetFn(\n    words\n  );\n\n  return (\n    words\n  );\n};\n"],"file":"NNPsGet.js"}