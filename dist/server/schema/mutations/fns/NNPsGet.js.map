{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/NNPsGet.js"],"names":["wordsTag","words","language","defaultCategory","defaultCategoryCapitalized","lexicon","natural","Lexicon","ruleSet","RuleSet","tagger","BrillPOSTagger","wordsTagged","tag","map","word","text","taggedWords","reduce","memo","wordtagged","index","wordsChunk","wordsChunked","_word","slice","match","trim","NNPsGetFn","sentence"],"mappings":"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","sourcesContent":["'use strict';\n\nimport natural from 'natural';\n\nimport wordsTokenizedGet from './wordsTokenizedGet';\n\nconst wordsTag = (\n  words\n) => {\n\n  const language = 'EN';\n\n  const defaultCategory = 'N';\n\n  const defaultCategoryCapitalized = 'NNP';\n\n  const lexicon = new natural.Lexicon(\n    language,\n    defaultCategory,\n    defaultCategoryCapitalized\n  );\n\n  const ruleSet = new natural.RuleSet(\n    language\n  );\n\n  const tagger = new natural.BrillPOSTagger(\n    lexicon,\n    ruleSet\n  );\n\n  const wordsTagged = tagger.tag(\n    words.map(\n      (\n        word\n      ) => {\n\n        return (\n          word.text\n        );\n      }\n    )\n  )\n    .taggedWords\n    .reduce(\n      (\n        memo,\n        wordtagged,\n        index\n      ) => {\n\n        return [\n          ...memo,\n          {\n            ...wordtagged,\n            ...words[\n              index\n            ]\n          }\n        ];\n      },\n      []\n    );\n\n  return (\n    wordsTagged\n  );\n};\n\nconst wordsChunk = (\n  words\n) => {\n\n  const wordsChunked = words.reduce(\n    (\n      memo,\n      word\n    ) => {\n\n      const _word = memo.slice(\n        -1\n      )[\n        0\n      ];\n\n      switch (\n        true\n      ) {\n\n        case (\n          !_word\n        ) :\n\n          return [\n            ...memo,\n            word\n          ];\n\n        case (\n          (\n            _word.tag === \n            'NNP'\n          ) &&\n          (\n            word.tag === \n            'NNP'\n          )\n        ) :\n        case (\n          (\n            _word.tag === \n            'NNP'\n          ) &&\n          (\n            !!word.text\n              .match(\n                /^[A-Z]/\n              )\n          )\n        ) :\n        case (\n          (\n            word.tag === \n            'NNP'\n          ) &&\n          (\n            !!_word.text\n              .match(\n                /^[A-Z]/\n              )\n          ) &&\n          (\n            !!_word.index\n          )\n        ) :\n\n          return [\n            ...memo.slice(\n              0, -1\n            ),\n            {\n              ..._word,\n              text: `\n                ${\n                  _word.text\n                } ${\n                  word.text\n                }\n              `\n                .trim(),\n              tag: 'NNP'\n            }\n          ];\n\n        case (\n          word.tag ===\n          'FW'\n        ) :\n\n          return [\n            ...memo,\n            {\n              ...word,\n              tag: 'NNP'\n            }\n          ];\n\n        default:\n\n          return [\n            ...memo,\n            word\n          ];\n      }\n    },\n    []\n  );\n\n  return (\n    wordsChunked\n  );\n};\n\nconst NNPsGetFn = (\n  words\n) => {\n\n  return words.reduce(\n    (\n      memo,\n      word\n    ) => {\n\n      switch (\n        true\n      ) {\n\n        case (\n          word.tag === \n          'NNP'\n        ) :\n\n          return [\n            ...memo,\n            word.text\n          ];\n\n        default :\n\n          return (\n            memo\n          );\n      }\n    },\n    []\n  );\n};\n\nexport default (\n  sentence\n) => {\n\n  let words = wordsTokenizedGet(\n    sentence\n  );\n\n  words = wordsTag(\n    words\n  );\n\n  words = wordsChunk(\n    words\n  );\n\n  words = NNPsGetFn(\n    words\n  );\n\n  return (\n    words\n  );\n};\n"],"file":"NNPsGet.js"}