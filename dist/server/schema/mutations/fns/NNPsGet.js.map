{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/NNPsGet.js"],"names":["NNPWhitelistIsMatchGet","text","find","_NNPWhitelist","NNPBlacklistIsMatchGet","_NNPBlacklist","wordsNNPOverridesAppliedGet","_words","words","reduce","memo","_word","tag","wordsChunkedGet","wordsChunked","word","slice","trim","wordsChunkedFilteredGet","match","_NNPChunkedBlacklist","NNPsGetFn","NNPsCleanedGet","map","token","sentence"],"mappings":"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","sourcesContent":["'use strict';\n\nimport wordsTokenizedGet from './wordsTokenizedGet';\nimport wordsTaggedGet from './wordsTaggedGet';\nimport NNPWhitelistGet from './NNPWhitelistGet';\nimport NNPBlacklistGet from './NNPBlacklistGet';\nimport NNPChunkedBlacklistGet \n  from './NNPChunkedBlacklistGet';\n\nconst NNPWhitelistIsMatchGet = (\n  text\n) => {\n\n  return NNPWhitelistGet()\n    .find(\n      (\n        _NNPWhitelist\n      ) => {\n\n        return (\n          _NNPWhitelist ===\n          text\n        );\n      }\n    );\n};\n\nconst NNPBlacklistIsMatchGet = (\n  text\n) => {\n\n  return NNPBlacklistGet()\n    .find(\n      (\n        _NNPBlacklist\n      ) => {\n\n        return (\n          _NNPBlacklist ===\n          text\n        );\n      }\n    );\n};\n\nconst wordsNNPOverridesAppliedGet = (\n  _words\n) => {\n\n  const words = _words.reduce(\n    (\n      memo,\n      _word\n    ) => {\n\n      switch (\n        true\n      ) {\n\n        case (\n          !!NNPWhitelistIsMatchGet(\n            _word.text\n          )\n        ) :\n\n          return [\n            ...memo,\n            {\n              ..._word,\n              tag: 'NNP'\n            }\n          ];\n\n        case (\n          !!NNPBlacklistIsMatchGet(\n            _word.text\n          )\n        ) :\n\n          return [\n            ...memo,\n            {\n              ..._word,\n              tag: 'blacklist'\n            }\n          ];\n\n        default:\n\n          return [\n            ...memo,\n            _word\n          ];\n      }\n    },\n    []\n  );\n\n  return (\n    words\n  );\n};\n\nconst wordsChunkedGet = (\n  words\n) => {\n\n  const wordsChunked = words.reduce(\n    (\n      memo,\n      word\n    ) => {\n\n      const _word = memo.slice(\n        -1\n      )[\n        0\n      ];\n\n      switch (\n        true\n      ) {\n\n        case (\n          !_word\n        ) :\n\n          return [\n            ...memo,\n            word\n          ];\n\n        case (\n          (\n            _word.tag === \n            'NNP'\n          ) &&\n          (\n            word.tag === \n            'NNP'\n          )\n        ) :\n\n          return [\n            ...memo.slice(\n              0, -1\n            ),\n            {\n              ..._word,\n              text: `\n                ${\n                  _word.text\n                } ${\n                  word.text\n                }\n              `\n                .trim(),\n              tag: 'NNP'\n            }\n          ];\n\n        default:\n\n          return [\n            ...memo,\n            word\n          ];\n      }\n    },\n    []\n  );\n\n  return (\n    wordsChunked\n  );\n};\n\nconst wordsChunkedFilteredGet = (\n  words\n) => {\n\n  return words.reduce(\n    (\n      memo,\n      word\n    ) => {\n\n      const match = NNPChunkedBlacklistGet()\n        .find(\n          (\n            _NNPChunkedBlacklist\n          ) => {\n\n            return (\n              _NNPChunkedBlacklist ===\n              word.text\n            );\n          }\n        );\n\n      if (\n        !match\n      ) {\n\n        return [\n          ...memo,\n          word\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n};\n\nconst NNPsGetFn = (\n  words\n) => {\n\n  return words.reduce(\n    (\n      memo,\n      word\n    ) => {\n\n      switch (\n        true\n      ) {\n\n        case (\n          word.tag === \n          'NNP'\n        ) :\n\n          return [\n            ...memo,\n            word\n          ];\n\n        default :\n\n          return (\n            memo\n          );\n      }\n    },\n    []\n  );\n};\n\nconst NNPsCleanedGet = (\n  words\n) => {\n\n  return words.map(\n    (\n      word\n    ) => {\n\n      delete word.token;\n\n      delete word.tag;\n\n      return (\n        word\n      );\n    }\n  );\n};\n\nexport default (\n  sentence\n) => {\n\n  let words = wordsTokenizedGet(\n    sentence\n  );\n\n  words = wordsTaggedGet(\n    words\n  );\n\n  words = wordsNNPOverridesAppliedGet(\n    words\n  );\n\n  words = wordsChunkedGet(\n    words\n  );\n\n  words = wordsChunkedFilteredGet(\n    words\n  );\n\n  words = NNPsGetFn(\n    words\n  );\n\n  words = NNPsCleanedGet(\n    words\n  );\n\n  return (\n    words\n  );\n};\n"],"file":"NNPsGet.js"}