{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/segmentsGet.js"],"names":["__fragmentsGetFn","fragment","character","text","split","reduce","memo","index","textFragment","type","actorFragment","actor","castIndex","_fragmentsGetFn","fragments","fragmentsGetFn","sentence","characters","fragmentMemo","fragmentIndex","fragmentsGet","plot","segmentIndex","segmentsGetFn","segmentCount","slice","Array","fill","_","filter","segments"],"mappings":"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","sourcesContent":["'use strict';\n\nconst __fragmentsGetFn = (\n  fragment,\n  character\n) => {\n\n  return fragment.text\n    .split(\n      character.text\n    )\n    .reduce(\n      (\n        memo,\n        text\n      ) => {\n\n        return [\n          ...memo,\n          {\n            ...fragment,\n            text\n          }\n        ];\n      },\n      []\n    )\n    .reduce(\n      (\n        memo,\n        fragment,\n        index\n      ) => {\n\n        const textFragment = {\n          type: 'text',\n          ...fragment\n        };\n\n        if (\n          index\n        ) {\n\n          const actorFragment = {\n            ...fragment,\n            type: 'actor',\n            actor: character.actor,\n            text: character.text,\n            castIndex: character.castIndex\n          };\n\n          return [\n            ...memo,\n            actorFragment,\n            textFragment\n          ];\n        }\n\n        return [\n          ...memo,\n          textFragment\n        ];\n      },\n      []\n    );\n};\n\nconst _fragmentsGetFn = (\n  fragments,\n  character\n) => {\n\n  return fragments.reduce(\n    (\n      memo,\n      fragment\n    ) => {\n\n      if (\n        fragment.type !==\n        'actor'\n      ) {\n\n        return [\n          ...memo,\n          ...__fragmentsGetFn(\n            fragment,\n            character\n          )\n        ];\n      }\n\n      return [\n        ...memo,\n        fragment\n      ];\n    },\n    []\n  );\n};\n\nconst fragmentsGetFn = (\n  sentence,\n  characters\n) => {\n\n  return characters.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      const fragments = _fragmentsGetFn(\n        memo,\n        character\n      )\n        .reduce(\n          (\n            fragmentMemo,\n            fragment,\n            fragmentIndex\n          ) => {\n\n            return [\n              ...fragmentMemo,\n              {\n                ...fragment,\n                fragmentIndex\n              }\n            ];\n          },\n          []\n        );\n\n      return (\n        fragments\n      );\n    },\n    [\n      sentence\n    ]\n  );\n};\n\nconst fragmentsGet = (\n  plot,\n  characters\n) => {\n\n  return plot.reduce(\n    (\n      memo,\n      sentence,\n      segmentIndex\n    ) => {\n\n      const fragments = fragmentsGetFn(\n        sentence,\n        characters\n      )\n        .reduce(\n          (\n            memo,\n            fragment\n          ) => {\n\n            return [\n              ...memo,\n              {\n                ...fragment,\n                segmentIndex\n              }\n            ];\n          },\n          []\n        );\n\n      return [\n        ...memo,\n        ...fragments\n      ];\n    },\n    []\n  );\n};\n\nconst segmentsGetFn = (\n  fragments\n) => {\n\n  const segmentCount = fragments.slice(\n    -1\n  )[\n    0\n  ]\n    .segmentIndex;\n\n  return new Array(\n    segmentCount + 1\n  )\n    .fill()\n    .reduce(\n      (\n        memo,\n        _,\n        index\n      ) => {\n\n        return [\n          ...memo,\n          fragments.filter(\n            (\n              fragment\n            ) => {\n\n              return (\n                fragment.segmentIndex ===\n                index\n              );\n            }\n          )\n        ];\n      },\n      []\n    );\n};\n\nexport default (\n  plot,\n  characters\n) => {\n\n  const fragments = fragmentsGet(\n    plot,\n    characters\n  );\n\n  const segments = segmentsGetFn(\n    fragments\n  );\n\n  return (\n    segments\n  );\n};\n"],"file":"segmentsGet.js"}