{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/movieDataBasicCastGet.js"],"names":["castLinesGet","_castText","$","cheerio","load","decodeEntities","toArray","map","_el","el","find","remove","end","text","html","actorLinkMatchedGet","castLine","castHtml","actorLinkRegExp","match","ud","actorNNPMatchedGet","castText","NNPs","distance","actorSyntaxMatchedGet","syntaxRegExp","actorsGetFn","actor","actorsGet","castLines","reduce","memo","actorsCleanedGet","actors","index","tokenIndex","actorRegExpGet","actorText","RegExp","trim","castGetFn","join","cast","role","split","length","replace"],"mappings":"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","sourcesContent":["'use strict';\n\nimport cheerio from 'cheerio';\n\nimport NNPsGet from './NNPsGet';\nimport sentencesTokenizedGet\n  from './sentencesTokenizedGet';\n\nconst castLinesGet = (\n  _castText\n) => {\n\n  const $ = cheerio.load(\n    _castText,\n    {\n      decodeEntities: false\n    }\n  );\n\n  return $(\n    'li'\n  )\n    .toArray()\n    .map(\n      (\n        _el\n      ) => {\n\n        const el = $(_el)\n          .find('span.mw-reflink-text')\n          .remove()\n          .end();\n\n        return [\n          $(el)\n            .text(),\n          $(el)\n            .html()\n        ];\n      }\n    );\n};\n\nconst actorLinkMatchedGet = (\n  castLine\n) => {\n\n  const castHtml = castLine[\n    1\n  ];\n\n  const actorLinkRegExp =\n    /^<a href=\"\\/wiki\\/([^\"]*?)\"[^>]*?>([^<]*?)<\\/a>/;\n\n  const match = castHtml.match(\n    actorLinkRegExp\n  );\n\n  return (\n    match\n  ) ?\n    {\n      text: match[\n        2\n      ],\n      ud: match[\n        1\n      ]\n    } :\n    null;\n};\n\nconst actorNNPMatchedGet = (\n  castLine\n) => {\n\n  const castText = castLine[\n    0\n  ];\n\n  const NNPs = NNPsGet(\n    castText\n  );\n\n  const match = NNPs.find(\n    (\n      {\n        distance\n      }\n    ) => {\n\n      return (\n        distance ===\n        0\n      );\n    }\n  );\n\n  return (\n    match\n  ) ?\n    {\n      text: match.text,\n      ud: null\n    } :\n    null;\n};\n\nconst actorSyntaxMatchedGet = (\n  castLine\n) => {\n\n  const castText = castLine[\n    0\n  ];\n\n  const syntaxRegExp = /(.*)\\sas\\s/;\n\n  const match = (\n    castText.match(\n      syntaxRegExp\n    )\n  );\n\n  return (\n    match\n  ) ?\n    {\n      text: match[\n        1\n      ],\n      ud: null\n    } :\n    null;\n};\n\nconst actorsGetFn = (\n  castLine\n) => {\n\n  let actor;\n\n  switch (\n    true\n  ) {\n\n    case (\n      (\n        actor = actorLinkMatchedGet(\n          castLine\n        )\n      ) &&\n      !!actor\n    ) :\n    case (\n      (\n        actor = actorNNPMatchedGet(\n          castLine\n        )\n      ) &&\n      !!actor\n    ) :\n    case (\n      (\n        actor = actorSyntaxMatchedGet(\n          castLine\n        )\n      ) &&\n      !!actor\n    ) :\n\n      return (\n        actor\n      );\n  }\n};\n\nconst actorsGet = (\n  castLines\n) => {\n\n  return castLines.reduce(\n    (\n      memo,\n      castLine\n    ) => {\n\n      const actor = actorsGetFn(\n        castLine\n      );\n\n      if (\n        actor\n      ) {\n\n        return [\n          ...memo,\n          actor\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n};\n\nconst actorsCleanedGet = (\n  actors\n) => {\n\n  return actors.map(\n    (\n      actor\n    ) => {\n\n      delete actor.index;\n      delete actor.distance;\n      delete actor.tokenIndex;\n\n      return (\n        actor\n      );\n    }\n  );\n};\n\nconst actorRegExpGet = (\n  actorText\n) => {\n\n  return new RegExp(\n    `\n      ^${\n        actorText\n      }\n    `\n      .trim(),\n    'm'\n  );\n};\n\nconst castGetFn = (\n  actors,\n  castLines\n) => {\n\n  const castText = castLines.reduce(\n    (\n      memo,\n      [\n        _castText\n      ]\n    ) => {\n\n      return [\n        ...memo,\n        _castText\n      ];\n    },\n    []\n  )\n    .join(\n      '\\n'\n    );\n\n  const cast = actors.reduce(\n    (\n      memo,\n      actor,\n      index\n    ) => {\n\n      let role = castText.split(\n        actorRegExpGet(\n          actor.text\n        )\n      )?.[\n        1\n      ];\n\n      if (\n        (\n          actors.length >\n          (\n            index + 1\n          )\n        ) &&\n        role\n      ) {\n\n        role = role.split(\n          actorRegExpGet(\n            actors[\n              index + 1\n            ]\n              .text\n          )\n        )?.[\n          0\n        ];\n      }\n\n      role = (role) ?\n        role :\n        '';\n\n      role = role.replace(\n        /\\n/g,\n        ' '\n      );\n\n      role = (\n        role.trim()\n      ) ?\n        sentencesTokenizedGet(\n          role\n        )[\n          0\n        ] :\n        role;\n\n      role = (\n        role.trim()\n      ) ?\n        role.split(\n          /[:,]/\n        )[\n          0\n        ] :\n        role;\n\n      role = `\n        ${\n          actor.text\n        } ${\n          role.trim()\n        }\n      `\n        .trim();\n\n      if (\n        role\n      ) {\n\n        return [\n          ...memo,\n          {\n            actor,\n            role\n          }\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n\n  return (\n    cast\n  );\n};\n\nexport default (\n  castText\n) => {\n\n  if (\n    !castText\n  ) {\n\n    return (\n      null\n    );\n  }\n\n  const castLines = castLinesGet(\n    castText\n  );\n\n  let actors = actorsGet(\n    castLines\n  );\n\n  actors = actorsCleanedGet(\n    actors\n  );\n\n  let cast = castGetFn(\n    actors,\n    castLines\n  );\n\n  return (\n    cast\n  );\n};\n\n"],"file":"movieDataBasicCastGet.js"}