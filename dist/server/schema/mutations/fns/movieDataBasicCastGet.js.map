{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/movieDataBasicCastGet.js"],"names":["actorNNPsGet","castLines","NNPs","reduce","memo","castLine","NNP","find","distance","actorsUdAssignedGet","_actors","castHtml","actors","actor","hrefCatchString","regExpString","text","trim","regExp","RegExp","match","ud","actorsFilteredGetFn","plotCharacters","plotCharacter","actorsFilteredGet","plot","actorsCleanedGet","map","index","castGetFn","castText","join","cast","role","split","length","replace","_castText","$","cheerio","load","toArray","el"],"mappings":"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","sourcesContent":["'use strict';\n\nimport cheerio from 'cheerio';\n\nimport plotNNPsGet from './plotNNPsGet';\nimport NNPsGet from './NNPsGet';\nimport NNPCrossMatchGet from './NNPCrossMatchGet';\n\nconst actorNNPsGet = (\n  castLines\n) => {\n\n  const NNPs = castLines.reduce(\n    (\n      memo,\n      castLine\n    ) => {\n\n      const NNPs = NNPsGet(\n        castLine,\n        true\n      );\n\n      const NNP = NNPs.find(\n        (\n          {\n            distance\n          }\n        ) => {\n\n          return (\n            distance ===\n            0\n          );\n        }\n      );\n\n      if (\n        NNP\n      ) {\n\n        return [\n          ...memo,\n          NNP\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n\n  return (\n    NNPs\n  );\n};\n\nconst actorsUdAssignedGet = (\n  _actors,\n  castHtml\n) => {\n\n  const actors = _actors.reduce(\n    (\n      memo,\n      actor\n    ) => {\n\n      const hrefCatchString = '[^\"]*?';\n\n      const regExpString = `\n      <a href=\"/wiki/(${\n        hrefCatchString\n      })\" [^>]*?>${\n          actor.text\n        }</a>\n      `\n        .trim();\n\n      const regExp = new RegExp(\n        regExpString,\n      );\n\n      const match = castHtml.match(\n        regExp\n      );\n\n      if (\n        match\n      ) {\n\n        return [\n          ...memo,\n          {\n            ...actor,\n            ud: match[1]\n          }\n        ];\n      }\n\n      return [\n        ...memo,\n        {\n          ...actor,\n          ud: null\n        }\n      ];\n    },\n    []\n  );\n\n  return (\n    actors\n  );\n};\n\nconst actorsFilteredGetFn = (\n  plotCharacters,\n  actor\n) => {\n\n  return plotCharacters.reduce(\n    (\n      memo,\n      plotCharacter\n    ) => {\n\n      const match = NNPCrossMatchGet(\n        plotCharacter.text,\n        actor.text\n      );\n\n      if (\n        !memo &&\n        match\n      ) {\n\n        return (\n          match\n        );\n      }\n\n      return (\n        memo\n      );\n    },\n    null\n  );\n};\n\nconst actorsFilteredGet = (\n  _actors,\n  plot\n) => {\n\n  const plotCharacters = plotNNPsGet(\n    plot\n  );\n\n  const actors = _actors.reduce(\n    (\n      memo,\n      actor\n    ) => {\n\n      const match = actorsFilteredGetFn(\n        plotCharacters,\n        actor\n      );\n\n      if (\n        match &&\n        !actor.ud\n      ) {\n\n        return (\n          memo\n        );\n      }\n\n      return [\n        ...memo,\n        actor\n      ];\n    },\n    []\n  );\n\n  return (\n    actors\n  );\n};\n\nconst actorsCleanedGet = (\n  actors\n) => {\n\n  return actors.map(\n    (\n      actor\n    ) => {\n\n      delete actor.index;\n      delete actor.distance;\n\n      return (\n        actor\n      );\n    }\n  );\n};\n\nconst castGetFn = (\n  actors,\n  castLines\n) => {\n\n  const castText = castLines.join(\n    '\\n'\n  );\n\n  const cast = actors.reduce(\n    (\n      memo,\n      actor,\n      index\n    ) => {\n\n      const regExp = new RegExp(\n        `\n          ^${\n            actor.text\n          }\n        `\n          .trim(),\n        'm'\n      );\n\n      let role = castText.split(\n        regExp\n      )?.[\n        1\n      ];\n\n      if (\n        (\n          actors.length >\n          (\n            index + 1\n          )\n        ) &&\n        role\n      ) {\n\n        role = role.split(\n          actors[\n            index + 1\n          ]\n            .text\n        )?.[\n          0\n        ];\n      }\n\n      role = (role) ?\n        role.replace(\n          /\\n/g,\n          ' '\n        ) :\n        null;\n\n      if (\n        role\n      ) {\n\n        return [\n          ...memo,\n          {\n            actor,\n            role\n          }\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n\n  return (\n    cast\n  );\n};\n\nexport default (\n  _castText,\n  plot\n) => {\n\n  if (\n    !_castText ||\n    !plot\n  ) {\n\n    return (\n      null\n    );\n  }\n\n  const $ = cheerio.load(\n    _castText\n  );\n\n  const castLines = $(\n    'li'\n  )\n    .toArray()\n    .map(\n      (\n        el\n      ) => {\n\n        return $(\n          el\n        )\n          .text();\n      }\n    );\n\n  let actors = actorNNPsGet(\n    castLines\n  );\n\n  actors = actorsUdAssignedGet(\n    actors,\n    _castText\n  );\n\n  actors = actorsFilteredGet(\n    actors,\n    plot\n  );\n\n  actors = actorsCleanedGet(\n    actors\n  );\n\n  let cast = castGetFn(\n    actors,\n    castLines\n  );\n\n  return (\n    cast\n  );\n};\n\n"],"file":"movieDataBasicCastGet.js"}