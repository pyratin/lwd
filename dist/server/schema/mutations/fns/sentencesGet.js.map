{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/sentencesGet.js"],"names":["sentenceNormalizeRegExp","sentenceIsNormalizedGet","sentence","sentenceMaxLength","match","split","reduce","memo","_sentence","length","wordPOSMatchConditionGet","word","tagType","tag","text","wordPOSMatchedGet","caseCondition","wordsPosMatchedGet","words","_word","sentenceShortenedByPOSGet","_distance","distance","distanceOffset","slice","trim","join","NNPsSortedGet","NNPs","sort","a","b","factor","Math","abs","sentenceShortenedByNNPGet","map","NNP","wordBoundry","RegExp","end","filter","sentenceShortenedGetFn","replace","sentenceShortenedGet","__sentence","sentenceParenthesisHandle","sentencesPreprocessedGetFn","sentencesPreprocessedGet","sentences","_sentenceNormalizedGetFn","commas","matchAll","index","fragments","effect","comma","sentenceNormalizedGetFn","joinString","_text","sentenceNormalizedGet","texts","sentenceNormalized","paragraph"],"mappings":"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","sourcesContent":["'use strict';\n\nimport sentencesTokenizedGet from './sentencesTokenizedGet';\nimport wordsTokenizedGet from './wordsTokenizedGet';\nimport wordsTaggedGet from './wordsTaggedGet';\nimport NNPsGet from './NNPsGet';\nimport parenthesisPurgedGet from './parenthesisPurgedGet';\n\nconst sentenceNormalizeRegExp = /,\\s/;\n\nconst sentenceIsNormalizedGet = (\n  sentence,\n  sentenceMaxLength\n) => {\n\n  return (\n    (\n      !!sentence.match(\n        sentenceNormalizeRegExp\n      )\n    ) &&\n    (\n      !!sentence.split(\n        sentenceNormalizeRegExp\n      )\n        .reduce(\n          (\n            memo,\n            _sentence\n          ) => {\n\n            if (\n              memo &&\n              (\n                _sentence.length >\n                sentenceMaxLength\n              )\n            ) {\n\n              return (\n                false\n              );\n            }\n\n            return (\n              memo\n            );\n          },\n          true\n        )\n    )\n  );\n};\n\nconst wordPOSMatchConditionGet = (\n  word,\n  sentence,\n  tagType,\n  sentenceMaxLength\n) => {\n\n  if (\n    sentenceIsNormalizedGet(\n      sentence,\n      sentenceMaxLength\n    ) \n  ) {\n\n    return (\n      false\n    );\n  }\n\n  switch (\n    tagType\n  ) {\n\n    case (\n      'CC'\n    ) :\n\n      return (\n        word.tag === \n        'CC'\n      );\n\n    case (\n      'VBG'\n    ) :\n\n      return (\n        (\n          word.tag === \n          'VBG'\n        ) &&\n        (\n          !!word.text\n            .match(\n              /ing$/\n            )\n        ) && \n        (\n          !word.text\n            .match(\n              /^king$/i\n            )\n        )\n      );\n  }\n};\n\nconst wordPOSMatchedGet = (\n  word,\n  sentence,\n  tagType,\n  sentenceMaxLength\n) => {\n\n  const caseCondition = wordPOSMatchConditionGet(\n    word,\n    sentence,\n    tagType,\n    sentenceMaxLength\n  );\n\n  switch (\n    true\n  ) {\n\n    case (\n      caseCondition\n    ) :\n\n      return (\n        word\n      );\n\n    default:\n\n      return (\n        null\n      );\n  }\n};\n\nconst wordsPosMatchedGet = (\n  words,\n  sentence,\n  tagType,\n  sentenceMaxLength\n) => {\n\n  return words.reduce(\n    (\n      memo,\n      _word\n    ) => {\n\n      const word = wordPOSMatchedGet(\n        _word,\n        sentence,\n        tagType,\n        sentenceMaxLength\n      );\n\n      if (\n        word\n      ) {\n\n        return [\n          ...memo,\n          word\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n};\n\nconst sentenceShortenedByPOSGet = (\n  _sentence,\n  tagType,\n  sentenceMaxLength\n) => {\n\n  if (\n    sentenceIsNormalizedGet(\n      _sentence,\n      sentenceMaxLength\n    )\n  ) {\n\n    return (\n      _sentence\n    );\n  }\n\n  let words = wordsTokenizedGet(\n    _sentence\n  );\n\n  words = wordsTaggedGet(\n    words\n  ); \n\n  words = wordsPosMatchedGet(\n    words,\n    _sentence,\n    tagType,\n    sentenceMaxLength\n  );\n\n  const sentence = words.reduce(\n    (\n      memo,\n      word\n    ) => {\n\n      const _distance = word.distance;\n\n      const distanceOffset = memo.length - _sentence.length;\n\n      const distance = _distance + distanceOffset;\n\n      return [\n        memo.slice(\n          0, distance\n        )\n          .trim(),\n        `, ${word.text} `,\n        memo.slice(\n          distance +\n          word.text.length\n        )\n          .trim()\n      ]\n        .join(\n          ''\n        );\n    },\n    _sentence\n  );\n\n  return (\n    sentence\n  );\n};\n\nconst NNPsSortedGet = (\n  NNPs,\n  sentenceMaxLength\n) => {\n\n  return NNPs.sort(\n    (\n      a, b\n    ) => {\n\n      const factor = sentenceMaxLength / 2;\n\n      switch (\n        true\n      ) {\n\n        case (\n          Math.abs(\n            a.distance -\n            factor\n          ) >\n          Math.abs(\n            b.distance -\n            factor\n          )\n        ) :\n\n          return 1;\n\n        case (\n          Math.abs(\n            b.distance -\n            factor\n          ) >\n          Math.abs(\n            a.distance -\n            factor\n          )\n        ) :\n\n          return -1;\n      }\n    }\n  );\n};\n\nconst sentenceShortenedByNNPGet = (\n  _sentence,\n  sentenceMaxLength\n) => {\n\n  if (\n    sentenceIsNormalizedGet(\n      _sentence,\n      sentenceMaxLength\n    )\n  ) {\n\n    return (\n      _sentence\n    );\n  }\n\n  let NNPs = NNPsGet(\n    _sentence\n  );\n\n  NNPs = NNPs.map(\n    (\n      NNP\n    ) => {\n\n      const wordBoundry = !!_sentence.match(\n        new RegExp(\n          `\n            ${\n              NNP.text\n            }\\\\s\n          `\n            .trim()\n        )\n      );\n\n      const end = !_sentence.match(\n        new RegExp(\n          `\n            ${\n              NNP.text\n            }\\\\s[A-Z]\n          `\n            .trim()\n        )\n      );\n\n      return {\n        ...NNP,\n        wordBoundry,\n        end\n      };\n    }\n  );\n\n  NNPs = NNPs.filter(\n    (\n      NNP\n    ) => {\n\n      return (\n        NNP.wordBoundry &&\n        NNP.end\n      );\n    }\n  );\n\n  NNPs = NNPs.filter(\n    (\n      NNP\n    ) => {\n\n      return (\n        _sentence.length !==\n        (\n          NNP.distance +\n          NNP.text.length + \n          1\n        )\n      );\n    }\n  );\n\n  const NNP = NNPsSortedGet(\n    NNPs,\n    sentenceMaxLength\n  )?.[\n    0\n  ];\n\n  const sentence = (\n    NNP\n  ) ?\n    [\n      _sentence.slice(\n        0, NNP.distance\n      )\n        .trim(),\n      ` ${NNP.text}, `,\n      _sentence.slice(\n        NNP.distance +\n        NNP.text.length\n      )\n        .trim()\n    ]\n      .join(\n        ''\n      ) :\n    _sentence;\n\n  return (\n    sentence\n  );\n};\n\nconst sentenceShortenedGetFn = (\n  _sentence,\n  sentenceMaxLength\n) => {\n\n  let sentence = _sentence.replace(\n    /\\swhich(\\s)/g,\n    ', which$1'\n  );\n\n  sentence = sentenceShortenedByPOSGet(\n    sentence,\n    'CC',\n    sentenceMaxLength\n  );\n\n  sentence = sentenceShortenedByPOSGet(\n    sentence,\n    'VBG',\n    sentenceMaxLength\n  );\n\n  sentence = sentenceShortenedByNNPGet(\n    sentence,\n    sentenceMaxLength\n  );\n\n  return (\n    sentence\n  );\n};\n\nconst sentenceShortenedGet = (\n  _sentence,\n  sentenceMaxLength\n) => {\n\n  const sentence = _sentence.split(\n    sentenceNormalizeRegExp\n  )\n    .reduce(\n      (\n        memo,\n        __sentence\n      ) => {\n\n        let sentence = __sentence.trim();\n\n        if (\n          (\n            sentence.length >\n            sentenceMaxLength\n          ) &&\n          (\n            !sentenceIsNormalizedGet(\n              sentence,\n              sentenceMaxLength\n            )\n          )\n        ) {\n\n          sentence = sentenceShortenedGetFn(\n            sentence,\n            sentenceMaxLength\n          );\n\n          return [\n            ...memo,\n            sentence\n          ];\n        }\n\n        return [\n          ...memo,\n          sentence\n        ];\n      },\n      []\n    )\n    .join(\n      ', '\n    );\n\n  return (\n    sentence\n  );\n};\n\nconst sentenceParenthesisHandle = (\n  _sentence\n) => {\n\n  let sentence = parenthesisPurgedGet(\n    _sentence\n  );\n\n  return (\n    sentence\n  );\n};\n\nconst sentencesPreprocessedGetFn = (\n  _sentence,\n  sentenceMaxLength\n) => {\n\n  let sentence = sentenceShortenedGet(\n    _sentence,\n    sentenceMaxLength\n  );\n\n  sentence = sentenceParenthesisHandle(\n    sentence\n  );\n\n  return (\n    sentence\n  );\n};\n\nconst sentencesPreprocessedGet = (\n  sentences,\n  sentenceMaxLength\n) => {\n\n  return sentences.reduce(\n    (\n      memo,\n      _sentence\n    ) => {\n\n      const sentence = sentencesPreprocessedGetFn(\n        _sentence,\n        sentenceMaxLength\n      );\n\n      if (\n        sentence.trim()\n      ) {\n\n        return [\n          ...memo,\n          sentence\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n};\n\nconst _sentenceNormalizedGetFn = (\n  sentence\n) => {\n\n  let commas = [\n    ...sentence.matchAll(\n      new RegExp(\n        sentenceNormalizeRegExp,\n        'g'\n      )\n    )\n  ]\n    .reduce(\n      (\n        memo,\n        {\n          index\n        }\n      ) => {\n\n        const fragments = [\n          sentence.slice(\n            0, index\n          ),\n          sentence.slice(\n            index + 1\n          )\n        ];\n\n        return [\n          ...memo,\n          {\n            distance: index,\n            effect: Math.abs(\n              (\n                fragments[\n                  0\n                ]\n                  .length \n              ) -\n              fragments[\n                1\n              ]\n                .length\n            )\n          }\n        ];\n      },\n      []\n    );\n\n  commas = commas.sort(\n    (\n      a, b\n    ) => {\n\n      switch (\n        true\n      ) {\n\n        case (\n          a.effect >\n          b.effect\n        ) :\n\n          return 1;\n\n        case (\n          b.effect >\n          a.effect\n        ) :\n\n          return -1;\n      }\n    }\n  );\n\n  const comma = commas[\n    0\n  ];\n\n  const fragments = [\n    sentence.slice(\n      0, comma.distance\n    )\n      .trim(),\n    sentence.slice(\n      comma.distance + 1\n    )\n      .trim()\n  ];\n\n  return (\n    fragments\n  );\n};\n\nconst sentenceNormalizedGetFn = (\n  text,\n  sentenceMaxLength\n) => {\n\n  const joinString = ', ';\n\n  return _sentenceNormalizedGetFn(\n    text\n  )\n    .reduce(\n      (\n        memo,\n        _text\n      ) => {\n\n        switch (\n          true\n        ) {\n\n          case (\n            !memo.length\n          ) :\n\n            return [\n              _text\n            ];\n\n          case (\n            (\n              memo.length < \n              2\n            ) &&\n            (\n              memo[\n                0\n              ]\n                .length +\n              _text.length +\n              +joinString.length\n            ) < \n            sentenceMaxLength\n          ) :\n\n            return [\n              `\n                ${\n                  memo[\n                    0\n                  ]\n                    .trim()\n                }${\n                  joinString\n                }${\n                  _text.trim()\n                }\n              `\n                .trim()\n            ];\n\n          case (\n            memo.length < 2\n          ) :\n\n            return [\n              memo[\n                0\n              ],\n              _text.trim()\n            ];\n\n          default:\n\n            return [\n              memo[\n                0\n              ],\n              `\n                ${\n                  memo[\n                    1\n                  ]\n                    .trim()\n                }${\n                  joinString\n                }${\n                  _text.trim()\n                }\n              `\n                .trim()\n            ];\n        }\n      },\n      []\n    );\n};\n\nconst sentenceNormalizedGet = (\n  text,\n  sentenceMaxLength\n) => {\n\n  let texts = [\n    text\n  ];\n\n  while (\n    (\n      (\n        texts[\n          texts.length - 1\n        ]\n          .length\n      ) >\n      sentenceMaxLength\n    ) &&\n    (\n      !!texts[\n        texts.length -1\n      ]\n        .match(\n          sentenceNormalizeRegExp \n        )\n    )\n  ) {\n\n    const sentenceNormalized = sentenceNormalizedGetFn(\n      texts[\n        texts.length - 1\n      ],\n      sentenceMaxLength\n    );\n\n    texts = [\n      ...texts.slice(\n        0, -1\n      ),\n      ...sentenceNormalized\n    ];\n  }\n\n  texts = texts.reduce(\n    (\n      memo,\n      text,\n      index\n    ) => {\n\n      if (\n        index <\n        (\n          texts.length - 1\n        )\n      ) {\n\n        return [\n          ...memo,\n          `\n            ${\n            text\n            } ...,\n          `\n            .trim()\n        ];\n      }\n\n      return [\n        ...memo,\n        text\n      ];\n    },\n    []\n  );\n\n  return (\n    texts\n  );\n};\n\nexport default (\n  paragraph,\n  sentenceMaxLength\n) => {\n\n  let sentences = sentencesTokenizedGet(\n    paragraph\n  );\n\n  sentences = sentencesPreprocessedGet(\n    sentences,\n    sentenceMaxLength\n  );\n  \n  sentences = sentences.reduce(\n    (\n      memo,\n      text\n    ) => {\n\n      return [\n        ...memo,\n        ...sentenceNormalizedGet(\n          text,\n          sentenceMaxLength\n        )\n      ];\n    },\n    []\n  );\n\n  return (\n    sentences\n  );\n};\n\n"],"file":"sentencesGet.js"}