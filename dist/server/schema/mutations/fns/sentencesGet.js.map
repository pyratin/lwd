{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/sentencesGet.js"],"names":["sentenceMaxLength","sentenceNormalizeRegExp","sentenceNormalizedGetFn","text","joinString","split","reduce","memo","_text","length","trim","sentenceNormalizedGet","texts","match","sentenceNormalized","slice","index","sentencesGetFn","paragraph","paragraphIndex","sentences","sbd","map","sentenceIndex","paragraphs","_sentences","sentence"],"mappings":"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","sourcesContent":["'use strict';\n\nimport sbd from 'sbd';\n\nconst sentenceMaxLength = 100;\n\nconst sentenceNormalizeRegExp = /,\\s/;\n\nconst sentenceNormalizedGetFn = (\n  text\n) => {\n\n  const joinString = ', ';\n\n  return text\n    .split(\n      sentenceNormalizeRegExp\n    )\n    .reduce(\n      (\n        memo,\n        _text\n      ) => {\n\n        switch (\n          true\n        ) {\n\n          case (\n            !memo.length\n          ) :\n\n            return [\n              _text\n            ];\n\n          case (\n            (\n              memo.length < \n              2\n            ) &&\n            (\n              memo[\n                0\n              ]\n                .length +\n              _text.length +\n              +joinString.length\n            ) < \n            sentenceMaxLength\n          ) :\n\n            return [\n              `\n                ${\n                  memo[\n                    0\n                  ]\n                    .trim()\n                }${\n                  joinString\n                }${\n                  _text.trim()\n                }\n              `\n                .trim()\n            ];\n\n          case (\n            memo.length < 2\n          ) :\n\n            return [\n              memo[\n                0\n              ],\n              _text.trim()\n            ];\n\n          default:\n\n            return [\n              memo[\n                0\n              ],\n              `\n                ${\n                  memo[\n                    1\n                  ]\n                    .trim()\n                }${\n                  joinString\n                }${\n                  _text.trim()\n                }\n              `\n                .trim()\n            ];\n        }\n      },\n      []\n    );\n};\n\nconst sentenceNormalizedGet = (\n  text\n) => {\n\n  let texts = [\n    text\n  ];\n\n  while (\n    (\n      (\n        texts[\n          texts.length - 1\n        ]\n          .length\n      ) >\n      sentenceMaxLength\n    ) &&\n    (\n      !!texts[\n        texts.length -1\n      ]\n        .match(\n          sentenceNormalizeRegExp \n        )\n    )\n  ) {\n\n    const sentenceNormalized = sentenceNormalizedGetFn(\n      texts[\n        texts.length - 1\n      ]\n    );\n\n    texts = [\n      ...texts.slice(\n        0, -1\n      ),\n      ...sentenceNormalized\n    ];\n  }\n\n  texts = texts.reduce(\n    (\n      memo,\n      text,\n      index\n    ) => {\n\n      if (\n        index <\n        (\n          texts.length - 1\n        )\n      ) {\n\n        return [\n          ...memo,\n          `\n            ${\n            text\n            } ...,\n          `\n            .trim()\n        ];\n      }\n\n      return [\n        ...memo,\n        text\n      ];\n    },\n    []\n  );\n\n  return (\n    texts\n  );\n};\n\nconst sentencesGetFn = (\n  paragraph,\n  paragraphIndex\n) => {\n\n  let sentences = sbd.sentences(\n    paragraph\n  );\n  \n  sentences = sentences.reduce(\n    (\n      memo,\n      text\n    ) => {\n\n      return [\n        ...memo,\n        ...sentenceNormalizedGet(\n          text\n        )\n      ];\n    },\n    []\n  )\n    .map(\n      (\n        text,\n        sentenceIndex\n      ) => {\n\n        return {\n          text,\n          paragraphIndex,\n          sentenceIndex\n        };\n      }\n    );\n\n  return (\n    sentences\n  );\n};\n\nexport default (\n  paragraphs\n) => {\n\n  let sentences = paragraphs.reduce(\n    (\n      memo,\n      paragraph,\n      paragraphIndex\n    ) => {\n\n      const _sentences = sentencesGetFn(\n        paragraph,\n        paragraphIndex\n      );\n\n      return [\n        ...memo,\n        ..._sentences\n      ];\n    },\n    []\n  );\n\n  sentences = (\n    sentences\n  ) &&\n    sentences.reduce(\n      (\n        memo,\n        sentence\n      ) => {\n\n        if (\n          (\n            memo.length >= \n            5\n          ) &&\n          !memo[\n            memo.length - 1\n          ]\n            .text\n            .match(/\\s...,$/)\n        ) {\n\n          return (\n            memo\n          );\n        }\n\n        return [\n          ...memo,\n          sentence\n        ];\n      },\n      []\n    );\n\n  return (\n    sentences\n  );\n};\n"],"file":"sentencesGet.js"}