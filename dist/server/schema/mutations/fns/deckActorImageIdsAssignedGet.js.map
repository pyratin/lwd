{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/deckActorImageIdsAssignedGet.js"],"names":["shuffledGet","els","reduce","memo","el","random","Math","sort","a","b","map","starringActorsFlatlistGet","characters","character","exists","find","_memo","text","actor","starringCardIndexes","role","spoofActorWeightAssignedGetFn","spoofActor","_genreId","genreGeneralId","spoofActorsPrevious","db","_spoofActorsPrevious","index","_id","toString","count","distance","length","ObjectID","_setId","undefined","genreId","genreMatch","spoofActorPrevious","setMatch","genreGeneralMatch","spoofActorWeightAssignedGet","_spoofActors","_spoofActor","then","result","res","Promise","resolve","spoofActors","spoofActorsSortedGet","spoofActorsGetFn","starringActor","spoofActorsGet","starringActors","genre","actorText","spoofActorByTextGet","charactersActorAssignedGet","_actor","cardCharactersGet","starringCardIndexMax","max","cardCharacters","Array","fill","_","includes","actorImageIdsPreviousGet","cardCharacter","actorImageId","actorImageIdWeightGet","actorImageIdsPrevious","_actorImageIdsPrevious","actorImageIdWeightAssignedGet","weight","actorImageIdsSortedByWeightGet","actorImageIds","actorImageIdsWeightAssigned","cardCharactersActorImageIdAssignedGetFn","_actorId","projection","skip","limit","actorImages","cardCharactersActorImageIdAssignedGet","cardsCharacterAssignedGet","cards","card","charactersActorImageIdAssignedGet","starringIndex","deck","splash"],"mappings":"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","sourcesContent":["'use strict';\n\nimport {\n  ObjectID\n} from 'mongodb';\n\nimport {\n  genreFindOne\n} from '~/js/server/data/genre';\nimport {\n  setFindOne\n} from '~/js/server/data/set';\nimport {\n  actorsFind as actorsFindFn\n} from '~/js/server/data/actor';\nimport {\n  actorImagesFind\n} from '~/js/server/data/actorImage';\n\nconst shuffledGet = (\n  els\n) => {\n\n  return els.reduce(\n    (\n      memo,\n      el\n    ) => {\n\n      return [\n        ...memo,\n        {\n          el,\n          random: Math.random()\n        }\n      ];\n    },\n    []\n  )\n    .sort(\n      (\n        a, b\n      ) => {\n\n        switch (\n          true\n        ) {\n\n          case (\n            a.random >\n            b.random\n          ) :\n\n            return 1;\n\n          case (\n            b.random >\n            a.random\n          ) :\n\n            return -1;\n        }\n      }\n    )\n    .map(\n      (\n        {\n          el\n        }\n      ) => {\n\n        return (\n          el\n        );\n      }\n    );\n};\n\nconst starringActorsFlatlistGet = (\n  characters\n) => {\n\n  return characters.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      const exists = memo.find(\n        (\n          _memo\n        ) => {\n\n          return (\n            _memo.text ===\n            character.actor.text\n          );\n        }\n      );\n\n      if (\n        character.starringCardIndexes &&\n        !exists\n      ) {\n\n        return [\n          ...memo,\n          {\n            ...character.actor,\n            role: character.role\n          }\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n};\n\nconst spoofActorWeightAssignedGetFn = async (\n  spoofActor,\n  _genreId,\n  genreGeneralId,\n  spoofActorsPrevious,\n  db\n) => {\n\n  const {\n    count,\n    distance\n  } = spoofActorsPrevious.reduce(\n    (\n      memo,\n      _spoofActorsPrevious,\n      index\n    ) => {\n\n      if (\n        _spoofActorsPrevious._id.toString() ===\n        spoofActor._id.toString()\n      ) {\n\n        return {\n          count: memo.count + 1,\n          distance: spoofActorsPrevious.length - (\n            index + 1\n          )\n        };\n      }\n\n      return (\n        memo\n      );\n    },\n    {\n      count: 0,\n      distance: spoofActorsPrevious.length\n    }\n  );\n\n  const genreId = (\n    await setFindOne(\n      {\n        _id: new ObjectID(\n          spoofActor._setId\n        )\n      },\n      undefined,\n      db\n    )\n  )?._genreId;\n\n  const genreMatch = (\n    _genreId?.toString() ===\n    genreId?.toString()\n  );\n\n  const spoofActorPrevious = spoofActorsPrevious[\n    spoofActorsPrevious.length - 1\n  ];\n\n  const _setId = (\n    spoofActorPrevious\n  ) ?\n    spoofActorPrevious._setId :\n    null;\n\n  const setMatch = (\n    _setId?.toString() ===\n    spoofActor._setId\n      .toString()\n  );\n\n  const genreGeneralMatch = (\n    genreGeneralId?.toString() ===\n    genreId?.toString()\n  );\n\n  return {\n    ...spoofActor,\n    count,\n    distance,\n    genreMatch,\n    setMatch,\n    genreGeneralMatch\n  };\n};\n\nconst spoofActorWeightAssignedGet = async (\n  _spoofActors,\n  genreId,\n  spoofActorsPrevious,\n  db\n) => {\n\n  const {\n    _id: genreGeneralId\n  } = await genreFindOne(\n    {\n      text: 'general'\n    },\n    undefined,\n    db\n  );\n\n  const spoofActors = await _spoofActors.reduce(\n    (\n      memo,\n      _spoofActor\n    ) => {\n\n      return memo.then(\n        (\n          result\n        ) => {\n\n          return spoofActorWeightAssignedGetFn(\n            _spoofActor,\n            genreId,\n            genreGeneralId,\n            spoofActorsPrevious,\n            db\n          )\n            .then(\n              (\n                res\n              ) => {\n\n                return [\n                  ...result,\n                  res\n                ];\n              }\n            );\n        }\n      );\n    },\n    Promise.resolve(\n      []\n    )\n  );\n\n  return (\n    spoofActors\n  );\n};\n\nconst spoofActorsSortedGet = (\n  spoofActors\n) => {\n\n  return spoofActors.sort(\n    (\n      a, b\n    ) => {\n\n      switch (\n        true\n      ) {\n\n        case (\n          a.count >\n          b.count\n        ) :\n\n          return 1;\n\n        case (\n          b.count >\n          a.count\n        ) :\n\n          return -1;\n\n        case (\n          a.distance >\n          b.distance\n        ) :\n\n          return -1;\n\n        case (\n          b.distance >\n          a.distance\n        ) :\n\n          return 1;\n\n        case (\n          a.genreMatch &&\n          !b.genreMatch\n        ) :\n\n          return -1;\n\n        case (\n          b.genreMatch &&\n          !a.genreMatch\n        ) :\n\n          return 1;\n\n        case (\n          a.setMatch &&\n          !b.setMatch\n        ) :\n\n          return -1;\n\n        case (\n          b.setMatch &&\n          !a.setMatch\n        ) :\n\n          return 1;\n\n        case (\n          a.genreGeneralMatch &&\n          !b.genreGeneralMatch\n        ) :\n\n          return -1;\n\n        case (\n          b.genreGeneralMatch &&\n          !a.genreGeneralMatch\n        ) :\n\n          return 1;\n      }\n    }\n  );\n};\n\nconst spoofActorsGetFn = async (\n  starringActor,\n  genreId,\n  spoofActorsPrevious,\n  db\n) => {\n\n  const role = starringActor.role;\n\n  let spoofActors = await actorsFindFn(\n    {\n      role\n    },\n    undefined,\n    db\n  );\n\n  spoofActors = shuffledGet(\n    spoofActors\n  );\n\n  spoofActors = await spoofActorWeightAssignedGet(\n    spoofActors,\n    genreId,\n    spoofActorsPrevious,\n    db\n  );\n\n  spoofActors = spoofActorsSortedGet(\n    spoofActors,\n    spoofActorsPrevious\n  );\n\n  const spoofActor = spoofActors[\n    0\n  ];\n\n  return (\n    spoofActor\n  );\n};\n\nconst spoofActorsGet = async (\n  starringActors,\n  genre,\n  db\n) => {\n\n  const genreId = (\n    await genreFindOne(\n      {\n        text: genre\n      },\n      undefined,\n      db\n    )\n  )?._id;\n\n  return starringActors.reduce(\n    (\n      memo,\n      starringActor\n    ) => {\n\n      return memo.then(\n        (\n          res\n        ) => {\n\n          return spoofActorsGetFn(\n            starringActor,\n            genreId,\n            res,\n            db\n          )\n            .then(\n              (\n                result\n              ) => {\n\n                return [\n                  ...res,\n                  {\n                    ...result,\n                    actorText: starringActor.text\n                  }\n                ];\n              }\n            );\n        }\n      );\n    },\n    Promise.resolve(\n      []\n    )\n  );\n};\n\nconst spoofActorByTextGet = (\n  actorText,\n  spoofActors\n) => {\n\n  return spoofActors.find(\n    (\n      spoofActor\n    ) => {\n\n      return (\n        spoofActor.actorText ===\n        actorText\n      );\n    }\n  );\n};\n\nconst charactersActorAssignedGet = (\n  characters,\n  spoofActors\n) => {\n\n  return characters.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      if (\n        character.starringCardIndexes\n      ) {\n\n        const spoofActor = spoofActorByTextGet(\n          character.actor.text,\n          spoofActors\n        );\n\n        return [\n          ...memo,\n          {\n            ...character,\n            _actor: spoofActor\n          }\n        ];\n      }\n\n      return [\n        ...memo,\n        character\n      ];\n    },\n    []\n  );\n};\n\nconst cardCharactersGet = (\n  characters\n) => {\n\n  const starringCardIndexes = characters.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      return [\n        ...memo,\n        ...character.starringCardIndexes ||\n        []\n      ];\n    },\n    []\n  );\n\n  const starringCardIndexMax = (\n    starringCardIndexes.length\n  ) ?\n    Math.max(\n      ...starringCardIndexes\n    ) :\n    -1;\n\n  let cardCharacters = new Array(\n    starringCardIndexMax + 1\n  )\n    .fill();\n\n  cardCharacters = cardCharacters.reduce(\n    (\n      memo,\n      _,\n      index\n    ) => {\n\n      const character = characters.find(\n        (\n          character\n        ) => {\n\n          return (\n            character.starringCardIndexes?.includes(\n              index\n            )\n          );\n        }\n      );\n\n      if (\n        character\n      ) {\n\n        return [\n          ...memo,\n          {\n            ...character\n          }\n        ];\n      }\n\n      return [\n        ...memo,\n        null\n      ];\n    },\n    []\n  );\n\n  return (\n    cardCharacters\n  );\n};\n\nconst actorImageIdsPreviousGet = (\n  cardCharacters\n) => {\n\n  return cardCharacters.reduce(\n    (\n      memo,\n      cardCharacter\n    ) => {\n\n      const actorImageId = cardCharacter?.actorImageId;\n\n      if (\n        actorImageId\n      ) {\n\n        return [\n          ...memo,\n          actorImageId\n        ];\n      }\n\n      return (\n        memo\n      );\n    },\n    []\n  );\n};\n\nconst actorImageIdWeightGet = (\n  actorImageId,\n  actorImageIdsPrevious\n) => {\n\n  return actorImageIdsPrevious.reduce(\n    (\n      memo,\n      _actorImageIdsPrevious,\n      index\n    ) => {\n\n      if (\n        _actorImageIdsPrevious.toString() ===\n        actorImageId.toString()\n      ) {\n\n        return {\n          count: memo.count + 1,\n          distance: actorImageIdsPrevious.length - (\n            index + 1\n          )\n        };\n      }\n\n      return (\n        memo\n      );\n    },\n    {\n      count: 0,\n      distance: actorImageIdsPrevious.length\n    }\n  );\n};\n\nconst actorImageIdWeightAssignedGet = (\n  actorImageId,\n  actorImageIdsPrevious\n) => {\n\n  const weight = actorImageIdWeightGet(\n    actorImageId,\n    actorImageIdsPrevious\n  );\n\n  return {\n    actorImageId,\n    ...weight\n  };\n};\n\nconst actorImageIdsSortedByWeightGet = (\n  actorImageIds,\n  actorImageIdsPrevious\n) => {\n\n  const actorImageIdsWeightAssigned = actorImageIds.reduce(\n    (\n      memo,\n      actorImageId\n    ) => {\n\n      return [\n        ...memo,\n        actorImageIdWeightAssignedGet(\n          actorImageId,\n          actorImageIdsPrevious\n        )\n      ];\n    },\n    []\n  );\n\n  return actorImageIdsWeightAssigned.sort(\n    (\n      a, b\n    ) => {\n\n      switch (\n        true\n      ) {\n\n        case (\n          a.count >\n          b.count\n        ) :\n\n          return 1;\n\n        case (\n          b.count >\n          a.count\n        ) :\n\n          return -1;\n\n        case (\n          a.distance >\n          b.distance\n        ) :\n\n          return -1;\n\n        case (\n          b.distance >\n          a.distance\n        ) :\n\n          return 1;\n      }\n    }\n  )\n    .map(\n      (\n        {\n          actorImageId\n        }\n      ) => {\n\n        return (\n          actorImageId\n        );\n      }\n    );\n};\n\nconst cardCharactersActorImageIdAssignedGetFn = async (\n  cardCharacter,\n  cardCharacters,\n  db\n) => {\n\n  if (\n    !cardCharacter?.starringCardIndexes\n  ) {\n\n    return Promise.resolve(\n      null\n    );\n  }\n\n  const actorImageIdsPrevious = actorImageIdsPreviousGet(\n    cardCharacters\n  );\n\n  let actorImageIds = await actorImagesFind(\n    {\n      _actorId: new ObjectID(\n        cardCharacter._actor._id\n      )\n    },\n    {\n      projection: {\n        _id: 1\n      },\n      sort: {},\n      skip: 0,\n      limit: 0\n    },\n    db\n  )\n    .then(\n      (\n        actorImages\n      ) => {\n\n        return actorImages.map(\n          (\n            {\n              _id: actorImageId\n            }\n          ) => {\n\n            return (\n              actorImageId.toString()\n            );\n          }\n        );\n      }\n    );\n\n  actorImageIds = shuffledGet(\n    actorImageIds\n  );\n\n  actorImageIds = actorImageIdsSortedByWeightGet(\n    actorImageIds,\n    actorImageIdsPrevious\n  );\n\n  const actorImageId = actorImageIds[\n    0\n  ];\n\n  return (\n    actorImageId\n  );\n};\n\nconst cardCharactersActorImageIdAssignedGet = (\n  cardCharacters,\n  db\n) => {\n\n  return cardCharacters.reduce(\n    (\n      memo,\n      cardCharacter\n    ) => {\n\n      return memo.then(\n        (\n          res\n        ) => {\n\n          return cardCharactersActorImageIdAssignedGetFn(\n            cardCharacter,\n            res,\n            db\n          )\n            .then(\n              (\n                result\n              ) => {\n\n                if (\n                  result\n                ) {\n\n                  delete cardCharacter._actor;\n\n                  return [\n                    ...res,\n                    {\n                      ...cardCharacter,\n                      actorImageId: result\n                    }\n                  ];\n                }\n\n                return [\n                  ...res,\n                  cardCharacter\n                ];\n              }\n            );\n        }\n      );\n    },\n    Promise.resolve(\n      []\n    )\n  );\n};\n\nconst cardsCharacterAssignedGet = (\n  cards,\n  cardCharacters\n) => {\n\n  return cards.reduce(\n    (\n      memo,\n      card,\n      index\n    ) => {\n\n      const cardCharacter = cardCharacters[\n        index\n      ];\n\n      if (\n        cardCharacter\n      ) {\n\n        return [\n          ...memo,\n          {\n            ...card,\n            actorImageId: cardCharacter.actorImageId\n          }\n        ];\n      }\n\n      return [\n        ...memo,\n        card\n      ];\n    },\n    []\n  );\n};\n\nconst charactersActorImageIdAssignedGet = (\n  characters,\n  cardCharacters\n) => {\n\n  return characters.reduce(\n    (\n      memo,\n      character\n    ) => {\n\n      const cardCharacter = cardCharacters.find(\n        (\n          cardCharacter\n        ) => {\n\n          return (\n            cardCharacter?.starringIndex ===\n            character.starringIndex\n          );\n        }\n      );\n\n      return [\n        ...memo,\n        {\n          ...character,\n          actorImageId: cardCharacter?.actorImageId\n        }\n      ];\n    },\n    []\n  );\n};\n\nexport default async (\n  deck,\n  genre,\n  db\n) => {\n\n  let starringActors = starringActorsFlatlistGet(\n    deck.splash.characters\n  );\n\n  const spoofActors = await spoofActorsGet(\n    starringActors,\n    genre,\n    db\n  );\n\n  let characters = charactersActorAssignedGet(\n    deck.splash.characters,\n    spoofActors\n  );\n\n  let cardCharacters = cardCharactersGet(\n    characters\n  );\n\n  cardCharacters = \n  await cardCharactersActorImageIdAssignedGet(\n    cardCharacters,\n    db\n  );\n\n  const cards = cardsCharacterAssignedGet(\n    deck.cards,\n    cardCharacters\n  ); \n\n  characters = charactersActorImageIdAssignedGet(\n    characters,\n    cardCharacters\n  );\n\n  return {\n    ...deck,\n    cards,\n    splash: {\n      ...deck.splash,\n      characters\n    }\n  };\n};\n"],"file":"deckActorImageIdsAssignedGet.js"}