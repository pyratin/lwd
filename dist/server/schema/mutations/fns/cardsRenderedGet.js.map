{"version":3,"sources":["../../../../../js/server/schema/mutations/fns/cardsRenderedGet.js"],"names":["cardsFilterTypeAssignedGetFn","card","character","text","dualRoleIndex","cardsFilterTypeAssignedGet","_cards","cards","reduce","memo","_card","filterType","cardsFilterAppliedGet","then","res","result","base64","Promise","resolve","cardsRenderedGet","renderText","db","base64s"],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAEA;;AAEA;;AAEA;;AAGA;;;;;;AAIA,IAAMA,4BAA4B,GAAG,SAA/BA,4BAA+B,CACnCC,IADmC,EAEhC;AAAA;;AAEH,UACE,IADF;AAIE,SACE,EAACA,IAAD,aAACA,IAAD,0CAACA,IAAI,CAAEC,SAAP,oDAAC,gBAAiBC,IAAlB,CADF;AAIE,aACE,OADF;;AAIF,SACEF,IAAI,CAACG,aAAL,IACA,CAFF;AAKE,aACE,UADF;;AAIF;AAEE,aACE,IADF;AAvBJ;AA2BD,CA/BD;;AAiCA,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CACjCC,MADiC,EAE9B;AAEH,MAAMC,KAAK,GAAGD,MAAM,CAACE,MAAP,CACZ,UACEC,IADF,EAEEC,KAFF,EAGK;AAEH,QAAMC,UAAU,GAAGX,4BAA4B,CAC7CU,KAD6C,CAA/C;AAIA,yDACKD,IADL,oCAGOC,KAHP;AAIIC,MAAAA,UAAU,EAAVA;AAJJ;AAOD,GAjBW,EAkBZ,EAlBY,CAAd;;AAqBA,SACEJ,KADF;AAGD,CA5BD;;AA8BA,IAAMK,qBAAqB,GAAG,SAAxBA,qBAAwB,CAC5BL,KAD4B,EAEzB;AAEH,SAAOA,KAAK,CAACC,MAAN,CACL,UACEC,IADF,EAEER,IAFF,EAGK;AAEH,WAAOQ,IAAI,CAACI,IAAL,CACL,UACEC,GADF,EAEK;AAEH,UACEb,IAAI,CAACU,UADP,EAEE;AAEA,eAAO,wCACLV,IADK,EAGJY,IAHI,CAIH,UACEE,MADF,EAEK;AAEH,+DACKD,GADL,oCAGOb,IAHP;AAIIe,YAAAA,MAAM,EAAED;AAJZ;AAOD,SAfE,CAAP;AAiBD;;AAED,2DACKD,GADL,IAEEb,IAFF;AAID,KAhCI,CAAP;AAkCD,GAxCI,EAyCLgB,OAAO,CAACC,OAAR,CACE,EADF,CAzCK,CAAP;AA6CD,CAjDD;;AAmDA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CACvBZ,KADuB,EAEpB;AAEH,SAAOA,KAAK,CAACC,MAAN,CACL,UACEC,IADF,EAEER,IAFF,EAGK;AAEH,WAAOQ,IAAI,CAACI,IAAL,CACL,UACEC,GADF,EAEK;AAEH,aAAO,yCACLb,IAAI,CAACe,MADA,EAELf,IAAI,CAACmB,UAFA,EAGL,6BAHK,EAIL,EAJK,EAKL,EALK,EAOJP,IAPI,CAQH,UACEE,MADF,EAEK;AAEH,6DACKD,GADL,IAEEC,MAFF;AAID,OAhBE,CAAP;AAkBD,KAvBI,CAAP;AAyBD,GA/BI,EAgCLE,OAAO,CAACC,OAAR,CACE,EADF,CAhCK,CAAP;AAoCD,CAxCD;;;2FA0Ce,iBACbZ,MADa,EAEbe,EAFa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAKK,wCAChBf,MADgB,EAEhBe,EAFgB,CALL;;AAAA;AAKTd,YAAAA,KALS;AAUbA,YAAAA,KAAK,GAAGF,0BAA0B,CAChCE,KADgC,CAAlC;AAVa;AAAA,mBAcCK,qBAAqB,CACjCL,KADiC,CAdtB;;AAAA;AAcbA,YAAAA,KAda;AAAA;AAAA,mBAkBSY,gBAAgB,CACpCZ,KADoC,CAlBzB;;AAAA;AAkBPe,YAAAA,OAlBO;AAAA,6CAuBXA,OAvBW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["'use strict';\n\nimport cardsBase64AssignedGet from \n  './cardsBase64AssignedGet';\nimport base64FilterAppliedGet from \n  './base64FilterAppliedGet';\nimport base64TextCompositedGet from \n  './base64TextCompositedGet';\n\nimport {\n  outputResGet\n} from '~/js/server/fns/variable';\n\nconst cardsFilterTypeAssignedGetFn = (\n  card\n) => {\n\n  switch (\n    true\n  ) {\n\n    case (\n      !card?.character?.text\n    ) :\n\n      return(\n        'giphy'\n      );\n\n    case (\n      card.dualRoleIndex >=\n      0\n    ) :\n\n      return (\n        'dualRole'\n      );\n\n    default : \n\n      return (\n        null\n      );\n  }\n};\n\nconst cardsFilterTypeAssignedGet = (\n  _cards\n) => {\n\n  const cards = _cards.reduce(\n    (\n      memo,\n      _card\n    ) => {\n\n      const filterType = cardsFilterTypeAssignedGetFn(\n        _card\n      );\n\n      return [\n        ...memo,\n        {\n          ..._card,\n          filterType\n        }\n      ];\n    },\n    []\n  );\n\n  return (\n    cards\n  );\n};\n\nconst cardsFilterAppliedGet = (\n  cards\n) => {\n\n  return cards.reduce(\n    (\n      memo,\n      card\n    ) => {\n\n      return memo.then(\n        (\n          res\n        ) => {\n\n          if (\n            card.filterType\n          ) {\n\n            return base64FilterAppliedGet(\n              card\n            )\n              .then(\n                (\n                  result\n                ) => {\n\n                  return [\n                    ...res,\n                    {\n                      ...card,\n                      base64: result\n                    }\n                  ];\n                }\n              );\n          }\n\n          return [\n            ...res,\n            card\n          ];\n        }\n      );\n    },\n    Promise.resolve(\n      []\n    )\n  );\n};\n\nconst cardsRenderedGet = (\n  cards\n) => {\n\n  return cards.reduce(\n    (\n      memo,\n      card\n    ) => {\n\n      return memo.then(\n        (\n          res\n        ) => {\n\n          return base64TextCompositedGet(\n            card.base64,\n            card.renderText,\n            outputResGet(),\n            20,\n            10\n          )\n            .then(\n              (\n                result\n              ) => {\n\n                return [\n                  ...res,\n                  result\n                ];\n              }\n            );\n        }\n      );\n    },\n    Promise.resolve(\n      []\n    )\n  );\n};\n\nexport default async (\n  _cards,\n  db\n) => {\n\n  let cards = await cardsBase64AssignedGet(\n    _cards,\n    db\n  );\n\n  cards = cardsFilterTypeAssignedGet(\n    cards\n  );\n\n  cards = await cardsFilterAppliedGet(\n    cards\n  );\n\n  const base64s = await cardsRenderedGet(\n    cards\n  );\n\n  return (\n    base64s\n  );\n};\n"],"file":"cardsRenderedGet.js"}