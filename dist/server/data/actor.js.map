{"version":3,"sources":["../../../js/server/data/actor.js"],"names":["actorCollectionName","actorsFind","query","options","projection","sort","skip","limit","db","actorCreate","filter","update","upsert","returnOriginal","actorRemove","then","actor","_id","actorsBySetIdRemove","setId","_setId","ObjectID","undefined","actors","reduce","memo","actorId","res","result","Promise","resolve"],"mappings":"AAAA;;;;;;;;;;;;;;;AAEA;;AAIA;;AAKA;;AAIA,IAAMA,mBAAmB,GAAG,QAA5B;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CACjBC,KADiB,EASd;AAAA,MAPHC,OAOG,uEAPO;AACRC,IAAAA,UAAU,EAAE,EADJ;AAERC,IAAAA,IAAI,EAAE,EAFE;AAGRC,IAAAA,IAAI,EAAE,CAHE;AAIRC,IAAAA,KAAK,EAAE;AAJC,GAOP;AAAA,MADHC,EACG;AAEH,SAAO,iBACLN,KADK,EAELC,OAFK,EAGLH,mBAHK,EAILQ,EAJK,CAAP;AAMD,CAjBD;;;;AAmBA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAClBC,MADkB,EAElBC,MAFkB,EAQf;AAAA,MALHR,OAKG,uEALO;AACRS,IAAAA,MAAM,EAAE,IADA;AAERC,IAAAA,cAAc,EAAE;AAFR,GAKP;AAAA,MADHL,EACG;AAEH,SAAO,6BACLE,MADK,EAELC,MAFK,EAGLR,OAHK,EAILH,mBAJK,EAKLQ,EALK,CAAP;AAOD,CAjBD;;;;AAmBA,IAAMM,WAAW,GAAG,SAAdA,WAAc,CAClBJ,MADkB,EAMf;AAAA,MAJHP,OAIG,uEAJO;AACRU,IAAAA,cAAc,EAAE;AADR,GAIP;AAAA,MADHL,EACG;AAEH,SAAO,6BACLE,MADK,EAELP,OAFK,EAGLH,mBAHK,EAILQ,EAJK,EAMJO,IANI;AAAA,6FAOH,iBACEC,KADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAIQ,4CACJA,KAAK,CAACC,GADF,EAEJT,EAFI,CAJR;;AAAA;AAAA,+CAUIQ,KAVJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAPG;;AAAA;AAAA;AAAA;AAAA,MAAP;AAqBD,CA7BD;;;;AA+BA,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,CAC1BC,KAD0B,EAE1BX,EAF0B,EAGvB;AAEH,SAAOP,UAAU,CACf;AACEmB,IAAAA,MAAM,EAAE,IAAIC,iBAAJ,CACNF,KADM;AADV,GADe,EAMfG,SANe,EAOfd,EAPe,CAAV,CASJO,IATI,CAUH,UACEQ,MADF,EAEK;AAEH,WAAOA,MAAM,CAACC,MAAP,CACL,UACEC,IADF,SAKK;AAAA,UAFIC,OAEJ,SAFDT,GAEC;AAEH,aAAOQ,IAAI,CAACV,IAAL,CACL,UACEY,GADF,EAEK;AAEH,eAAOb,WAAW,CAChB;AACEG,UAAAA,GAAG,EAAE,IAAII,iBAAJ,CACHK,OADG;AADP,SADgB,EAMhBJ,SANgB,EAOhBd,EAPgB,CAAX,CASJO,IATI,CAUH,UACEa,MADF,EAEK;AAEH,+DACKD,GADL,IAEEC,MAFF;AAID,SAlBE,CAAP;AAoBD,OAzBI,CAAP;AA2BD,KAnCI,EAoCLC,OAAO,CAACC,OAAR,CACE,EADF,CApCK,CAAP;AAwCD,GAtDE,CAAP;AAwDD,CA7DD","sourcesContent":["'use strict';\n\nimport {\n  ObjectID\n} from 'mongodb';\n\nimport {\n  find,\n  findOneAndUpdate,\n  findOneAndDelete\n} from './index';\nimport {\n  actorImagesByActorIdRemove\n} from './actorImage';\n\nconst actorCollectionName = 'actors';\n\nconst actorsFind = (\n  query,\n  options = {\n    projection: {},\n    sort: {},\n    skip: 0,\n    limit: 0\n  },\n  db\n) => {\n\n  return find(\n    query,\n    options,\n    actorCollectionName,\n    db\n  );\n};\n\nconst actorCreate = (\n  filter,\n  update,\n  options = {\n    upsert: true,\n    returnOriginal: false\n  },\n  db\n) => {\n\n  return findOneAndUpdate(\n    filter,\n    update,\n    options,\n    actorCollectionName,\n    db\n  );\n};\n\nconst actorRemove = (\n  filter,\n  options = {\n    returnOriginal: true\n  },\n  db\n) => {\n\n  return findOneAndDelete(\n    filter,\n    options,\n    actorCollectionName,\n    db\n  )\n    .then(\n      async (\n        actor\n      ) => {\n\n        await actorImagesByActorIdRemove(\n          actor._id,\n          db\n        );\n\n        return (\n          actor\n        );\n      }\n    );\n};\n\nconst actorsBySetIdRemove = (\n  setId,\n  db\n) => {\n\n  return actorsFind(\n    {\n      _setId: new ObjectID(\n        setId\n      )\n    },\n    undefined,\n    db\n  )\n    .then(\n      (\n        actors\n      ) => {\n\n        return actors.reduce(\n          (\n            memo,\n            {\n              _id: actorId\n            }\n          ) => {\n\n            return memo.then(\n              (\n                res\n              ) => {\n\n                return actorRemove(\n                  {\n                    _id: new ObjectID(\n                      actorId\n                    )\n                  },\n                  undefined,\n                  db\n                )\n                  .then(\n                    (\n                      result\n                    ) => {\n\n                      return [\n                        ...res,\n                        result\n                      ];\n                    }\n                  );\n              }\n            );\n          },\n          Promise.resolve(\n            []\n          )\n        );\n      }\n    );\n};\n\nexport {\n  actorsFind,\n  actorCreate,\n  actorRemove,\n  actorsBySetIdRemove\n};\n"],"file":"actor.js"}