{"version":3,"sources":["../../../js/server/data/set.js"],"names":["setCollectionName","setsFind","query","options","projection","sort","skip","limit","db","setFindOne","setCountDocuments","setCreate","filter","update","upsert","returnOriginal","setRemove","then","setId","_id","setsByGenreIdRemove","genreId","_genreId","ObjectID","undefined","sets","reduce","memo","res","result","Promise","resolve"],"mappings":"AAAA;;;;;;;;;;;AAEA;;AAIA;;AAOA;;AAIA,IAAMA,iBAAiB,GAAG,MAA1B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CACfC,KADe,EASZ;AAAA,MAPHC,OAOG,uEAPO;AACRC,IAAAA,UAAU,EAAE,EADJ;AAERC,IAAAA,IAAI,EAAE,EAFE;AAGRC,IAAAA,IAAI,EAAE,CAHE;AAIRC,IAAAA,KAAK,EAAE;AAJC,GAOP;AAAA,MADHC,EACG;AAEH,SAAO,iBACLN,KADK,EAELC,OAFK,EAGLH,iBAHK,EAILQ,EAJK,CAAP;AAMD,CAjBD;;;;AAmBA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CACjBP,KADiB,EAOd;AAAA,MALHC,OAKG,uEALO;AACRC,IAAAA,UAAU,EAAE,EADJ;AAERC,IAAAA,IAAI,EAAE;AAFE,GAKP;AAAA,MADHG,EACG;AAEH,SAAO,oBACLN,KADK,EAELC,OAFK,EAGLH,iBAHK,EAILQ,EAJK,CAAP;AAMD,CAfD;;;;AAiBA,IAAME,iBAAiB,GAAG,SAApBA,iBAAoB,CACxBR,KADwB,EAExBC,OAFwB,EAGxBK,EAHwB,EAIrB;AAEH,SAAO,2BACLN,KADK,EAELC,OAFK,EAGLH,iBAHK,EAILQ,EAJK,CAAP;AAMD,CAZD;;;;AAcA,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAChBC,MADgB,EAEhBC,MAFgB,EAQb;AAAA,MALHV,OAKG,uEALO;AACRW,IAAAA,MAAM,EAAE,IADA;AAERC,IAAAA,cAAc,EAAE;AAFR,GAKP;AAAA,MADHP,EACG;AAEH,SAAO,6BACLI,MADK,EAELC,MAFK,EAGLV,OAHK,EAILH,iBAJK,EAKLQ,EALK,CAAP;AAOD,CAjBD;;;;AAmBA,IAAMQ,SAAS,GAAG,SAAZA,SAAY,CAChBJ,MADgB,EAMb;AAAA,MAJHT,OAIG,uEAJO;AACRY,IAAAA,cAAc,EAAE;AADR,GAIP;AAAA,MADHP,EACG;AAEH,SAAO,6BACLI,MADK,EAELT,OAFK,EAGLH,iBAHK,EAILQ,EAJK,EAMJS,IANI,CAOH,gBAIK;AAAA,QAFIC,KAEJ,QAFDC,GAEC;AAEH,WAAO,gCACLD,KADK,EAELV,EAFK,CAAP;AAID,GAjBE,CAAP;AAmBD,CA3BD;;;;AA6BA,IAAMY,mBAAmB,GAAG,SAAtBA,mBAAsB,CAC1BC,OAD0B,EAE1Bb,EAF0B,EAGvB;AAEH,SAAOP,QAAQ,CACb;AACEqB,IAAAA,QAAQ,EAAE,IAAIC,iBAAJ,CACRF,OADQ;AADZ,GADa,EAMbG,SANa,EAObhB,EAPa,CAAR,CASJS,IATI,CAUH,UACEQ,IADF,EAEK;AAEH,WAAOA,IAAI,CAACC,MAAL,CACL,UACEC,IADF,SAKK;AAAA,UAFIT,KAEJ,SAFDC,GAEC;AAEH,aAAOQ,IAAI,CAACV,IAAL,CACL,UACEW,GADF,EAEK;AAEH,eAAOZ,SAAS,CACd;AACEG,UAAAA,GAAG,EAAE,IAAII,iBAAJ,CACHL,KADG;AADP,SADc,EAMdM,SANc,EAOdhB,EAPc,CAAT,CASJS,IATI,CAUH,UACEY,MADF,EAEK;AAEH,+DACKD,GADL,IAEEC,MAFF;AAID,SAlBE,CAAP;AAoBD,OAzBI,CAAP;AA2BD,KAnCI,EAoCLC,OAAO,CAACC,OAAR,CACE,EADF,CApCK,CAAP;AAwCD,GAtDE,CAAP;AAwDD,CA7DD","sourcesContent":["'use strict';\n\nimport {\n  ObjectID\n} from 'mongodb';\n\nimport {\n  find,\n  findOne,\n  countDocuments,\n  findOneAndUpdate,\n  findOneAndDelete\n} from './index';\nimport {\n  actorsBySetIdRemove\n} from './actor';\n\nconst setCollectionName = 'sets';\n\nconst setsFind = (\n  query,\n  options = {\n    projection: {},\n    sort: {},\n    skip: 0,\n    limit: 0\n  },\n  db\n) => {\n\n  return find(\n    query,\n    options,\n    setCollectionName,\n    db\n  );\n};\n\nconst setFindOne = (\n  query,\n  options = {\n    projection: {},\n    sort: {}\n  },\n  db\n) => {\n\n  return findOne(\n    query,\n    options,\n    setCollectionName,\n    db\n  );\n};\n\nconst setCountDocuments = (\n  query,\n  options,\n  db\n) => {\n\n  return countDocuments(\n    query,\n    options,\n    setCollectionName,\n    db\n  );\n};\n\nconst setCreate = (\n  filter,\n  update,\n  options = {\n    upsert: true,\n    returnOriginal: false\n  },\n  db\n) => {\n\n  return findOneAndUpdate(\n    filter,\n    update,\n    options,\n    setCollectionName,\n    db\n  );\n};\n\nconst setRemove = (\n  filter,\n  options = {\n    returnOriginal: true\n  },\n  db\n) => {\n\n  return findOneAndDelete(\n    filter,\n    options,\n    setCollectionName,\n    db\n  )\n    .then(\n      (\n        {\n          _id: setId\n        }\n      ) => {\n\n        return actorsBySetIdRemove(\n          setId,\n          db\n        );\n      }\n    );\n};\n\nconst setsByGenreIdRemove = (\n  genreId,\n  db\n) => {\n\n  return setsFind(\n    {\n      _genreId: new ObjectID(\n        genreId\n      )\n    },\n    undefined,\n    db\n  )\n    .then(\n      (\n        sets\n      ) => {\n\n        return sets.reduce(\n          (\n            memo,\n            {\n              _id: setId\n            }\n          ) => {\n\n            return memo.then(\n              (\n                res\n              ) => {\n\n                return setRemove(\n                  {\n                    _id: new ObjectID(\n                      setId\n                    )\n                  },\n                  undefined,\n                  db\n                )\n                  .then(\n                    (\n                      result\n                    ) => {\n\n                      return [\n                        ...res,\n                        result\n                      ];\n                    }\n                  );\n              }\n            );\n          },\n          Promise.resolve(\n            []\n          )\n        );\n      }\n    );\n};\n\nexport {\n  setsFind,\n  setFindOne,\n  setCountDocuments,\n  setCreate,\n  setRemove,\n  setsByGenreIdRemove\n};\n"],"file":"set.js"}