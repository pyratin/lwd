{"version":3,"sources":["../../../js/server/data/genre.js"],"names":["genreCollectionName","genresFind","query","options","projection","sort","skip","limit","db","genreFindOne","genreCountDocuments","genreCreate","filter","update","upsert","returnOriginal","genreRemove","then","genreId","_id","genresRemove","undefined","genres","reduce","memo","res","ObjectID","result","Promise","resolve"],"mappings":"AAAA;;;;;;;;;;;AAEA;;AAIA;;AAOA;;AAIA,IAAMA,mBAAmB,GAAG,QAA5B;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CACjBC,KADiB,EASd;AAAA,MAPHC,OAOG,uEAPO;AACRC,IAAAA,UAAU,EAAE,EADJ;AAERC,IAAAA,IAAI,EAAE,EAFE;AAGRC,IAAAA,IAAI,EAAE,CAHE;AAIRC,IAAAA,KAAK,EAAE;AAJC,GAOP;AAAA,MADHC,EACG;AAEH,SAAO,iBACLN,KADK,EAELC,OAFK,EAGLH,mBAHK,EAILQ,EAJK,CAAP;AAMD,CAjBD;;;;AAmBA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CACnBP,KADmB,EAOhB;AAAA,MALHC,OAKG,uEALO;AACRC,IAAAA,UAAU,EAAE,EADJ;AAERC,IAAAA,IAAI,EAAE;AAFE,GAKP;AAAA,MADHG,EACG;AAEH,SAAO,oBACLN,KADK,EAELC,OAFK,EAGLH,mBAHK,EAILQ,EAJK,CAAP;AAMD,CAfD;;;;AAiBA,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,CAC1BR,KAD0B,EAE1BC,OAF0B,EAG1BK,EAH0B,EAIvB;AAEH,SAAO,2BACLN,KADK,EAELC,OAFK,EAGLH,mBAHK,EAILQ,EAJK,CAAP;AAMD,CAZD;;;;AAcA,IAAMG,WAAW,GAAG,SAAdA,WAAc,CAClBC,MADkB,EAElBC,MAFkB,EAQf;AAAA,MALHV,OAKG,uEALO;AACRW,IAAAA,MAAM,EAAE,IADA;AAERC,IAAAA,cAAc,EAAE;AAFR,GAKP;AAAA,MADHP,EACG;AAEH,SAAO,6BACLI,MADK,EAELC,MAFK,EAGLV,OAHK,EAILH,mBAJK,EAKLQ,EALK,CAAP;AAOD,CAjBD;;;;AAmBA,IAAMQ,WAAW,GAAG,SAAdA,WAAc,CAClBJ,MADkB,EAMf;AAAA,MAJHT,OAIG,uEAJO;AACRY,IAAAA,cAAc,EAAE;AADR,GAIP;AAAA,MADHP,EACG;AAEH,SAAO,6BACLI,MADK,EAELT,OAFK,EAGLH,mBAHK,EAILQ,EAJK,EAMJS,IANI,CAOH,gBAIK;AAAA,QAFIC,OAEJ,QAFDC,GAEC;AAEH,WAAO,8BACLD,OADK,EAELV,EAFK,CAAP;AAID,GAjBE,CAAP;AAmBD,CA3BD;;;;AA6BA,IAAMY,YAAY,GAAG,SAAfA,YAAe,CACnBZ,EADmB,EAEhB;AAEH,SAAOP,UAAU,CACfoB,SADe,EAEfA,SAFe,EAGfb,EAHe,CAAV,CAKJS,IALI,CAMH,UACEK,MADF,EAEK;AAEH,WAAOA,MAAM,CAACC,MAAP,CACL,UACEC,IADF,SAKK;AAAA,UAFIN,OAEJ,SAFDC,GAEC;AAEH,aAAOK,IAAI,CAACP,IAAL,CACL,UACEQ,GADF,EAEK;AAEH,eAAOT,WAAW,CAChB;AACEG,UAAAA,GAAG,EAAE,IAAIO,iBAAJ,CACHR,OADG;AADP,SADgB,EAMhBG,SANgB,EAOhBb,EAPgB,CAAX,CASJS,IATI,CAUH,UACEU,MADF,EAEK;AAEH,+DACKF,GADL,IAEEE,MAFF;AAID,SAlBE,CAAP;AAoBD,OAzBI,CAAP;AA2BD,KAnCI,EAoCLC,OAAO,CAACC,OAAR,CACE,EADF,CApCK,CAAP;AAwCD,GAlDE,CAAP;AAoDD,CAxDD","sourcesContent":["'use strict';\n\nimport {\n  ObjectID\n} from 'mongodb';\n\nimport {\n  find,\n  findOne,\n  countDocuments,\n  findOneAndUpdate,\n  findOneAndDelete\n} from './index';\nimport {\n  setsByGenreIdRemove\n} from './set';\n\nconst genreCollectionName = 'genres';\n\nconst genresFind = (\n  query,\n  options = {\n    projection: {},\n    sort: {},\n    skip: 0,\n    limit: 0\n  },\n  db\n) => {\n\n  return find(\n    query,\n    options,\n    genreCollectionName,\n    db\n  );\n};\n\nconst genreFindOne = (\n  query,\n  options = {\n    projection: {},\n    sort: {}\n  },\n  db\n) => {\n\n  return findOne(\n    query,\n    options,\n    genreCollectionName,\n    db\n  );\n};\n\nconst genreCountDocuments = (\n  query,\n  options,\n  db\n) => {\n\n  return countDocuments(\n    query,\n    options,\n    genreCollectionName,\n    db\n  );\n};\n\nconst genreCreate = (\n  filter,\n  update,\n  options = {\n    upsert: true,\n    returnOriginal: false\n  },\n  db\n) => {\n\n  return findOneAndUpdate(\n    filter,\n    update,\n    options,\n    genreCollectionName,\n    db\n  );\n};\n\nconst genreRemove = (\n  filter,\n  options = {\n    returnOriginal: true\n  },\n  db\n) => {\n\n  return findOneAndDelete(\n    filter,\n    options,\n    genreCollectionName,\n    db\n  )\n    .then(\n      (\n        {\n          _id: genreId\n        }\n      ) => {\n\n        return setsByGenreIdRemove(\n          genreId,\n          db\n        );\n      }\n    );\n};\n\nconst genresRemove = (\n  db\n) => {\n\n  return genresFind(\n    undefined,\n    undefined,\n    db\n  )\n    .then(\n      (\n        genres\n      ) => {\n\n        return genres.reduce(\n          (\n            memo,\n            {\n              _id: genreId\n            }\n          ) => {\n\n            return memo.then(\n              (\n                res\n              ) => {\n\n                return genreRemove(\n                  {\n                    _id: new ObjectID(\n                      genreId\n                    )\n                  },\n                  undefined,\n                  db\n                )\n                  .then(\n                    (\n                      result\n                    ) => {\n\n                      return [\n                        ...res,\n                        result\n                      ];\n                    }\n                  );\n              }\n            );\n          },\n          Promise.resolve(\n            []\n          )\n        );\n      }\n    );\n};\n\nexport {\n  genresFind,\n  genreFindOne,\n  genreCountDocuments,\n  genreCreate,\n  genreRemove,\n  genresRemove\n};\n"],"file":"genre.js"}