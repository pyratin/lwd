{"version":3,"sources":["../../../js/server/data/actorImage.js"],"names":["actorImageCollectionName","actorImagesFind","query","options","projection","sort","skip","limit","db","actorImageFindOne","actorImageCreate","filter","update","upsert","returnOriginal","actorImageRemove","actorImagesByActorIdRemove","actorId","_actorId","ObjectID","_id","then","actorImages","reduce","memo","actorImageId","res","undefined","result","Promise","resolve"],"mappings":"AAAA;;;;;;;;;;;AAEA;;AAIA;;AAOA,IAAMA,wBAAwB,GAAG,aAAjC;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CACtBC,KADsB,EASnB;AAAA,MAPHC,OAOG,uEAPO;AACRC,IAAAA,UAAU,EAAE,EADJ;AAERC,IAAAA,IAAI,EAAE,EAFE;AAGRC,IAAAA,IAAI,EAAE,CAHE;AAIRC,IAAAA,KAAK,EAAE;AAJC,GAOP;AAAA,MADHC,EACG;AAEH,SAAO,iBACLN,KADK,EAELC,OAFK,EAGLH,wBAHK,EAILQ,EAJK,CAAP;AAMD,CAjBD;;;;AAmBA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CACxBP,KADwB,EAOrB;AAAA,MALHC,OAKG,uEALO;AACRC,IAAAA,UAAU,EAAE,EADJ;AAERC,IAAAA,IAAI,EAAE;AAFE,GAKP;AAAA,MADHG,EACG;AAEH,SAAO,oBACLN,KADK,EAELC,OAFK,EAGLH,wBAHK,EAILQ,EAJK,CAAP;AAMD,CAfD;;;;AAiBA,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CACvBC,MADuB,EAEvBC,MAFuB,EAQpB;AAAA,MALHT,OAKG,uEALO;AACRU,IAAAA,MAAM,EAAE,IADA;AAERC,IAAAA,cAAc,EAAE;AAFR,GAKP;AAAA,MADHN,EACG;AAEH,SAAO,6BACLG,MADK,EAELC,MAFK,EAGLT,OAHK,EAILH,wBAJK,EAKLQ,EALK,CAAP;AAOD,CAjBD;;;;AAmBA,IAAMO,gBAAgB,GAAG,SAAnBA,gBAAmB,CACvBJ,MADuB,EAMpB;AAAA,MAJHR,OAIG,uEAJO;AACRW,IAAAA,cAAc,EAAE;AADR,GAIP;AAAA,MADHN,EACG;AAEH,SAAO,6BACLG,MADK,EAELR,OAFK,EAGLH,wBAHK,EAILQ,EAJK,CAAP;AAMD,CAdD;;;;AAgBA,IAAMQ,0BAA0B,GAAG,SAA7BA,0BAA6B,CACjCC,OADiC,EAEjCT,EAFiC,EAG9B;AAEH,SAAOP,eAAe,CACpB;AACEiB,IAAAA,QAAQ,EAAE,IAAIC,iBAAJ,CACRF,OADQ;AADZ,GADoB,EAMpB;AACEb,IAAAA,UAAU,EAAE;AACVgB,MAAAA,GAAG,EAAE;AADK,KADd;AAIEf,IAAAA,IAAI,EAAE,EAJR;AAKEC,IAAAA,IAAI,EAAE,CALR;AAMEC,IAAAA,KAAK,EAAE;AANT,GANoB,EAcpBC,EAdoB,CAAf,CAgBJa,IAhBI,CAiBH,UACEC,WADF,EAEK;AAEH,WAAOA,WAAW,CAACC,MAAZ,CACL,UACEC,IADF,QAKK;AAAA,UAFIC,YAEJ,QAFDL,GAEC;AAEH,aAAOI,IAAI,CAACH,IAAL,CACL,UACEK,GADF,EAEK;AAEH,eAAOX,gBAAgB,CACrB;AACEK,UAAAA,GAAG,EAAE,IAAID,iBAAJ,CACHM,YADG;AADP,SADqB,EAMrBE,SANqB,EAOrBnB,EAPqB,CAAhB,CASJa,IATI,CAUH,UACEO,MADF,EAEK;AAEH,+DACKF,GADL,IAEEE,MAFF;AAID,SAlBE,CAAP;AAoBD,OAzBI,CAAP;AA2BD,KAnCI,EAoCLC,OAAO,CAACC,OAAR,CACE,EADF,CApCK,CAAP;AAwCD,GA7DE,CAAP;AA+DD,CApED","sourcesContent":["'use strict';\n\nimport {\n  ObjectID\n} from 'mongodb';\n\nimport {\n  find,\n  findOne,\n  findOneAndUpdate,\n  findOneAndDelete\n} from './index';\n\nconst actorImageCollectionName = 'actorImages';\n\nconst actorImagesFind = (\n  query,\n  options = {\n    projection: {},\n    sort: {},\n    skip: 0,\n    limit: 0\n  },\n  db\n) => {\n\n  return find(\n    query,\n    options,\n    actorImageCollectionName,\n    db\n  );\n};\n\nconst actorImageFindOne = (\n  query,\n  options = {\n    projection: {},\n    sort: {}\n  },\n  db\n) => {\n\n  return findOne(\n    query,\n    options,\n    actorImageCollectionName,\n    db\n  );\n};\n\nconst actorImageCreate = (\n  filter,\n  update,\n  options = {\n    upsert: true,\n    returnOriginal: false\n  },\n  db\n) => {\n\n  return findOneAndUpdate(\n    filter,\n    update,\n    options,\n    actorImageCollectionName,\n    db\n  );\n};\n\nconst actorImageRemove = (\n  filter,\n  options = {\n    returnOriginal: true\n  },\n  db\n) => {\n\n  return findOneAndDelete(\n    filter,\n    options,\n    actorImageCollectionName,\n    db\n  );\n};\n\nconst actorImagesByActorIdRemove = (\n  actorId,\n  db\n) => {\n\n  return actorImagesFind(\n    {\n      _actorId: new ObjectID(\n        actorId\n      )\n    },\n    {\n      projection: {\n        _id: 1\n      },\n      sort: {},\n      skip: 0,\n      limit: 0\n    },\n    db\n  )\n    .then(\n      (\n        actorImages\n      ) => {\n\n        return actorImages.reduce(\n          (\n            memo,\n            {\n              _id: actorImageId\n            }\n          ) => {\n\n            return memo.then(\n              (\n                res\n              ) => {\n\n                return actorImageRemove(\n                  {\n                    _id: new ObjectID(\n                      actorImageId\n                    )\n                  },\n                  undefined,\n                  db\n                )\n                  .then(\n                    (\n                      result\n                    ) => {\n\n                      return [\n                        ...res,\n                        result\n                      ];\n                    }\n                  );\n              }\n            );\n          },\n          Promise.resolve(\n            []\n          )\n        );\n      }\n    );\n};\n\nexport {\n  actorImagesFind,\n  actorImageFindOne,\n  actorImageCreate,\n  actorImageRemove,\n  actorImagesByActorIdRemove\n};\n"],"file":"actorImage.js"}